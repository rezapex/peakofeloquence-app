import { tryUseNuxt, installModule, resolvePath, useLogger, useNuxt } from '@nuxt/kit';
import { readPackageJSON } from 'pkg-types';
import { createSiteConfigStack, resolveSitePath, fixSlashes } from 'site-config-stack';
import { process, env, isDevelopment } from 'std-env';
import { withoutProtocol } from 'ufo';

async function initSiteConfig(nuxt = tryUseNuxt()) {
  if (!nuxt)
    return;
  let siteConfig = nuxt._siteConfig;
  if (siteConfig)
    return siteConfig;
  siteConfig = createSiteConfigStack();
  siteConfig.push({
    _priority: -20,
    _context: "defaults",
    defaultLocale: "en",
    trailingSlash: false
  });
  const rootDir = nuxt?.options.rootDir || process.cwd?.() || false;
  siteConfig.push({
    _context: "system",
    _priority: -15,
    name: rootDir ? rootDir.split("/").pop() : void 0,
    env: env.NODE_ENV
  });
  if (rootDir) {
    const pkgJson = await readPackageJSON(void 0, { startingFrom: rootDir });
    if (pkgJson) {
      siteConfig.push({
        _context: "package.json",
        _priority: -10,
        name: pkgJson.name,
        description: pkgJson.description
      });
    }
  }
  siteConfig.push({
    _context: "vendorEnv",
    _priority: -5,
    url: [
      // vercel
      env.VERCEL_URL,
      env.NUXT_ENV_VERCEL_URL,
      // netlify
      env.URL,
      // cloudflare pages
      env.CF_PAGES_URL
    ].find((k) => Boolean(k)),
    name: [
      // vercel
      env.NUXT_ENV_VERCEL_GIT_REPO_SLUG,
      // netlify
      env.SITE_NAME
    ].find((k) => Boolean(k))
  });
  const runtimeConfig = nuxt.options.runtimeConfig;
  function getRuntimeConfig(config) {
    return runtimeConfig[`site${config}`] || runtimeConfig.public?.[`site${config}`];
  }
  function getEnv(config) {
    const key = config.toUpperCase();
    if (env[`NUXT_SITE_${key}`])
      return env[`NUXT_SITE_${key}`];
    if (env[`NUXT_PUBLIC_SITE_${key}`])
      return env[`NUXT_PUBLIC_SITE_${key}`];
  }
  siteConfig.push({
    _priority: -2,
    _context: "legacyRuntimeConfig",
    env: getRuntimeConfig("Env"),
    url: getRuntimeConfig("Url"),
    name: getRuntimeConfig("Name"),
    description: getRuntimeConfig("Description"),
    logo: getRuntimeConfig("Image"),
    defaultLocale: getRuntimeConfig("Language"),
    indexable: getRuntimeConfig("Indexable"),
    ...nuxt?.options.runtimeConfig.public.site || {}
  });
  siteConfig.push({
    _context: "buildEnv",
    _priority: -1,
    env: getEnv("Env"),
    url: getEnv("Url"),
    name: getEnv("Name"),
    description: getEnv("Description"),
    logo: getEnv("Image"),
    defaultLocale: getEnv("Language"),
    indexable: getEnv("Indexable")
  });
  nuxt._siteConfig = siteConfig;
  return siteConfig;
}
async function installNuxtSiteConfig(nuxt = tryUseNuxt()) {
  await installModule(await resolvePath("nuxt-site-config"));
  await initSiteConfig(nuxt);
}
function getSiteConfigStack(nuxt = tryUseNuxt()) {
  if (!nuxt)
    throw new Error("Nuxt context is missing.");
  if (!nuxt._siteConfig)
    throw new Error("Site config is not initialized. Make sure you are running your module after nuxt-site-config.");
  return nuxt._siteConfig;
}
function updateSiteConfig(input, nuxt = tryUseNuxt()) {
  const container = getSiteConfigStack(nuxt);
  container.push(input);
}
function useSiteConfig(nuxt = tryUseNuxt()) {
  const container = getSiteConfigStack(nuxt);
  return container.get();
}

function requireSiteConfig() {
}
function assertSiteConfig(module, requirements, options) {
  const siteConfig = useSiteConfig();
  let valid = true;
  const messages = [];
  const logger = useLogger("nuxt-site-config");
  Object.keys(requirements).forEach((k) => {
    const key = k;
    if (!siteConfig[key]) {
      const reason = (requirements[key] || "").split("\n");
      const msg = [
        `The \`${module}\` module requires a \`site.${key}\` to be set:`,
        ...reason.map((r) => `  - ${r}`),
        "",
        `You can fix this by adding a \`site.${key}\` to your \`nuxt.config\` or a \`NUXT_PUBLIC_SITE_${key.toUpperCase()}\` to your .env. Learn more at https://nuxtseo.com/site-config/getting-started/how-it-works`
      ];
      messages.push(msg.join("\n"));
      valid = false;
    }
  });
  if (!valid) {
    logger.error(messages.join("\n"));
    if (options?.throwError)
      throw new Error();
  }
  return {
    valid,
    messages
  };
}

function useNitroOrigin() {
  const cert = env.NITRO_SSL_CERT;
  const key = env.NITRO_SSL_KEY;
  let host = env.NITRO_HOST || env.HOST || false;
  let port = env.NITRO_PORT || env.PORT || (isDevelopment ? 3e3 : false);
  let protocol = cert && key || !isDevelopment ? "https" : "http";
  if ((isDevelopment || env.prerender) && env.NUXT_VITE_NODE_OPTIONS) {
    const origin = JSON.parse(env.NUXT_VITE_NODE_OPTIONS).baseURL.replace("/__nuxt_vite_node__", "");
    host = withoutProtocol(origin);
    protocol = origin.includes("https") ? "https" : "http";
  }
  if (typeof host === "string" && host.includes(":")) {
    port = host.split(":").pop();
    host = host.split(":")[0];
  }
  port = port ? `:${port}` : "";
  return `${protocol}://${host}${port}/`;
}
function withSiteUrl(path, options = {}) {
  const siteConfig = useSiteConfig();
  if (!siteConfig.url && options.throwErrorOnMissingSiteUrl)
    throw new Error("Missing url in site config. Please add `{ site: { url: <url> } }` to nuxt.config.ts.");
  const nuxt = useNuxt();
  const base = nuxt.options.app.baseURL || nuxt.options.nitro.baseURL || "/";
  return resolveSitePath(path, {
    absolute: true,
    siteUrl: siteConfig.url || "",
    trailingSlash: siteConfig.trailingSlash,
    base,
    withBase: options.withBase
  });
}
function withSiteTrailingSlash(path) {
  const siteConfig = useSiteConfig();
  return fixSlashes(siteConfig.trailingSlash, path);
}
function createSitePathResolver(options = {}, nuxt = useNuxt()) {
  const siteConfig = useSiteConfig();
  const nitroOrigin = useNitroOrigin();
  const canUseSiteUrl = (options.canonical !== false || env.prerender) && siteConfig.url;
  const nuxtBase = nuxt.options.app.baseURL || "/";
  return (path) => {
    return resolveSitePath(path, {
      ...options,
      siteUrl: canUseSiteUrl ? siteConfig.url : nitroOrigin,
      trailingSlash: siteConfig.trailingSlash,
      base: nuxtBase
    });
  };
}

export { assertSiteConfig, createSitePathResolver, getSiteConfigStack, initSiteConfig, installNuxtSiteConfig, requireSiteConfig, updateSiteConfig, useNitroOrigin, useSiteConfig, withSiteTrailingSlash, withSiteUrl };
