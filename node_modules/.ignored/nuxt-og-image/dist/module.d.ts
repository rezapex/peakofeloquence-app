import * as _nuxt_schema from '@nuxt/schema';
import { SatoriOptions } from 'satori';

interface ScreenshotOptions {
    colorScheme?: 'dark' | 'light';
    selector?: string;
    mask?: string;
    /**
     * The width of the screenshot.
     *
     * @default 1200
     */
    width: number;
    /**
     * The height of the screenshot.
     *
     * @default 630
     */
    height: number;
    /**
     * How long to wait before taking the screenshot. Useful for waiting for animations.
     */
    delay?: number;
}
interface OgImageOptions extends Partial<ScreenshotOptions> {
    provider?: 'browser' | 'satori';
    /**
     * Provide a static HTML template to render the OG Image instead of a component.
     */
    html?: string;
    title?: string;
    description?: string;
    component?: string | null;
    alt?: string;
    cache?: boolean;
    cacheKey?: string;
    /**
     * The time to live of the cache in milliseconds.
     */
    cacheTtl?: number;
    /**
     * @deprecated Use `cache` instead
     */
    static?: boolean;
    [key: string]: any;
}
interface FontConfig {
    name: string;
    weight: number;
    path?: string;
}
type InputFontConfig = (`${string}:${number}` | FontConfig);

interface RuntimeCompatibilitySchema {
    browser: false | 'playwright' | 'lambda' | 'universal';
    satori: false | 'default' | 'yoga-wasm';
    wasm: 'inline' | 'import' | 'fetch';
    png: 'resvg-wasm' | 'svg2png' | 'resvg-node';
    cssInline?: boolean;
    node?: boolean;
    wasmImportQuery?: string;
}

interface ModuleOptions {
    /**
     * Whether the og:image images should be generated.
     *
     * @default true
     */
    enabled: boolean;
    /**
     * Default data used within the payload to generate the OG Image.
     *
     * You can use this to change the default template, image sizing and more.
     *
     * @default { component: 'OgImageTemplateFallback', width: 1200, height: 630, cache: true, cacheTtl: 24 * 60 * 60 * 1000 }
     */
    defaults: OgImageOptions;
    /**
     * Fonts to use when rendering the og:image.
     *
     * @example ['Roboto:400,700', { path: 'path/to/font.ttf', weight: 400, name: 'MyFont' }]
     */
    fonts: InputFontConfig[];
    /**
     * Options to pass to satori.
     *
     * @see https://github.com/vercel/satori/blob/main/src/satori.ts#L18
     */
    satoriOptions: Partial<SatoriOptions>;
    /**
     * Should the playground at <path>/__og_image__ be enabled in development.
     *
     * @default true
     */
    playground: boolean;
    /**
     * Include Satori runtime.
     *
     * @default true
     */
    runtimeSatori: boolean;
    /**
     * Include the Browser runtime.
     * This will need to be manually enabled for production environments.
     *
     * @default `process.dev`
     */
    runtimeBrowser: boolean;
    /**
     * Enables debug logs and a debug endpoint.
     *
     * @false false
     */
    debug: boolean;
    /**
     * Modify the cache behavior.
     *
     * Passing a boolean will enable or disable the runtime cache with the default options.
     *
     * Providing a record will allow you to configure the runtime cache fully.
     *
     * @default true
     * @see https://nitro.unjs.io/guide/storage#mountpoints
     * @example { driver: 'redis', host: 'localhost', port: 6379, password: 'password' }
     */
    runtimeCacheStorage: boolean | (Record<string, any> & {
        driver: string;
    });
    /**
     * Extra component directories that should be used to resolve components.
     *
     * @default ['OgImage', 'OgImageTemplate']
     */
    componentDirs: string[];
    /**
     * Manually modify the deployment compatibility.
     */
    runtimeCompatibility?: Partial<RuntimeCompatibilitySchema>;
    /**
     * The url of your site.
     * Used to generate absolute URLs for the og:image.
     *
     * Note: This is only required when prerendering your site.
     *
     * @deprecated Provide `url` through site config instead: `{ site: { url: <value> }}`.
     * This is powered by the `nuxt-site-config` module.
     * @see https://github.com/harlan-zw/nuxt-site-config
     */
    host?: string;
    /**
     * The url of your site.
     * Used to generate absolute URLs for the og:image.
     *
     * Note: This is only required when prerendering your site.
     *
     * @deprecated Provide `url` through site config instead: `{ site: { url: <value> }}`.
     * This is powered by the `nuxt-site-config` module.
     * @see https://github.com/harlan-zw/nuxt-site-config
     */
    siteUrl?: string;
}
interface ModuleHooks {
    'og-image:config': (config: ModuleOptions) => Promise<void> | void;
    'og-image:prerenderScreenshots': (queue: OgImageOptions[]) => Promise<void> | void;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { type ModuleHooks, type ModuleOptions, _default as default };
