import { fileURLToPath } from 'node:url';
import { defineNuxtModule, addImportsDir, addComponentsDir, createResolver, installModule } from '@nuxt/kit';
import defu from 'defu';
import { extendUnocssOptions } from './unocss.mjs';
export { unocssPreset } from './unocss.mjs';
import '@unocss/preset-mini/utils';
import '@unocss/preset-mini';
import '@unocss/preset-mini/rules';
import 'unocss';

function rPath(p) {
  return fileURLToPath(new URL(p, import.meta.url).toString());
}
const module = defineNuxtModule({
  meta: {
    name: "devtools-ui-kit",
    configKey: "devtoolsUIKit"
  },
  defaults: {
    preset: rPath("./preset"),
    dev: false
  },
  async setup(options, nuxt) {
    addImportsDir(rPath("./composables"));
    addComponentsDir({ path: rPath("./components") });
    nuxt.options.css.unshift(rPath("assets/styles.css"));
    if (!options.dev)
      nuxt.options.unocss = extendUnocssOptions(nuxt.options.unocss);
    nuxt.options.vueuse = nuxt.options.vueuse || {};
    nuxt.options.colorMode = defu(nuxt.options.colorMode, { classSuffix: "" });
    const resolver = createResolver(import.meta.url);
    await installModule(await resolver.resolvePath("@unocss/nuxt"));
    await installModule(await resolver.resolvePath("@vueuse/nuxt"));
    await installModule(await resolver.resolvePath("@nuxtjs/color-mode"));
    await installModule(await resolver.resolvePath("v-lazy-show/nuxt"));
  }
});

export { module as default };
