import { joinURL } from "ufo";
import { defu } from "defu";
import { normaliseOgImageOptions } from "./util.mjs";
import { useRouter, useRuntimeConfig, useServerHead, withSiteUrl } from "#imports";
export function defineOgImageScreenshot(options = {}) {
  const router = useRouter();
  const route = router.currentRoute.value?.path || "";
  return defineOgImage({
    alt: `Web page screenshot${route ? ` of ${route}` : ""}.`,
    provider: "browser",
    component: "PageScreenshot",
    // this is an alias
    cache: true,
    ...options
  });
}
export function defineOgImageStatic(options = {}) {
  return defineOgImageCached(options);
}
export function defineOgImageCached(options = {}) {
  const { defaults } = useRuntimeConfig()["nuxt-og-image"];
  if (!defaults.cacheTtl && !options.cacheTtl)
    options.cacheTtl = 60 * 60 * 24 * 1e3 * 7;
  return defineOgImage({
    cache: true,
    ...options
  });
}
export function defineOgImageWithoutCache(options = {}) {
  return defineOgImage({
    ...options,
    cache: false,
    cacheTtl: 0
  });
}
export function defineOgImageDynamic(options = {}) {
  return defineOgImageWithoutCache(options);
}
export async function defineOgImage(_options = {}) {
  if (import.meta.server) {
    if (_options.url) {
      const type = _options.url.endsWith(".png") ? "image/png" : "image/jpeg";
      const meta2 = [
        { property: "og:image", content: _options.url },
        { property: "og:image:type", content: type },
        { name: "twitter:card", content: "summary_large_image" },
        { name: "twitter:image:src", content: _options.url }
      ];
      if (_options.width) {
        meta2.push({ property: "og:image:width", content: _options.width });
        meta2.push({ name: "twitter:image:width", content: _options.width });
      }
      if (_options.height) {
        meta2.push({ property: "og:image:height", content: _options.height });
        meta2.push({ name: "twitter:image:height", content: _options.height });
      }
      if (_options.alt) {
        meta2.push({ property: "og:image:alt", content: _options.alt });
        meta2.push({ name: "twitter:image:alt", content: _options.alt });
      }
      useServerHead({ meta: meta2 }, {
        // after async scripts when capo.js is enabled
        tagPriority: 35
      });
      return;
    }
    const { defaults } = useRuntimeConfig()["nuxt-og-image"];
    const options = normaliseOgImageOptions(_options);
    const optionsWithDefault = defu(options, defaults);
    const src = withSiteUrl(joinURL(useRouter().currentRoute.value?.path || "", "/__og_image__/og.png"));
    const meta = [
      { property: "og:image", content: src },
      { property: "og:image:width", content: optionsWithDefault.width },
      { property: "og:image:height", content: optionsWithDefault.height },
      { property: "og:image:type", content: "image/png" }
    ];
    if (options.alt)
      meta.push({ property: "og:image:alt", content: optionsWithDefault.alt });
    meta.push(...[
      { name: "twitter:card", content: "summary_large_image" },
      { name: "twitter:image:src", content: src },
      { name: "twitter:image:width", content: optionsWithDefault.width },
      { name: "twitter:image:height", content: optionsWithDefault.height }
    ]);
    if (options.alt)
      meta.push({ name: "twitter:image:alt", content: optionsWithDefault.alt });
    useServerHead({
      meta,
      script: [
        {
          id: "nuxt-og-image-options",
          type: "application/json",
          processTemplateParams: true,
          innerHTML: () => {
            const payload = {
              title: "%s"
            };
            Object.entries(options).forEach(([key, val]) => {
              payload[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = val;
            });
            return payload;
          },
          // we want this to be last in our head
          tagPosition: "bodyClose"
        }
      ]
    }, {
      // after async scripts when capo.js is enabled
      tagPriority: 35
    });
  }
}
