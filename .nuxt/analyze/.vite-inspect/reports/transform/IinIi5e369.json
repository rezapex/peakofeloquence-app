{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/stringify-entities/lib/util/format-smart.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n",
      "start": 1712268127672,
      "end": 1712268127686,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    }
  ]
}
