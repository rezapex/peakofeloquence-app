{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-extension-gfm-table/lib/edit-map.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n",
      "start": 1712268127878,
      "end": 1712268127894,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127894,
      "end": 1712268127894,
      "order": "normal"
    }
  ]
}
