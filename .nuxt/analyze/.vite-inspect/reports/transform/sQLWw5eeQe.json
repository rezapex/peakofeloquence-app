{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/rehype-external-links/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-is-element').Test} Test\n */\n\n/**\n * @callback CreateContent\n *   Create a target for the element.\n * @param {Element} element\n *   Element to check.\n * @returns {Array<ElementContent> | ElementContent | null | undefined}\n *   Content to add.\n *\n * @callback CreateProperties\n *   Create properties for an element.\n * @param {Element} element\n *   Element to check.\n * @returns {Properties | null | undefined}\n *   Properties to add.\n *\n * @callback CreateRel\n *   Create a `rel` for the element.\n * @param {Element} element\n *   Element to check.\n * @returns {Array<string> | string | null | undefined}\n *   `rel` to use.\n *\n * @callback CreateTarget\n *   Create a `target` for the element.\n * @param {Element} element\n *   Element to check.\n * @returns {Target | null | undefined}\n *   `target` to use.\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<ElementContent> | CreateContent | ElementContent | null | undefined} [content]\n *   Content to insert at the end of external links (optional); will be\n *   inserted in a `<span>` element; useful for improving accessibility by\n *   giving users advanced warning when opening a new window.\n * @property {CreateProperties | Properties | null | undefined} [contentProperties]\n *   Properties to add to the `span` wrapping `content` (optional).\n * @property {CreateProperties | Properties | null | undefined} [properties]\n *   Properties to add to the link itself (optional).\n * @property {Array<string> | null | undefined} [protocols=['http', 'https']]\n *   Protocols to check, such as `mailto` or `tel` (default: `['http',\n *   'https']`).\n * @property {Array<string> | CreateRel | string | null | undefined} [rel=['nofollow']]\n *   Link types to hint about the referenced documents (default:\n *   `['nofollow']`); pass an empty array (`[]`) to not set `rel`s on links;\n *   when using a `target`, add `noopener` and `noreferrer` to avoid\n *   exploitation of the `window.opener` API.\n * @property {CreateTarget | Target | null | undefined} [target]\n *   How to display referenced documents; the default (nothing) is to not set\n *   `target`s on links.\n * @property {Test | null | undefined} [test]\n *   Extra test to define which external link elements are modified (optional);\n *   any test that can be given to `hast-util-is-element` is supported.\n *\n * @typedef {'_blank' | '_parent' | '_self' | '_top'} Target\n *   Target.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {convertElement} from 'hast-util-is-element'\nimport isAbsoluteUrl from 'is-absolute-url'\nimport {parse} from 'space-separated-tokens'\nimport {visit} from 'unist-util-visit'\n\nconst defaultProtocols = ['http', 'https']\nconst defaultRel = ['nofollow']\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Automatically add `rel` (and `target`?) to external links.\n *\n * ###### Notes\n *\n * You should [likely not configure `target`][css-tricks].\n *\n * You should at least set `rel` to `['nofollow']`.\n * When using a `target`, add `noopener` and `noreferrer` to avoid exploitation\n * of the `window.opener` API.\n *\n * When using a `target`, you should set `content` to adhere to accessibility\n * guidelines by giving users advanced warning when opening a new window.\n *\n * [css-tricks]: https://css-tricks.com/use-target_blank/\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeExternalLinks(options) {\n  const settings = options || emptyOptions\n  const protocols = settings.protocols || defaultProtocols\n  const is = convertElement(settings.test)\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    visit(tree, 'element', function (node, index, parent) {\n      if (\n        node.tagName === 'a' &&\n        typeof node.properties.href === 'string' &&\n        is(node, index, parent)\n      ) {\n        const url = node.properties.href\n\n        if (\n          isAbsoluteUrl(url)\n            ? protocols.includes(url.slice(0, url.indexOf(':')))\n            : url.startsWith('//')\n        ) {\n          const contentRaw = createIfNeeded(settings.content, node)\n          const content =\n            contentRaw && !Array.isArray(contentRaw) ? [contentRaw] : contentRaw\n          const relRaw = createIfNeeded(settings.rel, node) || defaultRel\n          const rel = typeof relRaw === 'string' ? parse(relRaw) : relRaw\n          const target = createIfNeeded(settings.target, node)\n\n          const properties = createIfNeeded(settings.properties, node)\n\n          if (properties) {\n            Object.assign(node.properties, structuredClone(properties))\n          }\n\n          if (rel.length > 0) {\n            node.properties.rel = [...rel]\n          }\n\n          if (target) {\n            node.properties.target = target\n          }\n\n          if (content) {\n            const properties =\n              createIfNeeded(settings.contentProperties, node) || {}\n\n            node.children.push({\n              type: 'element',\n              tagName: 'span',\n              properties: structuredClone(properties),\n              children: structuredClone(content)\n            })\n          }\n        }\n      }\n    })\n  }\n}\n\n/**\n * Call a function to get a return value or use the value.\n *\n * @template T\n *   Type of value.\n * @param {T} value\n *   Value.\n * @param {Element} element\n *   Element.\n * @returns {T extends Function ? ReturnType<T> : T}\n *   Result.\n */\nfunction createIfNeeded(value, element) {\n  return typeof value === 'function' ? value(element) : value\n}\n",
      "start": 1712268127461,
      "end": 1712268127552,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127552,
      "end": 1712268127552,
      "order": "normal"
    }
  ]
}
