{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/remark-rehype/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > ðŸ‘‰ **Note**: Itâ€™s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones donâ€™t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isnâ€™t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesnâ€™t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n",
      "start": 1712268127424,
      "end": 1712268127444,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127444,
      "end": 1712268127444,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127444,
      "end": 1712268127445,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127445,
      "end": 1712268127445,
      "order": "normal"
    }
  ]
}
