{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-util-combine-extensions/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n",
      "start": 1712268127711,
      "end": 1712268127744,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127744,
      "end": 1712268127744,
      "order": "normal"
    }
  ]
}
