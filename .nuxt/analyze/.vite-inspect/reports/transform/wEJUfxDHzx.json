{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/@nuxtjs/mdc/dist/runtime/components/MDCRenderer.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script>\nimport { h, resolveComponent, Text, Comment, defineComponent, toRaw, computed, getCurrentInstance } from \"vue\";\nimport destr from \"destr\";\nimport { kebabCase, pascalCase } from \"scule\";\nimport { find, html } from \"property-information\";\nimport htmlTags from \"../parser/utils/html-tags-list\";\nconst DEFAULT_SLOT = \"default\";\nconst rxOn = /^@|^v-on:/;\nconst rxBind = /^:|^v-bind:/;\nconst rxModel = /^v-model/;\nconst nativeInputs = [\"select\", \"textarea\", \"input\"];\nconst proseComponentMap = Object.fromEntries([\"p\", \"a\", \"blockquote\", \"code\", \"pre\", \"code\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"img\", \"ul\", \"ol\", \"li\", \"strong\", \"table\", \"thead\", \"tbody\", \"td\", \"th\", \"tr\", \"script\"].map((t) => [t, `prose-${t}`]));\nexport default defineComponent({\n  name: \"MDCRenderer\",\n  props: {\n    /**\n     * Content to render\n     */\n    body: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Document meta data\n     */\n    data: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Root tag to use for rendering\n     */\n    tag: {\n      type: [String, Boolean],\n      default: void 0\n    },\n    /**\n     * Whether or not to render Prose components instead of HTML tags\n     */\n    prose: {\n      type: Boolean,\n      default: void 0\n    },\n    /**\n     * The map of custom components to use for rendering.\n     */\n    components: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  async setup(props) {\n    const $nuxt = getCurrentInstance()?.appContext?.app?.$nuxt;\n    const route = $nuxt?.$route || $nuxt?._route;\n    const { mdc } = $nuxt?.$config?.public || {};\n    const tags = {\n      ...mdc?.components?.prose && props.prose !== false ? proseComponentMap : {},\n      ...mdc?.components?.map || {},\n      ...toRaw(props.data?.mdc?.components || {}),\n      ...props.components\n    };\n    const contentKey = computed(() => {\n      const components = (props.body?.children || []).map((n) => n.tag || n.type).filter((t) => !htmlTags.includes(t));\n      return Array.from(new Set(components)).sort().join(\".\");\n    });\n    await resolveContentComponents(props.body, { tags });\n    return { tags, contentKey, route };\n  },\n  render(ctx) {\n    const { tags, tag, body, data, contentKey, route } = ctx;\n    if (!body) {\n      return null;\n    }\n    const meta = { ...data, tags, $route: route };\n    const component = tag !== false ? resolveVueComponent(tag || meta.component?.name || meta.component || \"div\") : void 0;\n    const childrenRenderer = renderSlots(body, h, meta, meta);\n    return component ? h(component, { ...meta.component?.props, ...this.$attrs, key: contentKey }, childrenRenderer) : childrenRenderer.default?.();\n  }\n});\nfunction renderNode(node, h2, documentMeta, parentScope = {}) {\n  if (node.type === \"text\") {\n    return h2(Text, node.value);\n  }\n  if (node.type === \"comment\") {\n    return h2(Comment, null, node.value);\n  }\n  const originalTag = node.tag;\n  const renderTag = findMappedTag(node, documentMeta.tags);\n  if (node.tag === \"binding\") {\n    return renderBinding(node, h2, documentMeta, parentScope);\n  }\n  const component = resolveVueComponent(renderTag);\n  if (typeof component === \"object\") {\n    component.tag = originalTag;\n  }\n  const props = propsToData(node, documentMeta);\n  return h2(\n    component,\n    props,\n    renderSlots(node, h2, documentMeta, { ...parentScope, ...props })\n  );\n}\nfunction renderBinding(node, h2, documentMeta, parentScope = {}) {\n  const data = {\n    ...parentScope,\n    $document: documentMeta,\n    $doc: documentMeta\n  };\n  const splitter = /\\.|\\[(\\d+)\\]/;\n  const keys = node.props?.value.trim().split(splitter).filter(Boolean);\n  const value = keys.reduce((data2, key) => {\n    if (data2 && key in data2) {\n      if (typeof data2[key] === \"function\") {\n        return data2[key]();\n      } else {\n        return data2[key];\n      }\n    }\n    return void 0;\n  }, data);\n  const defaultValue = node.props?.defaultValue;\n  return h2(Text, value ?? defaultValue ?? \"\");\n}\nfunction renderSlots(node, h2, documentMeta, parentProps) {\n  const children = node.children || [];\n  const slotNodes = children.reduce((data, node2) => {\n    if (!isTemplate(node2)) {\n      data[DEFAULT_SLOT].push(node2);\n      return data;\n    }\n    const slotName = getSlotName(node2);\n    data[slotName] = data[slotName] || [];\n    if (node2.type === \"element\") {\n      data[slotName].push(...node2.children || []);\n    }\n    return data;\n  }, {\n    [DEFAULT_SLOT]: []\n  });\n  const slots = Object.entries(slotNodes).reduce((slots2, [name, children2]) => {\n    if (!children2.length) {\n      return slots2;\n    }\n    slots2[name] = () => {\n      const vNodes = children2.map((child) => renderNode(child, h2, documentMeta, parentProps));\n      return mergeTextNodes(vNodes);\n    };\n    return slots2;\n  }, {});\n  return slots;\n}\nfunction propsToData(node, documentMeta) {\n  const { tag = \"\", props = {} } = node;\n  return Object.keys(props).reduce(function(data, key) {\n    if (key === \"__ignoreMap\") {\n      return data;\n    }\n    const value = props[key];\n    if (rxModel.test(key) && !nativeInputs.includes(tag)) {\n      return propsToDataRxModel(key, value, data, documentMeta);\n    }\n    if (key === \"v-bind\") {\n      return propsToDataVBind(key, value, data, documentMeta);\n    }\n    if (rxOn.test(key)) {\n      return propsToDataRxOn(key, value, data, documentMeta);\n    }\n    if (rxBind.test(key)) {\n      return propsToDataRxBind(key, value, data, documentMeta);\n    }\n    const { attribute } = find(html, key);\n    if (Array.isArray(value) && value.every((v) => typeof v === \"string\")) {\n      data[attribute] = value.join(\" \");\n      return data;\n    }\n    data[attribute] = value;\n    return data;\n  }, {});\n}\nfunction propsToDataRxModel(key, value, data, documentMeta) {\n  const number = (d) => +d;\n  const trim = (d) => d.trim();\n  const noop = (d) => d;\n  const mods = key.replace(rxModel, \"\").split(\".\").filter((d) => d).reduce((d, k) => {\n    d[k] = true;\n    return d;\n  }, {});\n  const field = \"value\";\n  const event = mods.lazy ? \"change\" : \"input\";\n  const processor = mods.number ? number : mods.trim ? trim : noop;\n  data[field] = evalInContext(value, documentMeta);\n  data.on = data.on || {};\n  data.on[event] = (e) => documentMeta[value] = processor(e);\n  return data;\n}\nfunction propsToDataVBind(_key, value, data, documentMeta) {\n  const val = evalInContext(value, documentMeta);\n  data = Object.assign(data, val);\n  return data;\n}\nfunction propsToDataRxOn(key, value, data, documentMeta) {\n  key = key.replace(rxOn, \"\");\n  data.on = data.on || {};\n  data.on[key] = () => evalInContext(value, documentMeta);\n  return data;\n}\nfunction propsToDataRxBind(key, value, data, documentMeta) {\n  key = key.replace(rxBind, \"\");\n  data[key] = evalInContext(value, documentMeta);\n  return data;\n}\nconst resolveVueComponent = (component) => {\n  if (!htmlTags.includes(component) && !component?.render && !component?.ssrRender) {\n    const componentFn = resolveComponent(pascalCase(component), false);\n    if (typeof componentFn === \"object\") {\n      return componentFn;\n    }\n  }\n  return component;\n};\nfunction evalInContext(code, context) {\n  const result = code.split(\".\").reduce((o, k) => typeof o === \"object\" ? o[k] : void 0, context);\n  return typeof result === \"undefined\" ? destr(code) : result;\n}\nfunction getSlotName(node) {\n  let name = \"\";\n  for (const propName of Object.keys(node.props || {})) {\n    if (!propName.startsWith(\"#\") && !propName.startsWith(\"v-slot:\")) {\n      continue;\n    }\n    name = propName.split(/[:#]/, 2)[1];\n    break;\n  }\n  return name || DEFAULT_SLOT;\n}\nfunction isTemplate(node) {\n  return node.tag === \"template\";\n}\nfunction mergeTextNodes(nodes) {\n  const mergedNodes = [];\n  for (const node of nodes) {\n    const previousNode = mergedNodes[mergedNodes.length - 1];\n    if (node.type === Text && previousNode?.type === Text) {\n      previousNode.children = previousNode.children + node.children;\n    } else {\n      mergedNodes.push(node);\n    }\n  }\n  return mergedNodes;\n}\nasync function resolveContentComponents(body, meta) {\n  if (!body) {\n    return;\n  }\n  const components = Array.from(new Set(loadComponents(body, meta)));\n  await Promise.all(components.map(async (c) => {\n    if (c?.render || c?.ssrRender || c?.__ssrInlineRender) {\n      return;\n    }\n    const resolvedComponent = resolveVueComponent(c);\n    if (resolvedComponent?.__asyncLoader && !resolvedComponent.__asyncResolved) {\n      await resolvedComponent.__asyncLoader();\n    }\n  }));\n  function loadComponents(node, documentMeta) {\n    const tag = node.tag;\n    if (node.type === \"text\" || tag === \"binding\" || node.type === \"comment\") {\n      return [];\n    }\n    const renderTag = findMappedTag(node, documentMeta.tags);\n    const components2 = [];\n    if (node.type !== \"root\" && !htmlTags.includes(renderTag)) {\n      components2.push(renderTag);\n    }\n    for (const child of node.children || []) {\n      components2.push(...loadComponents(child, documentMeta));\n    }\n    return components2;\n  }\n}\nfunction findMappedTag(node, tags) {\n  const tag = node.tag;\n  if (!tag || typeof node.props?.__ignoreMap !== \"undefined\") {\n    return tag;\n  }\n  return tags[tag] || tags[pascalCase(tag)] || tags[kebabCase(node.tag)] || tag;\n}\n</script>\n",
      "start": 1712268127195,
      "end": 1712268127222,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127222,
      "end": 1712268127222,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { h, resolveComponent, Text, Comment, defineComponent, toRaw, computed, getCurrentInstance } from \"vue\";\nimport destr from \"destr\";\nimport { kebabCase, pascalCase } from \"scule\";\nimport { find, html } from \"property-information\";\nimport htmlTags from \"../parser/utils/html-tags-list\";\nconst DEFAULT_SLOT = \"default\";\nconst rxOn = /^@|^v-on:/;\nconst rxBind = /^:|^v-bind:/;\nconst rxModel = /^v-model/;\nconst nativeInputs = [\"select\", \"textarea\", \"input\"];\nconst proseComponentMap = Object.fromEntries([\"p\", \"a\", \"blockquote\", \"code\", \"pre\", \"code\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"hr\", \"img\", \"ul\", \"ol\", \"li\", \"strong\", \"table\", \"thead\", \"tbody\", \"td\", \"th\", \"tr\", \"script\"].map((t) => [t, `prose-${t}`]));\nconst _sfc_main = defineComponent({\n  name: \"MDCRenderer\",\n  props: {\n    /**\n     * Content to render\n     */\n    body: {\n      type: Object,\n      required: true\n    },\n    /**\n     * Document meta data\n     */\n    data: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Root tag to use for rendering\n     */\n    tag: {\n      type: [String, Boolean],\n      default: void 0\n    },\n    /**\n     * Whether or not to render Prose components instead of HTML tags\n     */\n    prose: {\n      type: Boolean,\n      default: void 0\n    },\n    /**\n     * The map of custom components to use for rendering.\n     */\n    components: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  async setup(props) {\n    const $nuxt = getCurrentInstance()?.appContext?.app?.$nuxt;\n    const route = $nuxt?.$route || $nuxt?._route;\n    const { mdc } = $nuxt?.$config?.public || {};\n    const tags = {\n      ...mdc?.components?.prose && props.prose !== false ? proseComponentMap : {},\n      ...mdc?.components?.map || {},\n      ...toRaw(props.data?.mdc?.components || {}),\n      ...props.components\n    };\n    const contentKey = computed(() => {\n      const components = (props.body?.children || []).map((n) => n.tag || n.type).filter((t) => !htmlTags.includes(t));\n      return Array.from(new Set(components)).sort().join(\".\");\n    });\n    await resolveContentComponents(props.body, { tags });\n    return { tags, contentKey, route };\n  },\n  render(ctx) {\n    const { tags, tag, body, data, contentKey, route } = ctx;\n    if (!body) {\n      return null;\n    }\n    const meta = { ...data, tags, $route: route };\n    const component = tag !== false ? resolveVueComponent(tag || meta.component?.name || meta.component || \"div\") : void 0;\n    const childrenRenderer = renderSlots(body, h, meta, meta);\n    return component ? h(component, { ...meta.component?.props, ...this.$attrs, key: contentKey }, childrenRenderer) : childrenRenderer.default?.();\n  }\n});\nfunction renderNode(node, h2, documentMeta, parentScope = {}) {\n  if (node.type === \"text\") {\n    return h2(Text, node.value);\n  }\n  if (node.type === \"comment\") {\n    return h2(Comment, null, node.value);\n  }\n  const originalTag = node.tag;\n  const renderTag = findMappedTag(node, documentMeta.tags);\n  if (node.tag === \"binding\") {\n    return renderBinding(node, h2, documentMeta, parentScope);\n  }\n  const component = resolveVueComponent(renderTag);\n  if (typeof component === \"object\") {\n    component.tag = originalTag;\n  }\n  const props = propsToData(node, documentMeta);\n  return h2(\n    component,\n    props,\n    renderSlots(node, h2, documentMeta, { ...parentScope, ...props })\n  );\n}\nfunction renderBinding(node, h2, documentMeta, parentScope = {}) {\n  const data = {\n    ...parentScope,\n    $document: documentMeta,\n    $doc: documentMeta\n  };\n  const splitter = /\\.|\\[(\\d+)\\]/;\n  const keys = node.props?.value.trim().split(splitter).filter(Boolean);\n  const value = keys.reduce((data2, key) => {\n    if (data2 && key in data2) {\n      if (typeof data2[key] === \"function\") {\n        return data2[key]();\n      } else {\n        return data2[key];\n      }\n    }\n    return void 0;\n  }, data);\n  const defaultValue = node.props?.defaultValue;\n  return h2(Text, value ?? defaultValue ?? \"\");\n}\nfunction renderSlots(node, h2, documentMeta, parentProps) {\n  const children = node.children || [];\n  const slotNodes = children.reduce((data, node2) => {\n    if (!isTemplate(node2)) {\n      data[DEFAULT_SLOT].push(node2);\n      return data;\n    }\n    const slotName = getSlotName(node2);\n    data[slotName] = data[slotName] || [];\n    if (node2.type === \"element\") {\n      data[slotName].push(...node2.children || []);\n    }\n    return data;\n  }, {\n    [DEFAULT_SLOT]: []\n  });\n  const slots = Object.entries(slotNodes).reduce((slots2, [name, children2]) => {\n    if (!children2.length) {\n      return slots2;\n    }\n    slots2[name] = () => {\n      const vNodes = children2.map((child) => renderNode(child, h2, documentMeta, parentProps));\n      return mergeTextNodes(vNodes);\n    };\n    return slots2;\n  }, {});\n  return slots;\n}\nfunction propsToData(node, documentMeta) {\n  const { tag = \"\", props = {} } = node;\n  return Object.keys(props).reduce(function(data, key) {\n    if (key === \"__ignoreMap\") {\n      return data;\n    }\n    const value = props[key];\n    if (rxModel.test(key) && !nativeInputs.includes(tag)) {\n      return propsToDataRxModel(key, value, data, documentMeta);\n    }\n    if (key === \"v-bind\") {\n      return propsToDataVBind(key, value, data, documentMeta);\n    }\n    if (rxOn.test(key)) {\n      return propsToDataRxOn(key, value, data, documentMeta);\n    }\n    if (rxBind.test(key)) {\n      return propsToDataRxBind(key, value, data, documentMeta);\n    }\n    const { attribute } = find(html, key);\n    if (Array.isArray(value) && value.every((v) => typeof v === \"string\")) {\n      data[attribute] = value.join(\" \");\n      return data;\n    }\n    data[attribute] = value;\n    return data;\n  }, {});\n}\nfunction propsToDataRxModel(key, value, data, documentMeta) {\n  const number = (d) => +d;\n  const trim = (d) => d.trim();\n  const noop = (d) => d;\n  const mods = key.replace(rxModel, \"\").split(\".\").filter((d) => d).reduce((d, k) => {\n    d[k] = true;\n    return d;\n  }, {});\n  const field = \"value\";\n  const event = mods.lazy ? \"change\" : \"input\";\n  const processor = mods.number ? number : mods.trim ? trim : noop;\n  data[field] = evalInContext(value, documentMeta);\n  data.on = data.on || {};\n  data.on[event] = (e) => documentMeta[value] = processor(e);\n  return data;\n}\nfunction propsToDataVBind(_key, value, data, documentMeta) {\n  const val = evalInContext(value, documentMeta);\n  data = Object.assign(data, val);\n  return data;\n}\nfunction propsToDataRxOn(key, value, data, documentMeta) {\n  key = key.replace(rxOn, \"\");\n  data.on = data.on || {};\n  data.on[key] = () => evalInContext(value, documentMeta);\n  return data;\n}\nfunction propsToDataRxBind(key, value, data, documentMeta) {\n  key = key.replace(rxBind, \"\");\n  data[key] = evalInContext(value, documentMeta);\n  return data;\n}\nconst resolveVueComponent = (component) => {\n  if (!htmlTags.includes(component) && !component?.render && !component?.ssrRender) {\n    const componentFn = resolveComponent(pascalCase(component), false);\n    if (typeof componentFn === \"object\") {\n      return componentFn;\n    }\n  }\n  return component;\n};\nfunction evalInContext(code, context) {\n  const result = code.split(\".\").reduce((o, k) => typeof o === \"object\" ? o[k] : void 0, context);\n  return typeof result === \"undefined\" ? destr(code) : result;\n}\nfunction getSlotName(node) {\n  let name = \"\";\n  for (const propName of Object.keys(node.props || {})) {\n    if (!propName.startsWith(\"#\") && !propName.startsWith(\"v-slot:\")) {\n      continue;\n    }\n    name = propName.split(/[:#]/, 2)[1];\n    break;\n  }\n  return name || DEFAULT_SLOT;\n}\nfunction isTemplate(node) {\n  return node.tag === \"template\";\n}\nfunction mergeTextNodes(nodes) {\n  const mergedNodes = [];\n  for (const node of nodes) {\n    const previousNode = mergedNodes[mergedNodes.length - 1];\n    if (node.type === Text && previousNode?.type === Text) {\n      previousNode.children = previousNode.children + node.children;\n    } else {\n      mergedNodes.push(node);\n    }\n  }\n  return mergedNodes;\n}\nasync function resolveContentComponents(body, meta) {\n  if (!body) {\n    return;\n  }\n  const components = Array.from(new Set(loadComponents(body, meta)));\n  await Promise.all(components.map(async (c) => {\n    if (c?.render || c?.ssrRender || c?.__ssrInlineRender) {\n      return;\n    }\n    const resolvedComponent = resolveVueComponent(c);\n    if (resolvedComponent?.__asyncLoader && !resolvedComponent.__asyncResolved) {\n      await resolvedComponent.__asyncLoader();\n    }\n  }));\n  function loadComponents(node, documentMeta) {\n    const tag = node.tag;\n    if (node.type === \"text\" || tag === \"binding\" || node.type === \"comment\") {\n      return [];\n    }\n    const renderTag = findMappedTag(node, documentMeta.tags);\n    const components2 = [];\n    if (node.type !== \"root\" && !htmlTags.includes(renderTag)) {\n      components2.push(renderTag);\n    }\n    for (const child of node.children || []) {\n      components2.push(...loadComponents(child, documentMeta));\n    }\n    return components2;\n  }\n}\nfunction findMappedTag(node, tags) {\n  const tag = node.tag;\n  if (!tag || typeof node.props?.__ignoreMap !== \"undefined\") {\n    return tag;\n  }\n  return tags[tag] || tags[pascalCase(tag)] || tags[kebabCase(node.tag)] || tag;\n}\n\n\n\n\nexport default _sfc_main",
      "start": 1712268127222,
      "end": 1712268127227,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127227,
      "end": 1712268127227,
      "order": "normal"
    }
  ]
}
