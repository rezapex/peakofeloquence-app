{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/remark-mdc/node_modules/flat/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "function isBuffer (obj) {\n  return obj &&\n    obj.constructor &&\n    (typeof obj.constructor.isBuffer === 'function') &&\n    obj.constructor.isBuffer(obj)\n}\n\nfunction keyIdentity (key) {\n  return key\n}\n\nexport function flatten (target, opts) {\n  opts = opts || {}\n\n  const delimiter = opts.delimiter || '.'\n  const maxDepth = opts.maxDepth\n  const transformKey = opts.transformKey || keyIdentity\n  const output = {}\n\n  function step (object, prev, currentDepth) {\n    currentDepth = currentDepth || 1\n    Object.keys(object).forEach(function (key) {\n      const value = object[key]\n      const isarray = opts.safe && Array.isArray(value)\n      const type = Object.prototype.toString.call(value)\n      const isbuffer = isBuffer(value)\n      const isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      )\n\n      const newKey = prev\n        ? prev + delimiter + transformKey(key)\n        : transformKey(key)\n\n      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&\n        (!opts.maxDepth || currentDepth < maxDepth)) {\n        return step(value, newKey, currentDepth + 1)\n      }\n\n      output[newKey] = value\n    })\n  }\n\n  step(target)\n\n  return output\n}\n\nexport function unflatten (target, opts) {\n  opts = opts || {}\n\n  const delimiter = opts.delimiter || '.'\n  const overwrite = opts.overwrite || false\n  const transformKey = opts.transformKey || keyIdentity\n  const result = {}\n\n  const isbuffer = isBuffer(target)\n  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {\n    return target\n  }\n\n  // safely ensure that the key is\n  // an integer.\n  function getkey (key) {\n    const parsedKey = Number(key)\n\n    return (\n      isNaN(parsedKey) ||\n      key.indexOf('.') !== -1 ||\n      opts.object\n    )\n      ? key\n      : parsedKey\n  }\n\n  function addKeys (keyPrefix, recipient, target) {\n    return Object.keys(target).reduce(function (result, key) {\n      result[keyPrefix + delimiter + key] = target[key]\n\n      return result\n    }, recipient)\n  }\n\n  function isEmpty (val) {\n    const type = Object.prototype.toString.call(val)\n    const isArray = type === '[object Array]'\n    const isObject = type === '[object Object]'\n\n    if (!val) {\n      return true\n    } else if (isArray) {\n      return !val.length\n    } else if (isObject) {\n      return !Object.keys(val).length\n    }\n  }\n\n  target = Object.keys(target).reduce(function (result, key) {\n    const type = Object.prototype.toString.call(target[key])\n    const isObject = (type === '[object Object]' || type === '[object Array]')\n    if (!isObject || isEmpty(target[key])) {\n      result[key] = target[key]\n      return result\n    } else {\n      return addKeys(\n        key,\n        result,\n        flatten(target[key], opts)\n      )\n    }\n  }, {})\n\n  Object.keys(target).forEach(function (key) {\n    const split = key.split(delimiter).map(transformKey)\n    let key1 = getkey(split.shift())\n    let key2 = getkey(split[0])\n    let recipient = result\n\n    while (key2 !== undefined) {\n      if (key1 === '__proto__') {\n        return\n      }\n\n      const type = Object.prototype.toString.call(recipient[key1])\n      const isobject = (\n        type === '[object Object]' ||\n        type === '[object Array]'\n      )\n\n      // do not write over falsey, non-undefined values if overwrite is false\n      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {\n        return\n      }\n\n      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {\n        recipient[key1] = (\n          typeof key2 === 'number' &&\n          !opts.object\n            ? []\n            : {}\n        )\n      }\n\n      recipient = recipient[key1]\n      if (split.length > 0) {\n        key1 = getkey(split.shift())\n        key2 = getkey(split[0])\n      }\n    }\n\n    // unflatten again for 'messy objects'\n    recipient[key1] = unflatten(target[key], opts)\n  })\n\n  return result\n}\n",
      "start": 1712268127431,
      "end": 1712268127447,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127447,
      "end": 1712268127447,
      "order": "normal"
    }
  ]
}
