{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/rehype-sort-attribute-values/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('hast').Root} Root\n */\n\nimport {isElement} from 'hast-util-is-element'\nimport {visit} from 'unist-util-visit'\nimport {schema} from './schema.js'\n\n/**\n * Sort attribute values.\n *\n * @returns\n *   Transform.\n */\nexport default function rehypeSortAttributeValues() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    // Map of properties to property values to counts.\n    /** @type {Map<string, Map<number | string, number>>} */\n    const counts = new Map()\n    // List of all arrays, with their property names, so we donâ€™t walk twice.\n    /** @type {Array<[string, Array<number | string>]>} */\n    const queues = []\n\n    visit(tree, 'element', function (node) {\n      /** @type {string} */\n      let prop\n\n      for (prop in node.properties) {\n        if (Object.hasOwn(node.properties, prop)) {\n          const value = node.properties[prop]\n\n          if (\n            Object.hasOwn(schema, prop) &&\n            isElement(node, schema[prop]) &&\n            Array.isArray(value)\n          ) {\n            add(prop, value)\n          }\n        }\n      }\n    })\n\n    flush()\n\n    /**\n     * @param {string} prop\n     *   Property name.\n     * @param {Array<number | string>} values\n     *   Values.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function add(prop, values) {\n      let index = -1\n      let cache = counts.get(prop)\n\n      if (!cache) {\n        cache = new Map()\n        counts.set(prop, cache)\n      }\n\n      while (++index < values.length) {\n        const value = values[index]\n        cache.set(value, (cache.get(value) || 0) + 1)\n      }\n\n      queues.push([prop, values])\n    }\n\n    /**\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function flush() {\n      /** @type {Map<string, Array<number | string>>} */\n      const caches = new Map()\n\n      for (const [prop, cache] of counts) {\n        caches.set(\n          prop,\n          [...cache.entries()]\n            .sort(function (a, b) {\n              return b[1] - a[1] || compare(String(a[0]), String(b[0]), 0)\n            })\n            .map(function (d) {\n              return d[0]\n            })\n        )\n      }\n\n      let index = -1\n\n      while (++index < queues.length) {\n        const queue = queues[index]\n        const cache = caches.get(queue[0])\n        if (cache) {\n          queue[1].sort(function (a, b) {\n            return cache.indexOf(a) - cache.indexOf(b)\n          })\n        }\n      }\n    }\n  }\n}\n\n/**\n * This would create an infinite loop if `a` and `b` could be equal, but the\n * list we operate on only has unique values.\n *\n * @param {string} a\n *   Left value.\n * @param {string} b\n *   Right value.\n * @param {number} index\n *   Current index in values.\n * @returns {number}\n *   Order.\n */\nfunction compare(a, b, index) {\n  return (\n    (a.charCodeAt(index) || 0) - (b.charCodeAt(index) || 0) ||\n    compare(a, b, index + 1)\n  )\n}\n",
      "start": 1712268127462,
      "end": 1712268127554,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127554,
      "end": 1712268127554,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    }
  ]
}
