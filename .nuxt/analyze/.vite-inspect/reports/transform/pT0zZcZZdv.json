{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/mdast-util-to-hast/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n",
      "start": 1712268127462,
      "end": 1712268127555,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127555,
      "end": 1712268127555,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127555,
      "end": 1712268127556,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127556,
      "end": 1712268127556,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127556,
      "end": 1712268127556,
      "order": "normal"
    }
  ]
}
