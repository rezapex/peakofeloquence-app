{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/node-emoji/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// src/emojify.ts\nimport is from \"@sindresorhus/is\";\n\n// src/findByName.ts\nimport { assert } from \"@sindresorhus/is\";\n\n// src/data.ts\nimport emojilib from \"emojilib\";\n\n// src/utils.ts\nimport charRegex from \"char-regex\";\nvar charRegexMatcher = charRegex();\nfunction asFunction(input) {\n  return typeof input === \"function\" ? input : () => input;\n}\nvar NON_SPACING_MARK = String.fromCharCode(65039);\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, \"g\");\nfunction normalizeCode(code) {\n  return code.replace(nonSpacingRegex, \"\");\n}\nfunction normalizeName(name) {\n  return /:.+:/.test(name) ? name.slice(1, -1) : name;\n}\nfunction randomItem(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n// src/data.ts\nvar emojiData = Object.entries(emojilib.lib).map(\n  ([name, { char: emoji }]) => [name, emoji]\n);\nvar emojiCodesByName = new Map(emojiData);\nvar emojiNamesByCode = new Map(\n  emojiData.map(([name, emoji]) => [normalizeCode(emoji), name])\n);\n\n// src/findByName.ts\nvar findByName = (name) => {\n  assert.string(name);\n  const nameNormalized = normalizeName(name);\n  const emoji = emojiCodesByName.get(nameNormalized);\n  return emoji ? { emoji, key: nameNormalized } : void 0;\n};\n\n// src/emojify.ts\nvar emojify = (input, { fallback, format = (name) => name } = {}) => {\n  const fallbackFunction = fallback === void 0 ? fallback : asFunction(fallback);\n  is.assert.string(input);\n  is.assert.any([is.default.undefined, is.default.function_], fallbackFunction);\n  is.assert.function_(format);\n  return input.replace(/:[\\w\\-+]+:/g, (part) => {\n    const found = findByName(part);\n    if (found) {\n      return format(found.emoji, part, input);\n    }\n    if (fallbackFunction) {\n      return format(fallbackFunction(normalizeName(part)));\n    }\n    return format(part);\n  });\n};\n\n// src/findByCode.ts\nimport { assert as assert2 } from \"@sindresorhus/is\";\nvar findByCode = (code) => {\n  assert2.string(code);\n  const emojiNormalized = normalizeCode(code);\n  const key = emojiNamesByCode.get(emojiNormalized);\n  return key ? { emoji: emojiNormalized, key } : void 0;\n};\n\n// src/find.ts\nvar find = (codeOrName) => {\n  return findByCode(codeOrName) ?? findByName(codeOrName);\n};\n\n// src/get.ts\nimport { assert as assert3 } from \"@sindresorhus/is\";\nvar get = (codeOrName) => {\n  assert3.string(codeOrName);\n  return emojiCodesByName.get(normalizeName(codeOrName));\n};\n\n// src/has.ts\nimport { assert as assert4 } from \"@sindresorhus/is\";\nvar has = (codeOrName) => {\n  assert4.string(codeOrName);\n  return emojiCodesByName.has(normalizeName(codeOrName)) || emojiNamesByCode.has(normalizeCode(codeOrName));\n};\n\n// src/random.ts\nvar random = () => {\n  const [name, emoji] = randomItem(emojiData);\n  return { emoji, name };\n};\n\n// src/replace.ts\nimport { assert as assert5 } from \"@sindresorhus/is\";\nvar replace = (input, replacement, { preserveSpaces = false } = {}) => {\n  const replace2 = asFunction(replacement);\n  assert5.string(input);\n  assert5.function_(replace2);\n  assert5.boolean(preserveSpaces);\n  const characters = input.match(charRegexMatcher);\n  if (characters === null) {\n    return input;\n  }\n  return characters.map((character, index) => {\n    const found = findByCode(character);\n    if (!found) {\n      return character;\n    }\n    if (!preserveSpaces && characters[index + 1] === \" \") {\n      characters[index + 1] = \"\";\n    }\n    return replace2(found, index, input);\n  }).join(\"\");\n};\n\n// src/search.ts\nimport { assert as assert6 } from \"@sindresorhus/is\";\nvar search = (keyword) => {\n  assert6.string(keyword);\n  keyword = normalizeName(keyword);\n  return emojiData.filter(([name]) => name.includes(keyword)).map(([name, emoji]) => ({ emoji, name }));\n};\n\n// src/strip.ts\nvar strip = (input, { preserveSpaces } = {}) => replace(input, \"\", { preserveSpaces });\n\n// src/unemojify.ts\nimport { assert as assert8 } from \"@sindresorhus/is\";\n\n// src/which.ts\nimport { assert as assert7 } from \"@sindresorhus/is\";\nimport skinTone from \"skin-tone\";\nvar which = (emoji, { markdown = false } = {}) => {\n  assert7.string(emoji);\n  assert7.boolean(markdown);\n  const result = findByCode(skinTone(emoji, \"none\"));\n  if (result === void 0) {\n    return void 0;\n  }\n  return markdown ? `:${result.key}:` : result.key;\n};\n\n// src/unemojify.ts\nvar unemojify = (input) => {\n  assert8.string(input);\n  const characters = input.match(charRegexMatcher);\n  if (characters === null) {\n    return input;\n  }\n  return characters.map((character) => which(character, { markdown: true }) ?? character).join(\"\");\n};\nexport {\n  emojify,\n  find,\n  get,\n  has,\n  random,\n  replace,\n  search,\n  strip,\n  unemojify,\n  which\n};\n//# sourceMappingURL=index.js.map",
      "start": 1712268127454,
      "end": 1712268127472,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127472,
      "end": 1712268127472,
      "order": "normal"
    }
  ]
}
