{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/setext-underline.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n",
      "start": 1712268127582,
      "end": 1712268127620,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127620,
      "end": 1712268127620,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127620,
      "end": 1712268127621,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127621,
      "end": 1712268127621,
      "order": "normal"
    }
  ]
}
