{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n",
      "start": 1712268127693,
      "end": 1712268127708,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127708,
      "end": 1712268127708,
      "order": "normal"
    }
  ]
}
