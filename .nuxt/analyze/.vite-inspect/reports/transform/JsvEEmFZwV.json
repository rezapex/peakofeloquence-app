{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-util-subtokenize/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n",
      "start": 1712268127703,
      "end": 1712268127711,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127711,
      "end": 1712268127711,
      "order": "normal"
    }
  ]
}
