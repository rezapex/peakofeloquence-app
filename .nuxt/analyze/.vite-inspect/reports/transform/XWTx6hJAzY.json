{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/mdast-util-gfm-task-list-item/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // Weâ€™re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n",
      "start": 1712268127875,
      "end": 1712268127890,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127890,
      "end": 1712268127890,
      "order": "normal"
    }
  ]
}
