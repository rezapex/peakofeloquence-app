{
  "resolvedId": "/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui-pro/modules/pro/runtime/components/global/prose/ProseCodeIcon.vue?vue&type=script&setup=true&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ProseCodeIcon',\n  props: {\n  icon: {\n    type: String,\n    default: undefined\n  },\n  filename: {\n    type: String,\n    default: undefined\n  }\n},\n  setup(__props) {\n\nconst props = __props\n\nconst config = {\n  'package.json': 'vscode-icons:file-type-node',\n  'tsconfig.json': 'vscode-icons:file-type-tsconfig',\n  '.npmrc': 'vscode-icons:file-type-npm',\n  '.editorconfig': 'vscode-icons:file-type-editorconfig',\n  '.eslintrc': 'vscode-icons:file-type-eslint',\n  '.eslintrc.cjs': 'vscode-icons:file-type-eslint',\n  '.eslintignore': 'vscode-icons:file-type-eslint',\n  'eslint.config.js': 'vscode-icons:file-type-eslint',\n  'eslint.config.mjs': 'vscode-icons:file-type-eslint',\n  'eslint.config.cjs': 'vscode-icons:file-type-eslint',\n  '.gitignore': 'vscode-icons:file-type-git',\n  'yarn.lock': 'vscode-icons:file-type-yarn',\n  '.env': 'vscode-icons:file-type-dotenv',\n  '.env.example': 'vscode-icons:file-type-dotenv',\n  '.vscode/settings.json': 'vscode-icons:file-type-vscode',\n  'nuxt': 'vscode-icons:file-type-nuxt',\n  '.nuxtrc': 'vscode-icons:file-type-nuxt',\n  '.nuxtignore': 'vscode-icons:file-type-nuxt',\n  'nuxt.config.js': 'vscode-icons:file-type-nuxt',\n  'nuxt.config.ts': 'vscode-icons:file-type-nuxt',\n  'nuxt.schema.ts': 'vscode-icons:file-type-nuxt',\n  'tailwind.config.js': 'vscode-icons:file-type-tailwind',\n  'tailwind.config.ts': 'vscode-icons:file-type-tailwind',\n  vue: 'vscode-icons:file-type-vue',\n  ts: 'vscode-icons:file-type-typescript',\n  tsx: 'vscode-icons:file-type-typescript',\n  mjs: 'vscode-icons:file-type-js',\n  cjs: 'vscode-icons:file-type-js',\n  js: 'vscode-icons:file-type-js',\n  jsx: 'vscode-icons:file-type-js',\n  md: 'vscode-icons:file-type-markdown',\n  py: 'vscode-icons:file-type-python',\n  ico: 'vscode-icons:file-type-favicon',\n  npm: 'vscode-icons:file-type-npm',\n  pnpm: 'vscode-icons:file-type-pnpm',\n  npx: 'vscode-icons:file-type-npm',\n  yarn: 'vscode-icons:file-type-yarn',\n  bun: 'vscode-icons:file-type-bun',\n  yml: 'vscode-icons:file-type-yaml',\n  terminal: 'i-heroicons-command-line'\n}\n\nconst { ui } = useUI('content.prose.code.icon', undefined, config, undefined, true)\n\nconst extension = computed(() => (props.filename?.split('.').pop() || '').toLowerCase())\n// @ts-ignore\nconst hasIcon = computed(() => props.icon || ui.value[extension.value] || props.filename.includes('.'))\n// @ts-ignore\nconst icon = computed(() => props.icon ?? (props.filename && (ui.value[props.filename.split('/').pop()] ?? ui.value[extension.value] ?? `vscode-icons:file-type-${extension.value}`)))\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_UIcon = _resolveComponent(\"UIcon\")!\n\n  return (_unref(hasIcon))\n    ? (_openBlock(), _createBlock(_component_UIcon, {\n        key: 0,\n        name: _unref(icon).split(' ').pop(),\n        dynamic: \"\"\n      }, null, 8, [\"name\"]))\n    : _createCommentVNode(\"\", true)\n}\n}\n\n})",
      "start": 1714175001916,
      "end": 1714175001916
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1714175001916,
      "end": 1714175001916,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1714175001916,
      "end": 1714175001916,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1714175001916,
      "end": 1714175001916,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1714175001916,
      "end": 1714175001916,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1714175001916,
      "end": 1714175001916,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"ProseCodeIcon\",\n  props: {\n    icon: {\n      type: String,\n      default: void 0\n    },\n    filename: {\n      type: String,\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const config = {\n      \"package.json\": \"vscode-icons:file-type-node\",\n      \"tsconfig.json\": \"vscode-icons:file-type-tsconfig\",\n      \".npmrc\": \"vscode-icons:file-type-npm\",\n      \".editorconfig\": \"vscode-icons:file-type-editorconfig\",\n      \".eslintrc\": \"vscode-icons:file-type-eslint\",\n      \".eslintrc.cjs\": \"vscode-icons:file-type-eslint\",\n      \".eslintignore\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.js\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.mjs\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.cjs\": \"vscode-icons:file-type-eslint\",\n      \".gitignore\": \"vscode-icons:file-type-git\",\n      \"yarn.lock\": \"vscode-icons:file-type-yarn\",\n      \".env\": \"vscode-icons:file-type-dotenv\",\n      \".env.example\": \"vscode-icons:file-type-dotenv\",\n      \".vscode/settings.json\": \"vscode-icons:file-type-vscode\",\n      \"nuxt\": \"vscode-icons:file-type-nuxt\",\n      \".nuxtrc\": \"vscode-icons:file-type-nuxt\",\n      \".nuxtignore\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.config.js\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.config.ts\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.schema.ts\": \"vscode-icons:file-type-nuxt\",\n      \"tailwind.config.js\": \"vscode-icons:file-type-tailwind\",\n      \"tailwind.config.ts\": \"vscode-icons:file-type-tailwind\",\n      vue: \"vscode-icons:file-type-vue\",\n      ts: \"vscode-icons:file-type-typescript\",\n      tsx: \"vscode-icons:file-type-typescript\",\n      mjs: \"vscode-icons:file-type-js\",\n      cjs: \"vscode-icons:file-type-js\",\n      js: \"vscode-icons:file-type-js\",\n      jsx: \"vscode-icons:file-type-js\",\n      md: \"vscode-icons:file-type-markdown\",\n      py: \"vscode-icons:file-type-python\",\n      ico: \"vscode-icons:file-type-favicon\",\n      npm: \"vscode-icons:file-type-npm\",\n      pnpm: \"vscode-icons:file-type-pnpm\",\n      npx: \"vscode-icons:file-type-npm\",\n      yarn: \"vscode-icons:file-type-yarn\",\n      bun: \"vscode-icons:file-type-bun\",\n      yml: \"vscode-icons:file-type-yaml\",\n      terminal: \"i-heroicons-command-line\"\n    };\n    const { ui } = useUI(\"content.prose.code.icon\", void 0, config, void 0, true);\n    const extension = computed(() => (props.filename?.split(\".\").pop() || \"\").toLowerCase());\n    const hasIcon = computed(() => props.icon || ui.value[extension.value] || props.filename.includes(\".\"));\n    const icon = computed(() => props.icon ?? (props.filename && (ui.value[props.filename.split(\"/\").pop()] ?? ui.value[extension.value] ?? `vscode-icons:file-type-${extension.value}`)));\n    return (_ctx, _cache) => {\n      const _component_UIcon = _resolveComponent(\"UIcon\");\n      return _unref(hasIcon) ? (_openBlock(), _createBlock(_component_UIcon, {\n        key: 0,\n        name: _unref(icon).split(\" \").pop(),\n        dynamic: \"\"\n      }, null, 8, [\"name\"])) : _createCommentVNode(\"\", true);\n    };\n  }\n});\n",
      "start": 1714175001916,
      "end": 1714175002234,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui-pro/modules/pro/runtime/components/global/prose/ProseCodeIcon.vue?vue&type=script&setup=true&lang.ts"
        ],
        "sourcesContent": [
          "import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ProseCodeIcon',\n  props: {\n  icon: {\n    type: String,\n    default: undefined\n  },\n  filename: {\n    type: String,\n    default: undefined\n  }\n},\n  setup(__props) {\n\nconst props = __props\n\nconst config = {\n  'package.json': 'vscode-icons:file-type-node',\n  'tsconfig.json': 'vscode-icons:file-type-tsconfig',\n  '.npmrc': 'vscode-icons:file-type-npm',\n  '.editorconfig': 'vscode-icons:file-type-editorconfig',\n  '.eslintrc': 'vscode-icons:file-type-eslint',\n  '.eslintrc.cjs': 'vscode-icons:file-type-eslint',\n  '.eslintignore': 'vscode-icons:file-type-eslint',\n  'eslint.config.js': 'vscode-icons:file-type-eslint',\n  'eslint.config.mjs': 'vscode-icons:file-type-eslint',\n  'eslint.config.cjs': 'vscode-icons:file-type-eslint',\n  '.gitignore': 'vscode-icons:file-type-git',\n  'yarn.lock': 'vscode-icons:file-type-yarn',\n  '.env': 'vscode-icons:file-type-dotenv',\n  '.env.example': 'vscode-icons:file-type-dotenv',\n  '.vscode/settings.json': 'vscode-icons:file-type-vscode',\n  'nuxt': 'vscode-icons:file-type-nuxt',\n  '.nuxtrc': 'vscode-icons:file-type-nuxt',\n  '.nuxtignore': 'vscode-icons:file-type-nuxt',\n  'nuxt.config.js': 'vscode-icons:file-type-nuxt',\n  'nuxt.config.ts': 'vscode-icons:file-type-nuxt',\n  'nuxt.schema.ts': 'vscode-icons:file-type-nuxt',\n  'tailwind.config.js': 'vscode-icons:file-type-tailwind',\n  'tailwind.config.ts': 'vscode-icons:file-type-tailwind',\n  vue: 'vscode-icons:file-type-vue',\n  ts: 'vscode-icons:file-type-typescript',\n  tsx: 'vscode-icons:file-type-typescript',\n  mjs: 'vscode-icons:file-type-js',\n  cjs: 'vscode-icons:file-type-js',\n  js: 'vscode-icons:file-type-js',\n  jsx: 'vscode-icons:file-type-js',\n  md: 'vscode-icons:file-type-markdown',\n  py: 'vscode-icons:file-type-python',\n  ico: 'vscode-icons:file-type-favicon',\n  npm: 'vscode-icons:file-type-npm',\n  pnpm: 'vscode-icons:file-type-pnpm',\n  npx: 'vscode-icons:file-type-npm',\n  yarn: 'vscode-icons:file-type-yarn',\n  bun: 'vscode-icons:file-type-bun',\n  yml: 'vscode-icons:file-type-yaml',\n  terminal: 'i-heroicons-command-line'\n}\n\nconst { ui } = useUI('content.prose.code.icon', undefined, config, undefined, true)\n\nconst extension = computed(() => (props.filename?.split('.').pop() || '').toLowerCase())\n// @ts-ignore\nconst hasIcon = computed(() => props.icon || ui.value[extension.value] || props.filename.includes('.'))\n// @ts-ignore\nconst icon = computed(() => props.icon ?? (props.filename && (ui.value[props.filename.split('/').pop()] ?? ui.value[extension.value] ?? `vscode-icons:file-type-${extension.value}`)))\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_UIcon = _resolveComponent(\"UIcon\")!\n\n  return (_unref(hasIcon))\n    ? (_openBlock(), _createBlock(_component_UIcon, {\n        key: 0,\n        name: _unref(icon).split(' ').pop(),\n        dynamic: \"\"\n      }, null, 8, [\"name\"]))\n    : _createCommentVNode(\"\", true)\n}\n}\n\n})"
        ],
        "mappings": "AAAA,SAAS,mBAAmB,wBAAwB;AACpD,SAAS,SAAS,QAAQ,oBAAoB,mBAAmB,aAAa,YAAY,eAAe,cAAc,sBAAsB,2BAA2B;AAGxK,eAA4B,iCAAiB;AAAA,EAC3C,QAAQ;AAAA,EACR,OAAO;AAAA,IACP,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACE,MAAM,SAAS;AAEjB,UAAM,QAAQ;AAEd,UAAM,SAAS;AAAA,MACb,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,MACrB,cAAc;AAAA,MACd,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,yBAAyB;AAAA,MACzB,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,eAAe;AAAA,MACf,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,sBAAsB;AAAA,MACtB,sBAAsB;AAAA,MACtB,KAAK;AAAA,MACL,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,KAAK;AAAA,MACL,MAAM;AAAA,MACN,KAAK;AAAA,MACL,KAAK;AAAA,MACL,UAAU;AAAA,IACZ;AAEA,UAAM,EAAE,GAAG,IAAI,MAAM,2BAA2B,QAAW,QAAQ,QAAW,IAAI;AAElF,UAAM,YAAY,SAAS,OAAO,MAAM,UAAU,MAAM,GAAG,EAAE,IAAI,KAAK,IAAI,YAAY,CAAC;AAEvF,UAAM,UAAU,SAAS,MAAM,MAAM,QAAQ,GAAG,MAAM,UAAU,KAAK,KAAK,MAAM,SAAS,SAAS,GAAG,CAAC;AAEtG,UAAM,OAAO,SAAS,MAAM,MAAM,SAAS,MAAM,aAAa,GAAG,MAAM,MAAM,SAAS,MAAM,GAAG,EAAE,IAAI,CAAC,KAAK,GAAG,MAAM,UAAU,KAAK,KAAK,0BAA0B,UAAU,KAAK,IAAI;AAErL,WAAO,CAAC,MAAU,WAAgB;AAChC,YAAM,mBAAmB,kBAAkB,OAAO;AAElD,aAAQ,OAAO,OAAO,KACjB,WAAW,GAAG,aAAa,kBAAkB;AAAA,QAC5C,KAAK;AAAA,QACL,MAAM,OAAO,IAAI,EAAE,MAAM,GAAG,EAAE,IAAI;AAAA,QAClC,SAAS;AAAA,MACX,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KACpB,oBAAoB,IAAI,IAAI;AAAA,IAClC;AAAA,EACA;AAEA,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1714175002234,
      "end": 1714175002234,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { useUI } from '/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/composables/useUI.mjs';\nimport { computed } from 'vue';\nimport { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"ProseCodeIcon\",\n  props: {\n    icon: {\n      type: String,\n      default: void 0\n    },\n    filename: {\n      type: String,\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const config = {\n      \"package.json\": \"vscode-icons:file-type-node\",\n      \"tsconfig.json\": \"vscode-icons:file-type-tsconfig\",\n      \".npmrc\": \"vscode-icons:file-type-npm\",\n      \".editorconfig\": \"vscode-icons:file-type-editorconfig\",\n      \".eslintrc\": \"vscode-icons:file-type-eslint\",\n      \".eslintrc.cjs\": \"vscode-icons:file-type-eslint\",\n      \".eslintignore\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.js\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.mjs\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.cjs\": \"vscode-icons:file-type-eslint\",\n      \".gitignore\": \"vscode-icons:file-type-git\",\n      \"yarn.lock\": \"vscode-icons:file-type-yarn\",\n      \".env\": \"vscode-icons:file-type-dotenv\",\n      \".env.example\": \"vscode-icons:file-type-dotenv\",\n      \".vscode/settings.json\": \"vscode-icons:file-type-vscode\",\n      \"nuxt\": \"vscode-icons:file-type-nuxt\",\n      \".nuxtrc\": \"vscode-icons:file-type-nuxt\",\n      \".nuxtignore\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.config.js\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.config.ts\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.schema.ts\": \"vscode-icons:file-type-nuxt\",\n      \"tailwind.config.js\": \"vscode-icons:file-type-tailwind\",\n      \"tailwind.config.ts\": \"vscode-icons:file-type-tailwind\",\n      vue: \"vscode-icons:file-type-vue\",\n      ts: \"vscode-icons:file-type-typescript\",\n      tsx: \"vscode-icons:file-type-typescript\",\n      mjs: \"vscode-icons:file-type-js\",\n      cjs: \"vscode-icons:file-type-js\",\n      js: \"vscode-icons:file-type-js\",\n      jsx: \"vscode-icons:file-type-js\",\n      md: \"vscode-icons:file-type-markdown\",\n      py: \"vscode-icons:file-type-python\",\n      ico: \"vscode-icons:file-type-favicon\",\n      npm: \"vscode-icons:file-type-npm\",\n      pnpm: \"vscode-icons:file-type-pnpm\",\n      npx: \"vscode-icons:file-type-npm\",\n      yarn: \"vscode-icons:file-type-yarn\",\n      bun: \"vscode-icons:file-type-bun\",\n      yml: \"vscode-icons:file-type-yaml\",\n      terminal: \"i-heroicons-command-line\"\n    };\n    const { ui } = useUI(\"content.prose.code.icon\", void 0, config, void 0, true);\n    const extension = computed(() => (props.filename?.split(\".\").pop() || \"\").toLowerCase());\n    const hasIcon = computed(() => props.icon || ui.value[extension.value] || props.filename.includes(\".\"));\n    const icon = computed(() => props.icon ?? (props.filename && (ui.value[props.filename.split(\"/\").pop()] ?? ui.value[extension.value] ?? `vscode-icons:file-type-${extension.value}`)));\n    return (_ctx, _cache) => {\n      const _component_UIcon = _resolveComponent(\"UIcon\");\n      return _unref(hasIcon) ? (_openBlock(), _createBlock(_component_UIcon, {\n        key: 0,\n        name: _unref(icon).split(\" \").pop(),\n        dynamic: \"\"\n      }, null, 8, [\"name\"])) : _createCommentVNode(\"\", true);\n    };\n  }\n});\n",
      "start": 1714175002234,
      "end": 1714175002235,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappingsjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACznD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjtnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtxvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzlf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/components/elements/Icon.vue\";\nimport { useUI } from '/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/composables/useUI.mjs';\nimport { computed } from 'vue';\nimport { defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"ProseCodeIcon\",\n  props: {\n    icon: {\n      type: String,\n      default: void 0\n    },\n    filename: {\n      type: String,\n      default: void 0\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const config = {\n      \"package.json\": \"vscode-icons:file-type-node\",\n      \"tsconfig.json\": \"vscode-icons:file-type-tsconfig\",\n      \".npmrc\": \"vscode-icons:file-type-npm\",\n      \".editorconfig\": \"vscode-icons:file-type-editorconfig\",\n      \".eslintrc\": \"vscode-icons:file-type-eslint\",\n      \".eslintrc.cjs\": \"vscode-icons:file-type-eslint\",\n      \".eslintignore\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.js\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.mjs\": \"vscode-icons:file-type-eslint\",\n      \"eslint.config.cjs\": \"vscode-icons:file-type-eslint\",\n      \".gitignore\": \"vscode-icons:file-type-git\",\n      \"yarn.lock\": \"vscode-icons:file-type-yarn\",\n      \".env\": \"vscode-icons:file-type-dotenv\",\n      \".env.example\": \"vscode-icons:file-type-dotenv\",\n      \".vscode/settings.json\": \"vscode-icons:file-type-vscode\",\n      \"nuxt\": \"vscode-icons:file-type-nuxt\",\n      \".nuxtrc\": \"vscode-icons:file-type-nuxt\",\n      \".nuxtignore\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.config.js\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.config.ts\": \"vscode-icons:file-type-nuxt\",\n      \"nuxt.schema.ts\": \"vscode-icons:file-type-nuxt\",\n      \"tailwind.config.js\": \"vscode-icons:file-type-tailwind\",\n      \"tailwind.config.ts\": \"vscode-icons:file-type-tailwind\",\n      vue: \"vscode-icons:file-type-vue\",\n      ts: \"vscode-icons:file-type-typescript\",\n      tsx: \"vscode-icons:file-type-typescript\",\n      mjs: \"vscode-icons:file-type-js\",\n      cjs: \"vscode-icons:file-type-js\",\n      js: \"vscode-icons:file-type-js\",\n      jsx: \"vscode-icons:file-type-js\",\n      md: \"vscode-icons:file-type-markdown\",\n      py: \"vscode-icons:file-type-python\",\n      ico: \"vscode-icons:file-type-favicon\",\n      npm: \"vscode-icons:file-type-npm\",\n      pnpm: \"vscode-icons:file-type-pnpm\",\n      npx: \"vscode-icons:file-type-npm\",\n      yarn: \"vscode-icons:file-type-yarn\",\n      bun: \"vscode-icons:file-type-bun\",\n      yml: \"vscode-icons:file-type-yaml\",\n      terminal: \"i-heroicons-command-line\"\n    };\n    const { ui } = useUI(\"content.prose.code.icon\", void 0, config, void 0, true);\n    const extension = computed(() => (props.filename?.split(\".\").pop() || \"\").toLowerCase());\n    const hasIcon = computed(() => props.icon || ui.value[extension.value] || props.filename.includes(\".\"));\n    const icon = computed(() => props.icon ?? (props.filename && (ui.value[props.filename.split(\"/\").pop()] ?? ui.value[extension.value] ?? `vscode-icons:file-type-${extension.value}`)));\n    return (_ctx, _cache) => {\n      const _component_UIcon = __nuxt_component_0;\n      return _unref(hasIcon) ? (_openBlock(), _createBlock(_component_UIcon, {\n        key: 0,\n        name: _unref(icon).split(\" \").pop(),\n        dynamic: \"\"\n      }, null, 8, [\"name\"])) : _createCommentVNode(\"\", true);\n    };\n  }\n});\n",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714175002235,
      "end": 1714175002235,
      "order": "normal"
    }
  ]
}
