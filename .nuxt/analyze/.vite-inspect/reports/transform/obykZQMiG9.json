{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/zwitch/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n",
      "start": 1712268127674,
      "end": 1712268127685,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127685,
      "end": 1712268127685,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127685,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127686,
      "end": 1712268127686,
      "order": "normal"
    }
  ]
}
