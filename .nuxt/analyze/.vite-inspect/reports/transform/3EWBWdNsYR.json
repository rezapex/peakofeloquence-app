{
  "resolvedId": "/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/components/overlays/Notification.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <Transition appear v-bind=\"ui.transition\">\n    <div\n      :class=\"wrapperClass\"\n      role=\"status\"\n      v-bind=\"attrs\"\n      @mouseover=\"onMouseover\"\n      @mouseleave=\"onMouseleave\"\n    >\n      <div :class=\"[ui.container, ui.rounded, ui.ring]\">\n        <div class=\"flex\" :class=\"[ui.padding, ui.gap, { 'items-start': description || $slots.description, 'items-center': !description && !$slots.description }]\">\n          <UIcon v-if=\"icon\" :name=\"icon\" :class=\"iconClass\" />\n          <UAvatar v-if=\"avatar\" v-bind=\"{ size: ui.avatar.size, ...avatar }\" :class=\"ui.avatar.base\" />\n\n          <div :class=\"ui.inner\">\n            <p v-if=\"(title || $slots.title)\" :class=\"ui.title\">\n              <slot name=\"title\" :title=\"title\">\n                {{ title }}\n              </slot>\n            </p>\n            <p v-if=\"(description || $slots.description)\" :class=\"twMerge(ui.description, !(title && $slots.title) && 'mt-0 leading-5')\">\n              <slot name=\"description\" :description=\"description\">\n                {{ description }}\n              </slot>\n            </p>\n\n            <div v-if=\"(description || $slots.description) && actions.length\" :class=\"ui.actions\">\n              <UButton v-for=\"(action, index) of actions\" :key=\"index\" v-bind=\"{ ...(ui.default.actionButton || {}), ...action }\" @click.stop=\"onAction(action)\" />\n            </div>\n          </div>\n          <div v-if=\"closeButton || (!description && !$slots.description && actions.length)\" :class=\"twMerge(ui.actions, 'mt-0')\">\n            <template v-if=\"!description && !$slots.description && actions.length\">\n              <UButton v-for=\"(action, index) of actions\" :key=\"index\" v-bind=\"{ ...(ui.default.actionButton || {}), ...action }\" @click.stop=\"onAction(action)\" />\n            </template>\n\n            <UButton v-if=\"closeButton\" aria-label=\"Close\" v-bind=\"{ ...(ui.default.closeButton || {}), ...closeButton }\" @click.stop=\"onClose\" />\n          </div>\n        </div>\n        <div v-if=\"timeout\" :class=\"progressClass\" :style=\"progressStyle\" />\n      </div>\n    </div>\n  </Transition>\n</template>\n\n<script>\nimport { ref, computed, toRef, onMounted, onUnmounted, watchEffect, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UAvatar from \"../elements/Avatar.vue\";\nimport UButton from \"../elements/Button.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { useTimer } from \"../../composables/useTimer\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { notification } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.notification, notification);\nexport default defineComponent({\n  components: {\n    UIcon,\n    UAvatar,\n    UButton\n  },\n  inheritAttrs: false,\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    },\n    title: {\n      type: String,\n      default: null\n    },\n    description: {\n      type: String,\n      default: null\n    },\n    icon: {\n      type: String,\n      default: () => config.default.icon\n    },\n    avatar: {\n      type: Object,\n      default: null\n    },\n    closeButton: {\n      type: Object,\n      default: () => config.default.closeButton\n    },\n    timeout: {\n      type: Number,\n      default: () => config.default.timeout\n    },\n    actions: {\n      type: Array,\n      default: () => []\n    },\n    callback: {\n      type: Function,\n      default: null\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [\"gray\", ...appConfig.ui.colors].includes(value);\n      }\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"close\"],\n  setup(props, { emit }) {\n    const { ui, attrs } = useUI(\"notification\", toRef(props, \"ui\"), config);\n    let timer = null;\n    const remaining = ref(props.timeout);\n    const wrapperClass = computed(() => {\n      return twMerge(twJoin(\n        ui.value.wrapper,\n        ui.value.background?.replaceAll(\"{color}\", props.color),\n        ui.value.rounded,\n        ui.value.shadow\n      ), props.class);\n    });\n    const progressClass = computed(() => {\n      return twJoin(\n        ui.value.progress.base,\n        ui.value.progress.background?.replaceAll(\"{color}\", props.color)\n      );\n    });\n    const progressStyle = computed(() => {\n      const remainingPercent = remaining.value / props.timeout * 100;\n      return { width: `${remainingPercent || 0}%` };\n    });\n    const iconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        ui.value.icon.color?.replaceAll(\"{color}\", props.color)\n      );\n    });\n    function onMouseover() {\n      if (timer) {\n        timer.pause();\n      }\n    }\n    function onMouseleave() {\n      if (timer) {\n        timer.resume();\n      }\n    }\n    function onClose() {\n      if (timer) {\n        timer.stop();\n      }\n      if (props.callback) {\n        props.callback();\n      }\n      emit(\"close\");\n    }\n    function onAction(action) {\n      if (timer) {\n        timer.stop();\n      }\n      if (action.click) {\n        action.click();\n      }\n      emit(\"close\");\n    }\n    onMounted(() => {\n      if (!props.timeout) {\n        return;\n      }\n      timer = useTimer(() => {\n        onClose();\n      }, props.timeout);\n      watchEffect(() => {\n        remaining.value = timer.remaining.value;\n      });\n    });\n    onUnmounted(() => {\n      if (timer) {\n        timer.stop();\n      }\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      wrapperClass,\n      progressClass,\n      progressStyle,\n      iconClass,\n      onMouseover,\n      onMouseleave,\n      onClose,\n      onAction,\n      twMerge\n    };\n  }\n});\n</script>\n",
      "start": 1714180700588,
      "end": 1714180700611,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714180700611,
      "end": 1714180700611,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { ref, computed, toRef, onMounted, onUnmounted, watchEffect, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UAvatar from \"../elements/Avatar.vue\";\nimport UButton from \"../elements/Button.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { useTimer } from \"../../composables/useTimer\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { notification } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.notification, notification);\nconst _sfc_main = defineComponent({\n  components: {\n    UIcon,\n    UAvatar,\n    UButton\n  },\n  inheritAttrs: false,\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    },\n    title: {\n      type: String,\n      default: null\n    },\n    description: {\n      type: String,\n      default: null\n    },\n    icon: {\n      type: String,\n      default: () => config.default.icon\n    },\n    avatar: {\n      type: Object,\n      default: null\n    },\n    closeButton: {\n      type: Object,\n      default: () => config.default.closeButton\n    },\n    timeout: {\n      type: Number,\n      default: () => config.default.timeout\n    },\n    actions: {\n      type: Array,\n      default: () => []\n    },\n    callback: {\n      type: Function,\n      default: null\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [\"gray\", ...appConfig.ui.colors].includes(value);\n      }\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"close\"],\n  setup(props, { emit }) {\n    const { ui, attrs } = useUI(\"notification\", toRef(props, \"ui\"), config);\n    let timer = null;\n    const remaining = ref(props.timeout);\n    const wrapperClass = computed(() => {\n      return twMerge(twJoin(\n        ui.value.wrapper,\n        ui.value.background?.replaceAll(\"{color}\", props.color),\n        ui.value.rounded,\n        ui.value.shadow\n      ), props.class);\n    });\n    const progressClass = computed(() => {\n      return twJoin(\n        ui.value.progress.base,\n        ui.value.progress.background?.replaceAll(\"{color}\", props.color)\n      );\n    });\n    const progressStyle = computed(() => {\n      const remainingPercent = remaining.value / props.timeout * 100;\n      return { width: `${remainingPercent || 0}%` };\n    });\n    const iconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        ui.value.icon.color?.replaceAll(\"{color}\", props.color)\n      );\n    });\n    function onMouseover() {\n      if (timer) {\n        timer.pause();\n      }\n    }\n    function onMouseleave() {\n      if (timer) {\n        timer.resume();\n      }\n    }\n    function onClose() {\n      if (timer) {\n        timer.stop();\n      }\n      if (props.callback) {\n        props.callback();\n      }\n      emit(\"close\");\n    }\n    function onAction(action) {\n      if (timer) {\n        timer.stop();\n      }\n      if (action.click) {\n        action.click();\n      }\n      emit(\"close\");\n    }\n    onMounted(() => {\n      if (!props.timeout) {\n        return;\n      }\n      timer = useTimer(() => {\n        onClose();\n      }, props.timeout);\n      watchEffect(() => {\n        remaining.value = timer.remaining.value;\n      });\n    });\n    onUnmounted(() => {\n      if (timer) {\n        timer.stop();\n      }\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      wrapperClass,\n      progressClass,\n      progressStyle,\n      iconClass,\n      onMouseover,\n      onMouseleave,\n      onClose,\n      onAction,\n      twMerge\n    };\n  }\n});\n\nimport { resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, withModifiers as _withModifiers, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, Transition as _Transition, withCtx as _withCtx } from \"vue\"\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = _resolveComponent(\"UIcon\")\n  const _component_UAvatar = _resolveComponent(\"UAvatar\")\n  const _component_UButton = _resolveComponent(\"UButton\")\n\n  return (_openBlock(), _createBlock(_Transition, _mergeProps({ appear: \"\" }, _ctx.ui.transition), {\n    default: _withCtx(() => [\n      _createElementVNode(\"div\", _mergeProps({\n        class: _ctx.wrapperClass,\n        role: \"status\"\n      }, _ctx.attrs, {\n        onMouseover: _cache[0] || (_cache[0] = (...args) => (_ctx.onMouseover && _ctx.onMouseover(...args))),\n        onMouseleave: _cache[1] || (_cache[1] = (...args) => (_ctx.onMouseleave && _ctx.onMouseleave(...args)))\n      }), [\n        _createElementVNode(\"div\", {\n          class: _normalizeClass([_ctx.ui.container, _ctx.ui.rounded, _ctx.ui.ring])\n        }, [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass([\"flex\", [_ctx.ui.padding, _ctx.ui.gap, { 'items-start': _ctx.description || _ctx.$slots.description, 'items-center': !_ctx.description && !_ctx.$slots.description }]])\n          }, [\n            (_ctx.icon)\n              ? (_openBlock(), _createBlock(_component_UIcon, {\n                  key: 0,\n                  name: _ctx.icon,\n                  class: _normalizeClass(_ctx.iconClass)\n                }, null, 8, [\"name\", \"class\"]))\n              : _createCommentVNode(\"\", true),\n            (_ctx.avatar)\n              ? (_openBlock(), _createBlock(_component_UAvatar, _mergeProps({ key: 1 }, { size: _ctx.ui.avatar.size, ..._ctx.avatar }, {\n                  class: _ctx.ui.avatar.base\n                }), null, 16, [\"class\"]))\n              : _createCommentVNode(\"\", true),\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(_ctx.ui.inner)\n            }, [\n              ((_ctx.title || _ctx.$slots.title))\n                ? (_openBlock(), _createElementBlock(\"p\", {\n                    key: 0,\n                    class: _normalizeClass(_ctx.ui.title)\n                  }, [\n                    _renderSlot(_ctx.$slots, \"title\", { title: _ctx.title }, () => [\n                      _createTextVNode(_toDisplayString(_ctx.title), 1)\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true),\n              ((_ctx.description || _ctx.$slots.description))\n                ? (_openBlock(), _createElementBlock(\"p\", {\n                    key: 1,\n                    class: _normalizeClass(_ctx.twMerge(_ctx.ui.description, !(_ctx.title && _ctx.$slots.title) && 'mt-0 leading-5'))\n                  }, [\n                    _renderSlot(_ctx.$slots, \"description\", { description: _ctx.description }, () => [\n                      _createTextVNode(_toDisplayString(_ctx.description), 1)\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true),\n              ((_ctx.description || _ctx.$slots.description) && _ctx.actions.length)\n                ? (_openBlock(), _createElementBlock(\"div\", {\n                    key: 2,\n                    class: _normalizeClass(_ctx.ui.actions)\n                  }, [\n                    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.actions, (action, index) => {\n                      return (_openBlock(), _createBlock(_component_UButton, _mergeProps({ key: index }, { ...(_ctx.ui.default.actionButton || {}), ...action }, {\n                        onClick: _withModifiers($event => (_ctx.onAction(action)), [\"stop\"])\n                      }), null, 16, [\"onClick\"]))\n                    }), 128))\n                  ], 2))\n                : _createCommentVNode(\"\", true)\n            ], 2),\n            (_ctx.closeButton || (!_ctx.description && !_ctx.$slots.description && _ctx.actions.length))\n              ? (_openBlock(), _createElementBlock(\"div\", {\n                  key: 2,\n                  class: _normalizeClass(_ctx.twMerge(_ctx.ui.actions, 'mt-0'))\n                }, [\n                  (!_ctx.description && !_ctx.$slots.description && _ctx.actions.length)\n                    ? (_openBlock(true), _createElementBlock(_Fragment, { key: 0 }, _renderList(_ctx.actions, (action, index) => {\n                        return (_openBlock(), _createBlock(_component_UButton, _mergeProps({ key: index }, { ...(_ctx.ui.default.actionButton || {}), ...action }, {\n                          onClick: _withModifiers($event => (_ctx.onAction(action)), [\"stop\"])\n                        }), null, 16, [\"onClick\"]))\n                      }), 128))\n                    : _createCommentVNode(\"\", true),\n                  (_ctx.closeButton)\n                    ? (_openBlock(), _createBlock(_component_UButton, _mergeProps({\n                        key: 1,\n                        \"aria-label\": \"Close\"\n                      }, { ...(_ctx.ui.default.closeButton || {}), ..._ctx.closeButton }, {\n                        onClick: _withModifiers(_ctx.onClose, [\"stop\"])\n                      }), null, 16, [\"onClick\"]))\n                    : _createCommentVNode(\"\", true)\n                ], 2))\n              : _createCommentVNode(\"\", true)\n          ], 2),\n          (_ctx.timeout)\n            ? (_openBlock(), _createElementBlock(\"div\", {\n                key: 0,\n                class: _normalizeClass(_ctx.progressClass),\n                style: _normalizeStyle(_ctx.progressStyle)\n              }, null, 6))\n            : _createCommentVNode(\"\", true)\n        ], 2)\n      ], 16)\n    ]),\n    _: 3\n  }, 16))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1714180700611,
      "end": 1714180700614,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1714180700614,
      "end": 1714180700614,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/components/elements/Icon.vue\";\nimport { default as __nuxt_component_1 } from \"/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/components/elements/Avatar.vue\";\nimport { default as __nuxt_component_2 } from \"/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/components/elements/Button.vue\";\n\nimport { ref, computed, toRef, onMounted, onUnmounted, watchEffect, defineComponent } from \"vue\";\nimport { twMerge, twJoin } from \"tailwind-merge\";\nimport UIcon from \"../elements/Icon.vue\";\nimport UAvatar from \"../elements/Avatar.vue\";\nimport UButton from \"../elements/Button.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { useTimer } from \"../../composables/useTimer\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { notification } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.notification, notification);\nconst _sfc_main = defineComponent({\n  components: {\n    UIcon,\n    UAvatar,\n    UButton\n  },\n  inheritAttrs: false,\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    },\n    title: {\n      type: String,\n      default: null\n    },\n    description: {\n      type: String,\n      default: null\n    },\n    icon: {\n      type: String,\n      default: () => config.default.icon\n    },\n    avatar: {\n      type: Object,\n      default: null\n    },\n    closeButton: {\n      type: Object,\n      default: () => config.default.closeButton\n    },\n    timeout: {\n      type: Number,\n      default: () => config.default.timeout\n    },\n    actions: {\n      type: Array,\n      default: () => []\n    },\n    callback: {\n      type: Function,\n      default: null\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [\"gray\", ...appConfig.ui.colors].includes(value);\n      }\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: [\"close\"],\n  setup(props, { emit }) {\n    const { ui, attrs } = useUI(\"notification\", toRef(props, \"ui\"), config);\n    let timer = null;\n    const remaining = ref(props.timeout);\n    const wrapperClass = computed(() => {\n      return twMerge(twJoin(\n        ui.value.wrapper,\n        ui.value.background?.replaceAll(\"{color}\", props.color),\n        ui.value.rounded,\n        ui.value.shadow\n      ), props.class);\n    });\n    const progressClass = computed(() => {\n      return twJoin(\n        ui.value.progress.base,\n        ui.value.progress.background?.replaceAll(\"{color}\", props.color)\n      );\n    });\n    const progressStyle = computed(() => {\n      const remainingPercent = remaining.value / props.timeout * 100;\n      return { width: `${remainingPercent || 0}%` };\n    });\n    const iconClass = computed(() => {\n      return twJoin(\n        ui.value.icon.base,\n        ui.value.icon.color?.replaceAll(\"{color}\", props.color)\n      );\n    });\n    function onMouseover() {\n      if (timer) {\n        timer.pause();\n      }\n    }\n    function onMouseleave() {\n      if (timer) {\n        timer.resume();\n      }\n    }\n    function onClose() {\n      if (timer) {\n        timer.stop();\n      }\n      if (props.callback) {\n        props.callback();\n      }\n      emit(\"close\");\n    }\n    function onAction(action) {\n      if (timer) {\n        timer.stop();\n      }\n      if (action.click) {\n        action.click();\n      }\n      emit(\"close\");\n    }\n    onMounted(() => {\n      if (!props.timeout) {\n        return;\n      }\n      timer = useTimer(() => {\n        onClose();\n      }, props.timeout);\n      watchEffect(() => {\n        remaining.value = timer.remaining.value;\n      });\n    });\n    onUnmounted(() => {\n      if (timer) {\n        timer.stop();\n      }\n    });\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      wrapperClass,\n      progressClass,\n      progressStyle,\n      iconClass,\n      onMouseover,\n      onMouseleave,\n      onClose,\n      onAction,\n      twMerge\n    };\n  }\n});\n\nimport { resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, withModifiers as _withModifiers, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, Transition as _Transition, withCtx as _withCtx } from \"vue\"\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = __nuxt_component_0\n  const _component_UAvatar = __nuxt_component_1\n  const _component_UButton = __nuxt_component_2\n\n  return (_openBlock(), _createBlock(_Transition, _mergeProps({ appear: \"\" }, _ctx.ui.transition), {\n    default: _withCtx(() => [\n      _createElementVNode(\"div\", _mergeProps({\n        class: _ctx.wrapperClass,\n        role: \"status\"\n      }, _ctx.attrs, {\n        onMouseover: _cache[0] || (_cache[0] = (...args) => (_ctx.onMouseover && _ctx.onMouseover(...args))),\n        onMouseleave: _cache[1] || (_cache[1] = (...args) => (_ctx.onMouseleave && _ctx.onMouseleave(...args)))\n      }), [\n        _createElementVNode(\"div\", {\n          class: _normalizeClass([_ctx.ui.container, _ctx.ui.rounded, _ctx.ui.ring])\n        }, [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass([\"flex\", [_ctx.ui.padding, _ctx.ui.gap, { 'items-start': _ctx.description || _ctx.$slots.description, 'items-center': !_ctx.description && !_ctx.$slots.description }]])\n          }, [\n            (_ctx.icon)\n              ? (_openBlock(), _createBlock(_component_UIcon, {\n                  key: 0,\n                  name: _ctx.icon,\n                  class: _normalizeClass(_ctx.iconClass)\n                }, null, 8, [\"name\", \"class\"]))\n              : _createCommentVNode(\"\", true),\n            (_ctx.avatar)\n              ? (_openBlock(), _createBlock(_component_UAvatar, _mergeProps({ key: 1 }, { size: _ctx.ui.avatar.size, ..._ctx.avatar }, {\n                  class: _ctx.ui.avatar.base\n                }), null, 16, [\"class\"]))\n              : _createCommentVNode(\"\", true),\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(_ctx.ui.inner)\n            }, [\n              ((_ctx.title || _ctx.$slots.title))\n                ? (_openBlock(), _createElementBlock(\"p\", {\n                    key: 0,\n                    class: _normalizeClass(_ctx.ui.title)\n                  }, [\n                    _renderSlot(_ctx.$slots, \"title\", { title: _ctx.title }, () => [\n                      _createTextVNode(_toDisplayString(_ctx.title), 1)\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true),\n              ((_ctx.description || _ctx.$slots.description))\n                ? (_openBlock(), _createElementBlock(\"p\", {\n                    key: 1,\n                    class: _normalizeClass(_ctx.twMerge(_ctx.ui.description, !(_ctx.title && _ctx.$slots.title) && 'mt-0 leading-5'))\n                  }, [\n                    _renderSlot(_ctx.$slots, \"description\", { description: _ctx.description }, () => [\n                      _createTextVNode(_toDisplayString(_ctx.description), 1)\n                    ])\n                  ], 2))\n                : _createCommentVNode(\"\", true),\n              ((_ctx.description || _ctx.$slots.description) && _ctx.actions.length)\n                ? (_openBlock(), _createElementBlock(\"div\", {\n                    key: 2,\n                    class: _normalizeClass(_ctx.ui.actions)\n                  }, [\n                    (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.actions, (action, index) => {\n                      return (_openBlock(), _createBlock(_component_UButton, _mergeProps({ key: index }, { ...(_ctx.ui.default.actionButton || {}), ...action }, {\n                        onClick: _withModifiers($event => (_ctx.onAction(action)), [\"stop\"])\n                      }), null, 16, [\"onClick\"]))\n                    }), 128))\n                  ], 2))\n                : _createCommentVNode(\"\", true)\n            ], 2),\n            (_ctx.closeButton || (!_ctx.description && !_ctx.$slots.description && _ctx.actions.length))\n              ? (_openBlock(), _createElementBlock(\"div\", {\n                  key: 2,\n                  class: _normalizeClass(_ctx.twMerge(_ctx.ui.actions, 'mt-0'))\n                }, [\n                  (!_ctx.description && !_ctx.$slots.description && _ctx.actions.length)\n                    ? (_openBlock(true), _createElementBlock(_Fragment, { key: 0 }, _renderList(_ctx.actions, (action, index) => {\n                        return (_openBlock(), _createBlock(_component_UButton, _mergeProps({ key: index }, { ...(_ctx.ui.default.actionButton || {}), ...action }, {\n                          onClick: _withModifiers($event => (_ctx.onAction(action)), [\"stop\"])\n                        }), null, 16, [\"onClick\"]))\n                      }), 128))\n                    : _createCommentVNode(\"\", true),\n                  (_ctx.closeButton)\n                    ? (_openBlock(), _createBlock(_component_UButton, _mergeProps({\n                        key: 1,\n                        \"aria-label\": \"Close\"\n                      }, { ...(_ctx.ui.default.closeButton || {}), ..._ctx.closeButton }, {\n                        onClick: _withModifiers(_ctx.onClose, [\"stop\"])\n                      }), null, 16, [\"onClick\"]))\n                    : _createCommentVNode(\"\", true)\n                ], 2))\n              : _createCommentVNode(\"\", true)\n          ], 2),\n          (_ctx.timeout)\n            ? (_openBlock(), _createElementBlock(\"div\", {\n                key: 0,\n                class: _normalizeClass(_ctx.progressClass),\n                style: _normalizeStyle(_ctx.progressStyle)\n              }, null, 6))\n            : _createCommentVNode(\"\", true)\n        ], 2)\n      ], 16)\n    ]),\n    _: 3\n  }, 16))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1714180700614,
      "end": 1714180700615,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1714180700615,
      "end": 1714180700615,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714180700615,
      "end": 1714180700615,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714180700615,
      "end": 1714180700615,
      "order": "normal"
    }
  ]
}
