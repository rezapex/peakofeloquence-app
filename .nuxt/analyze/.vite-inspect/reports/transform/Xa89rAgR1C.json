{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/parse5/dist/serializer/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (!attr.namespace) {\n            html += attr.name;\n        }\n        else\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n//# sourceMappingURL=index.js.map",
      "start": 1712268127882,
      "end": 1712268127903,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127903,
      "end": 1712268127903,
      "order": "normal"
    }
  ]
}
