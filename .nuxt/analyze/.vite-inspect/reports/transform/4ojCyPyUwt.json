{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark/lib/initialize/text.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n",
      "start": 1712268127855,
      "end": 1712268127884,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127884,
      "end": 1712268127884,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127884,
      "end": 1712268127885,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127885,
      "end": 1712268127885,
      "order": "normal"
    }
  ]
}
