{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/content.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: itâ€™s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n",
      "start": 1712268127562,
      "end": 1712268127588,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127588,
      "end": 1712268127589,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127589,
      "end": 1712268127589,
      "order": "normal"
    }
  ]
}
