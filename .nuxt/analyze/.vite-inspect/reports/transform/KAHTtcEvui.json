{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/parse5/dist/parser/formatting-element-list.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n//# sourceMappingURL=formatting-element-list.js.map",
      "start": 1712268127919,
      "end": 1712268127929,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127929,
      "end": 1712268127929,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127929,
      "end": 1712268127930,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127930,
      "end": 1712268127930,
      "order": "normal"
    }
  ]
}
