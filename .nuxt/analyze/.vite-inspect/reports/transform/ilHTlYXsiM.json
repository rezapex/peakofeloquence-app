{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/code-text.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n",
      "start": 1712268127561,
      "end": 1712268127596,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    }
  ]
}
