{
  "resolvedId": "/Users/rezajafar/peakofeloquence-app/node_modules/nuxt-site-config/dist/runtime/composables/useNitroOrigin.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { withoutProtocol } from \"ufo\";\nimport { getRequestHost, getRequestProtocol } from \"h3\";\nimport { useRequestEvent } from \"#imports\";\nexport function useNitroOrigin(e) {\n  if (process.server) {\n    e = e || useRequestEvent();\n    const cert = process.env.NITRO_SSL_CERT;\n    const key = process.env.NITRO_SSL_KEY;\n    let host = process.env.NITRO_HOST || process.env.HOST || false;\n    let port;\n    if (process.dev)\n      port = process.env.NITRO_PORT || process.env.PORT || \"3000\";\n    let protocol = cert && key || !process.dev ? \"https\" : \"http\";\n    if (!e) {\n      if ((process.dev || process.env.prerender) && process.env.NUXT_VITE_NODE_OPTIONS) {\n        const origin = JSON.parse(process.env.NUXT_VITE_NODE_OPTIONS).baseURL.replace(\"/__nuxt_vite_node__\", \"\");\n        host = withoutProtocol(origin);\n        protocol = origin.includes(\"https\") ? \"https\" : \"http\";\n      }\n    } else {\n      host = getRequestHost(e, { xForwardedHost: true }) || host;\n      protocol = getRequestProtocol(e, { xForwardedProto: true }) || protocol;\n    }\n    if (typeof host === \"string\" && host.includes(\":\")) {\n      port = host.split(\":\").pop();\n      host = host.split(\":\")[0];\n    }\n    port = port ? `:${port}` : \"\";\n    return `${protocol}://${host}${port}/`;\n  }\n  if (process.client)\n    return window.location.origin;\n  return \"\";\n}\n",
      "start": 1714175002626,
      "end": 1714175002635,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1714175002635,
      "end": 1714175002635,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { withoutProtocol } from \"ufo\";\nimport { getRequestHost, getRequestProtocol } from \"h3\";\nimport { useRequestEvent } from \"#imports\";\nexport function useNitroOrigin(e) {\n  if (false) {\n    e = e || useRequestEvent();\n    const cert = define_process_env_default.NITRO_SSL_CERT;\n    const key = define_process_env_default.NITRO_SSL_KEY;\n    let host = define_process_env_default.NITRO_HOST || define_process_env_default.HOST || false;\n    let port;\n    if (false)\n      port = define_process_env_default.NITRO_PORT || define_process_env_default.PORT || \"3000\";\n    let protocol = cert && key || true ? \"https\" : \"http\";\n    if (!e) {\n      if (define_process_env_default.prerender && define_process_env_default.NUXT_VITE_NODE_OPTIONS) {\n        const origin = JSON.parse(define_process_env_default.NUXT_VITE_NODE_OPTIONS).baseURL.replace(\"/__nuxt_vite_node__\", \"\");\n        host = withoutProtocol(origin);\n        protocol = origin.includes(\"https\") ? \"https\" : \"http\";\n      }\n    } else {\n      host = getRequestHost(e, { xForwardedHost: true }) || host;\n      protocol = getRequestProtocol(e, { xForwardedProto: true }) || protocol;\n    }\n    if (typeof host === \"string\" && host.includes(\":\")) {\n      port = host.split(\":\").pop();\n      host = host.split(\":\")[0];\n    }\n    port = port ? `:${port}` : \"\";\n    return `${protocol}://${host}${port}/`;\n  }\n  if (true)\n    return window.location.origin;\n  return \"\";\n}\n",
      "start": 1714175002635,
      "end": 1714175002873,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { useRequestEvent } from '#app/composables/ssr';\nimport { withoutProtocol } from \"ufo\";\nimport { getRequestHost, getRequestProtocol } from \"h3\";\nexport function useNitroOrigin(e) {\n  if (false) {\n    e = e || useRequestEvent();\n    const cert = define_process_env_default.NITRO_SSL_CERT;\n    const key = define_process_env_default.NITRO_SSL_KEY;\n    let host = define_process_env_default.NITRO_HOST || define_process_env_default.HOST || false;\n    let port;\n    if (false)\n      port = define_process_env_default.NITRO_PORT || define_process_env_default.PORT || \"3000\";\n    let protocol = cert && key || true ? \"https\" : \"http\";\n    if (!e) {\n      if (define_process_env_default.prerender && define_process_env_default.NUXT_VITE_NODE_OPTIONS) {\n        const origin = JSON.parse(define_process_env_default.NUXT_VITE_NODE_OPTIONS).baseURL.replace(\"/__nuxt_vite_node__\", \"\");\n        host = withoutProtocol(origin);\n        protocol = origin.includes(\"https\") ? \"https\" : \"http\";\n      }\n    } else {\n      host = getRequestHost(e, { xForwardedHost: true }) || host;\n      protocol = getRequestProtocol(e, { xForwardedProto: true }) || protocol;\n    }\n    if (typeof host === \"string\" && host.includes(\":\")) {\n      port = host.split(\":\").pop();\n      host = host.split(\":\")[0];\n    }\n    port = port ? `:${port}` : \"\";\n    return `${protocol}://${host}${port}/`;\n  }\n  if (true)\n    return window.location.origin;\n  return \"\";\n}\n",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAExD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACdzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACbthI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714175002873,
      "end": 1714175002873,
      "order": "normal"
    }
  ]
}
