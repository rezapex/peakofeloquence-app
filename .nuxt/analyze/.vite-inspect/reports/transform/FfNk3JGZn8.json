{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/heading-atx.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n",
      "start": 1712268127565,
      "end": 1712268127599,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127599,
      "end": 1712268127599,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127599,
      "end": 1712268127600,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127600,
      "end": 1712268127600,
      "order": "normal"
    }
  ]
}
