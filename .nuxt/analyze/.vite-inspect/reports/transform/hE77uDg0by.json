{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/mdast-util-gfm-footnote/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n",
      "start": 1712268127861,
      "end": 1712268127886,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127886,
      "end": 1712268127886,
      "order": "normal"
    }
  ]
}
