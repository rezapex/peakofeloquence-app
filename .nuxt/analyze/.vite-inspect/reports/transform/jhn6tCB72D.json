{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/@ungap/structured-clone/esm/serialize.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n",
      "start": 1712268127732,
      "end": 1712268127761,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127761,
      "end": 1712268127761,
      "order": "normal"
    }
  ]
}
