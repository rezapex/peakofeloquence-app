{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-util-sanitize-uri/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n",
      "start": 1712268127672,
      "end": 1712268127682,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127682,
      "end": 1712268127682,
      "order": "normal"
    }
  ]
}
