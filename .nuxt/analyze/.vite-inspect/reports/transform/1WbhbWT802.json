{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/@nuxtjs/mdc/dist/runtime/components/MDC.vue?vue&type=script&setup=true&lang.ts",
  "transforms": [
    {
      "name": "vite:vue",
      "result": "import { withAsyncContext as _withAsyncContext, defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nimport { hash } from 'ohash'\nimport { useAsyncData } from 'nuxt/app'\nimport { parseMarkdown } from '../parser'\nimport { watch, computed, type PropType } from 'vue'\nimport type { MDCParseOptions } from '../types'\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MDC',\n  props: {\n  tag: {\n    type: [String, Boolean],\n    default: 'div'\n  },\n  /**\n   * Raw markdown string or parsed markdown object from `parseMarkdown`\n   */\n  value: {\n    type: [String, Object],\n    required: true\n  },\n  /**\n   * Render only the excerpt\n   */\n  excerpt: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Options for `parseMarkdown`\n   */\n  parserOptions: {\n    type: Object as PropType<MDCParseOptions>,\n    default: () => ({})\n  },\n  /**\n   * Class to be applied to the root element\n   */\n  class: {\n    type: [String, Array, Object],\n    default: ''\n  }\n},\n  async setup(__props) {\n\nlet __temp: any, __restore: any\n\nconst props = __props\n\nconst key = computed(() => hash(props.value))\n\nconst { data, refresh, error } = (\n  ([__temp,__restore] = _withAsyncContext(async () => useAsyncData(key.value, async () => {\n  if (typeof props.value !== 'string') {\n    return props.value\n  }\n  return await parseMarkdown(props.value, props.parserOptions)\n}))),\n  __temp = await __temp,\n  __restore(),\n  __temp\n)\n\nconst body = computed(() => props.excerpt ? data.value?.excerpt : data.value?.body)\n\nwatch(() => props.value, () => {\n  refresh()\n})\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_MDCRenderer = _resolveComponent(\"MDCRenderer\")!\n\n  return _renderSlot(_ctx.$slots, \"default\", {\n    data: _unref(data)?.data,\n    body: _unref(data)?.body,\n    toc: _unref(data)?.toc,\n    excerpt: _unref(data)?.excerpt,\n    error: _unref(error)\n  }, () => [\n    (body.value)\n      ? (_openBlock(), _createBlock(_component_MDCRenderer, {\n          key: 0,\n          tag: __props.tag,\n          class: _normalizeClass(props.class),\n          body: body.value,\n          data: _unref(data)?.data\n        }, null, 8, [\"tag\", \"class\", \"body\", \"data\"]))\n      : _createCommentVNode(\"\", true)\n  ])\n}\n}\n\n})",
      "start": 1712268127291,
      "end": 1712268127291
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127291,
      "end": 1712268127291,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127291,
      "end": 1712268127291,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127291,
      "end": 1712268127291,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127291,
      "end": 1712268127291,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127291,
      "end": 1712268127291,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { withAsyncContext as _withAsyncContext, defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useAsyncData } from \"nuxt/app\";\nimport { parseMarkdown } from \"../parser\";\nimport { watch, computed } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"MDC\",\n  props: {\n    tag: {\n      type: [String, Boolean],\n      default: \"div\"\n    },\n    /**\n     * Raw markdown string or parsed markdown object from `parseMarkdown`\n     */\n    value: {\n      type: [String, Object],\n      required: true\n    },\n    /**\n     * Render only the excerpt\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Options for `parseMarkdown`\n     */\n    parserOptions: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Class to be applied to the root element\n     */\n    class: {\n      type: [String, Array, Object],\n      default: \"\"\n    }\n  },\n  async setup(__props) {\n    let __temp, __restore;\n    const props = __props;\n    const key = computed(() => hash(props.value));\n    const { data, refresh, error } = ([__temp, __restore] = _withAsyncContext(async () => useAsyncData(key.value, async () => {\n      if (typeof props.value !== \"string\") {\n        return props.value;\n      }\n      return await parseMarkdown(props.value, props.parserOptions);\n    })), __temp = await __temp, __restore(), __temp);\n    const body = computed(() => props.excerpt ? data.value?.excerpt : data.value?.body);\n    watch(() => props.value, () => {\n      refresh();\n    });\n    return (_ctx, _cache) => {\n      const _component_MDCRenderer = _resolveComponent(\"MDCRenderer\");\n      return _renderSlot(_ctx.$slots, \"default\", {\n        data: _unref(data)?.data,\n        body: _unref(data)?.body,\n        toc: _unref(data)?.toc,\n        excerpt: _unref(data)?.excerpt,\n        error: _unref(error)\n      }, () => [\n        body.value ? (_openBlock(), _createBlock(_component_MDCRenderer, {\n          key: 0,\n          tag: __props.tag,\n          class: _normalizeClass(props.class),\n          body: body.value,\n          data: _unref(data)?.data\n        }, null, 8, [\"tag\", \"class\", \"body\", \"data\"])) : _createCommentVNode(\"\", true)\n      ]);\n    };\n  }\n});\n",
      "start": 1712268127291,
      "end": 1712268127360,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/rezajafar/peakofeloquence-site/node_modules/@nuxtjs/mdc/dist/runtime/components/MDC.vue?vue&type=script&setup=true&lang.ts"
        ],
        "sourcesContent": [
          "import { withAsyncContext as _withAsyncContext, defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nimport { hash } from 'ohash'\nimport { useAsyncData } from 'nuxt/app'\nimport { parseMarkdown } from '../parser'\nimport { watch, computed, type PropType } from 'vue'\nimport type { MDCParseOptions } from '../types'\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'MDC',\n  props: {\n  tag: {\n    type: [String, Boolean],\n    default: 'div'\n  },\n  /**\n   * Raw markdown string or parsed markdown object from `parseMarkdown`\n   */\n  value: {\n    type: [String, Object],\n    required: true\n  },\n  /**\n   * Render only the excerpt\n   */\n  excerpt: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * Options for `parseMarkdown`\n   */\n  parserOptions: {\n    type: Object as PropType<MDCParseOptions>,\n    default: () => ({})\n  },\n  /**\n   * Class to be applied to the root element\n   */\n  class: {\n    type: [String, Array, Object],\n    default: ''\n  }\n},\n  async setup(__props) {\n\nlet __temp: any, __restore: any\n\nconst props = __props\n\nconst key = computed(() => hash(props.value))\n\nconst { data, refresh, error } = (\n  ([__temp,__restore] = _withAsyncContext(async () => useAsyncData(key.value, async () => {\n  if (typeof props.value !== 'string') {\n    return props.value\n  }\n  return await parseMarkdown(props.value, props.parserOptions)\n}))),\n  __temp = await __temp,\n  __restore(),\n  __temp\n)\n\nconst body = computed(() => props.excerpt ? data.value?.excerpt : data.value?.body)\n\nwatch(() => props.value, () => {\n  refresh()\n})\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_MDCRenderer = _resolveComponent(\"MDCRenderer\")!\n\n  return _renderSlot(_ctx.$slots, \"default\", {\n    data: _unref(data)?.data,\n    body: _unref(data)?.body,\n    toc: _unref(data)?.toc,\n    excerpt: _unref(data)?.excerpt,\n    error: _unref(error)\n  }, () => [\n    (body.value)\n      ? (_openBlock(), _createBlock(_component_MDCRenderer, {\n          key: 0,\n          tag: __props.tag,\n          class: _normalizeClass(props.class),\n          body: body.value,\n          data: _unref(data)?.data\n        }, null, 8, [\"tag\", \"class\", \"body\", \"data\"]))\n      : _createCommentVNode(\"\", true)\n  ])\n}\n}\n\n})"
        ],
        "mappings": "AAAA,SAAS,oBAAoB,mBAAmB,mBAAmB,wBAAwB;AAC3F,SAAS,SAAS,QAAQ,cAAc,aAAa,oBAAoB,mBAAmB,kBAAkB,iBAAiB,aAAa,YAAY,eAAe,cAAc,sBAAsB,2BAA2B;AAEtO,SAAS,YAAY;AACrB,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAC9B,SAAS,OAAO,gBAA+B;AAI/C,eAA4B,iCAAiB;AAAA,EAC3C,QAAQ;AAAA,EACR,OAAO;AAAA,IACP,KAAK;AAAA,MACH,MAAM,CAAC,QAAQ,OAAO;AAAA,MACtB,SAAS;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,OAAO;AAAA,MACL,MAAM,CAAC,QAAQ,MAAM;AAAA,MACrB,UAAU;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA,IAIA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,eAAe;AAAA,MACb,MAAM;AAAA,MACN,SAAS,OAAO,CAAC;AAAA,IACnB;AAAA;AAAA;AAAA;AAAA,IAIA,OAAO;AAAA,MACL,MAAM,CAAC,QAAQ,OAAO,MAAM;AAAA,MAC5B,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACE,MAAM,MAAM,SAAS;AAEvB,QAAI,QAAa;AAEjB,UAAM,QAAQ;AAEd,UAAM,MAAM,SAAS,MAAM,KAAK,MAAM,KAAK,CAAC;AAE5C,UAAM,EAAE,MAAM,SAAS,MAAM,KAC1B,CAAC,QAAO,SAAS,IAAI,kBAAkB,YAAY,aAAa,IAAI,OAAO,YAAY;AACxF,UAAI,OAAO,MAAM,UAAU,UAAU;AACnC,eAAO,MAAM;AAAA,MACf;AACA,aAAO,MAAM,cAAc,MAAM,OAAO,MAAM,aAAa;AAAA,IAC7D,CAAC,CAAC,GACA,SAAS,MAAM,QACf,UAAU,GACV;AAGF,UAAM,OAAO,SAAS,MAAM,MAAM,UAAU,KAAK,OAAO,UAAU,KAAK,OAAO,IAAI;AAElF,UAAM,MAAM,MAAM,OAAO,MAAM;AAC7B,cAAQ;AAAA,IACV,CAAC;AAED,WAAO,CAAC,MAAU,WAAgB;AAChC,YAAM,yBAAyB,kBAAkB,aAAa;AAE9D,aAAO,YAAY,KAAK,QAAQ,WAAW;AAAA,QACzC,MAAM,OAAO,IAAI,GAAG;AAAA,QACpB,MAAM,OAAO,IAAI,GAAG;AAAA,QACpB,KAAK,OAAO,IAAI,GAAG;AAAA,QACnB,SAAS,OAAO,IAAI,GAAG;AAAA,QACvB,OAAO,OAAO,KAAK;AAAA,MACrB,GAAG,MAAM;AAAA,QACN,KAAK,SACD,WAAW,GAAG,aAAa,wBAAwB;AAAA,UAClD,KAAK;AAAA,UACL,KAAK,QAAQ;AAAA,UACb,OAAO,gBAAgB,MAAM,KAAK;AAAA,UAClC,MAAM,KAAK;AAAA,UACX,MAAM,OAAO,IAAI,GAAG;AAAA,QACtB,GAAG,MAAM,GAAG,CAAC,OAAO,SAAS,QAAQ,MAAM,CAAC,KAC5C,oBAAoB,IAAI,IAAI;AAAA,MAClC,CAAC;AAAA,IACH;AAAA,EACA;AAEA,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127360,
      "end": 1712268127360,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "result": "import { withAsyncContext as _withAsyncContext, defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useAsyncData } from \"nuxt/app\";\nimport { parseMarkdown } from \"../parser\";\nimport { watch, computed } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"MDC\",\n  props: {\n    tag: {\n      type: [String, Boolean],\n      default: \"div\"\n    },\n    /**\n     * Raw markdown string or parsed markdown object from `parseMarkdown`\n     */\n    value: {\n      type: [String, Object],\n      required: true\n    },\n    /**\n     * Render only the excerpt\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Options for `parseMarkdown`\n     */\n    parserOptions: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Class to be applied to the root element\n     */\n    class: {\n      type: [String, Array, Object],\n      default: \"\"\n    }\n  },\n  async setup(__props) {\n    let __temp, __restore;\n    const props = __props;\n    const key = computed(() => hash(props.value));\n    const { data, refresh, error } = ([__temp, __restore] = _withAsyncContext(async () => useAsyncData(key.value, async () => {\n      if (typeof props.value !== \"string\") {\n        return props.value;\n      }\n      return await parseMarkdown(props.value, props.parserOptions);\n    }, '$c2vlHSrNA1')), __temp = await __temp, __restore(), __temp);\n    const body = computed(() => props.excerpt ? data.value?.excerpt : data.value?.body);\n    watch(() => props.value, () => {\n      refresh();\n    });\n    return (_ctx, _cache) => {\n      const _component_MDCRenderer = _resolveComponent(\"MDCRenderer\");\n      return _renderSlot(_ctx.$slots, \"default\", {\n        data: _unref(data)?.data,\n        body: _unref(data)?.body,\n        toc: _unref(data)?.toc,\n        excerpt: _unref(data)?.excerpt,\n        error: _unref(error)\n      }, () => [\n        body.value ? (_openBlock(), _createBlock(_component_MDCRenderer, {\n          key: 0,\n          tag: __props.tag,\n          class: _normalizeClass(props.class),\n          body: body.value,\n          data: _unref(data)?.data\n        }, null, 8, [\"tag\", \"class\", \"body\", \"data\"])) : _createCommentVNode(\"\", true)\n      ]);\n    };\n  }\n});\n",
      "start": 1712268127360,
      "end": 1712268127361,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlnE,CAAC,CAAC,CAAC,CAAC,gBAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjlC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"/Users/rezajafar/peakofeloquence-site/node_modules/@nuxtjs/mdc/dist/runtime/components/MDCRenderer\";\nimport { withAsyncContext as _withAsyncContext, defineComponent as _defineComponent } from \"vue\";\nimport { unref as _unref, renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useAsyncData } from \"nuxt/app\";\nimport { parseMarkdown } from \"../parser\";\nimport { watch, computed } from \"vue\";\nexport default /* @__PURE__ */ _defineComponent({\n  __name: \"MDC\",\n  props: {\n    tag: {\n      type: [String, Boolean],\n      default: \"div\"\n    },\n    /**\n     * Raw markdown string or parsed markdown object from `parseMarkdown`\n     */\n    value: {\n      type: [String, Object],\n      required: true\n    },\n    /**\n     * Render only the excerpt\n     */\n    excerpt: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Options for `parseMarkdown`\n     */\n    parserOptions: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * Class to be applied to the root element\n     */\n    class: {\n      type: [String, Array, Object],\n      default: \"\"\n    }\n  },\n  async setup(__props) {\n    let __temp, __restore;\n    const props = __props;\n    const key = computed(() => hash(props.value));\n    const { data, refresh, error } = ([__temp, __restore] = _withAsyncContext(async () => useAsyncData(key.value, async () => {\n      if (typeof props.value !== \"string\") {\n        return props.value;\n      }\n      return await parseMarkdown(props.value, props.parserOptions);\n    }, '$c2vlHSrNA1')), __temp = await __temp, __restore(), __temp);\n    const body = computed(() => props.excerpt ? data.value?.excerpt : data.value?.body);\n    watch(() => props.value, () => {\n      refresh();\n    });\n    return (_ctx, _cache) => {\n      const _component_MDCRenderer = __nuxt_component_0;\n      return _renderSlot(_ctx.$slots, \"default\", {\n        data: _unref(data)?.data,\n        body: _unref(data)?.body,\n        toc: _unref(data)?.toc,\n        excerpt: _unref(data)?.excerpt,\n        error: _unref(error)\n      }, () => [\n        body.value ? (_openBlock(), _createBlock(_component_MDCRenderer, {\n          key: 0,\n          tag: __props.tag,\n          class: _normalizeClass(props.class),\n          body: body.value,\n          data: _unref(data)?.data\n        }, null, 8, [\"tag\", \"class\", \"body\", \"data\"])) : _createCommentVNode(\"\", true)\n      ]);\n    };\n  }\n});\n",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127361,
      "end": 1712268127361,
      "order": "normal"
    }
  ]
}
