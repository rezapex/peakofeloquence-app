{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/code-indented.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n",
      "start": 1712268127561,
      "end": 1712268127595,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127595,
      "end": 1712268127595,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127595,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127596,
      "end": 1712268127596,
      "order": "normal"
    }
  ]
}
