{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/@ungap/structured-clone/esm/deserialize.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n",
      "start": 1712268127732,
      "end": 1712268127760,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127760,
      "end": 1712268127760,
      "order": "normal"
    }
  ]
}
