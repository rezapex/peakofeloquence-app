{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/autolink.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n",
      "start": 1712268127555,
      "end": 1712268127582,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127582,
      "end": 1712268127582,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127582,
      "end": 1712268127582,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127582,
      "end": 1712268127582,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127582,
      "end": 1712268127582,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127582,
      "end": 1712268127582,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127583,
      "end": 1712268127583,
      "order": "normal"
    }
  ]
}
