{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/hast-util-parse-selector/lib/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n",
      "start": 1712268127966,
      "end": 1712268127968,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127968,
      "end": 1712268127968,
      "order": "normal"
    }
  ]
}
