{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-core-commonmark/lib/block-quote.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n",
      "start": 1712268127558,
      "end": 1712268127587,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127587,
      "end": 1712268127587,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127587,
      "end": 1712268127588,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127588,
      "end": 1712268127588,
      "order": "normal"
    }
  ]
}
