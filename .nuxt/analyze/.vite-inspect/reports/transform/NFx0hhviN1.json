{
  "resolvedId": "/Users/rezajafar/peakofeloquence-site/node_modules/micromark-extension-gfm-table/lib/html.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @typedef {import('./infer.js').Align} Align\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n\n// To do: micromark@5: use `infer` here, when all events are exposed.\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub tables when serializing to HTML.\n */\nexport function gfmTableHtml() {\n  return {\n    enter: {\n      table(token) {\n        const tableAlign = token._align\n        this.lineEndingIfNeeded()\n        this.tag('<table>')\n        this.setData('tableAlign', tableAlign)\n      },\n      tableBody() {\n        this.tag('<tbody>')\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign')\n        const tableColumn = this.getData('tableColumn')\n        const align = alignment[tableAlign[tableColumn]]\n        if (align === undefined) {\n          // Capture results to ignore them.\n          this.buffer()\n        } else {\n          this.lineEndingIfNeeded()\n          this.tag('<td' + align + '>')\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded()\n        this.tag('<thead>')\n      },\n      tableHeader() {\n        const tableAlign = this.getData('tableAlign')\n        const tableColumn = this.getData('tableColumn')\n        const align = alignment[tableAlign[tableColumn]]\n        this.lineEndingIfNeeded()\n        this.tag('<th' + align + '>')\n      },\n      tableRow() {\n        this.setData('tableColumn', 0)\n        this.lineEndingIfNeeded()\n        this.tag('<tr>')\n      }\n    },\n    exit: {\n      // Overwrite the default code text data handler to unescape escaped pipes when\n      // they are in tables.\n      codeTextData(token) {\n        let value = this.sliceSerialize(token)\n        if (this.getData('tableAlign')) {\n          value = value.replace(/\\\\([\\\\|])/g, replace)\n        }\n        this.raw(this.encode(value))\n      },\n      table() {\n        this.setData('tableAlign')\n        // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n        // but we do need to reset it to match a funky newline GH generates for\n        // list items combined with tables.\n        this.setData('slurpAllLineEndings')\n        this.lineEndingIfNeeded()\n        this.tag('</table>')\n      },\n      tableBody() {\n        this.lineEndingIfNeeded()\n        this.tag('</tbody>')\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign')\n        const tableColumn = this.getData('tableColumn')\n        if (tableColumn in tableAlign) {\n          this.tag('</td>')\n          this.setData('tableColumn', tableColumn + 1)\n        } else {\n          // Stop capturing.\n          this.resume()\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded()\n        this.tag('</thead>')\n      },\n      tableHeader() {\n        const tableColumn = this.getData('tableColumn')\n        this.tag('</th>')\n        this.setData('tableColumn', tableColumn + 1)\n      },\n      tableRow() {\n        const tableAlign = this.getData('tableAlign')\n        let tableColumn = this.getData('tableColumn')\n        while (tableColumn < tableAlign.length) {\n          this.lineEndingIfNeeded()\n          this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n          tableColumn++\n        }\n        this.setData('tableColumn', tableColumn)\n        this.lineEndingIfNeeded()\n        this.tag('</tr>')\n      }\n    }\n  }\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n",
      "start": 1712268127820,
      "end": 1712268127833,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712268127833,
      "end": 1712268127833,
      "order": "normal"
    }
  ]
}
