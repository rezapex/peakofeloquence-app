{
  "resolvedId": "/Users/rezajafar/peakofeloquence-app/node_modules/@nuxt/ui/dist/runtime/utils/index.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defu, createDefu } from \"defu\";\nimport { extendTailwindMerge } from \"tailwind-merge\";\nconst customTwMerge = extendTailwindMerge({\n  extend: {\n    classGroups: {\n      icons: [(classPart) => /^i-/.test(classPart)]\n    }\n  }\n});\nconst defuTwMerge = createDefu((obj, key, value, namespace) => {\n  if (namespace === \"default\" || namespace.startsWith(\"default.\")) {\n    return false;\n  }\n  if (namespace === \"popper\" || namespace.startsWith(\"popper.\")) {\n    return false;\n  }\n  if (namespace.endsWith(\"avatar\") && key === \"size\") {\n    return false;\n  }\n  if (namespace.endsWith(\"chip\") && key === \"size\") {\n    return false;\n  }\n  if (namespace.endsWith(\"badge\") && key === \"size\" || key === \"color\" || key === \"variant\") {\n    return false;\n  }\n  if (typeof obj[key] === \"string\" && typeof value === \"string\" && obj[key] && value) {\n    obj[key] = customTwMerge(obj[key], value);\n    return true;\n  }\n});\nexport function mergeConfig(strategy, ...configs) {\n  if (strategy === \"override\") {\n    return defu({}, ...configs);\n  }\n  return defuTwMerge({}, ...configs);\n}\nexport function hexToRgb(hex) {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function(_, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? `${parseInt(result[1], 16)} ${parseInt(result[2], 16)} ${parseInt(result[3], 16)}` : null;\n}\nexport function getSlotsChildren(slots) {\n  let children = slots.default?.();\n  if (children?.length) {\n    children = children.flatMap((c) => {\n      if (typeof c.type === \"symbol\") {\n        if (typeof c.children === \"string\") {\n          return;\n        }\n        return c.children;\n      } else if (c.type.name === \"ContentSlot\") {\n        return c.ctx.slots.default?.();\n      }\n      return c;\n    }).filter(Boolean);\n  }\n  return children || [];\n}\nexport function looseToNumber(val) {\n  const n = parseFloat(val);\n  return isNaN(n) ? val : n;\n}\nexport * from \"./lodash.mjs\";\nexport * from \"./link.mjs\";\n",
      "start": 1714172188441,
      "end": 1714172188485,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "result": "import { defu, createDefu } from \"defu\";\nimport { extendTailwindMerge } from \"tailwind-merge\";\nconst customTwMerge = extendTailwindMerge({\n  extend: {\n    classGroups: {\n      icons: [(classPart) => /^i-/.test(classPart)]\n    }\n  }\n});\nconst defuTwMerge = createDefu((obj, key, value, namespace) => {\n  if (namespace === \"default\" || namespace.startsWith(\"default.\")) {\n    return false;\n  }\n  if (namespace === \"popper\" || namespace.startsWith(\"popper.\")) {\n    return false;\n  }\n  if (namespace.endsWith(\"avatar\") && key === \"size\") {\n    return false;\n  }\n  if (namespace.endsWith(\"chip\") && key === \"size\") {\n    return false;\n  }\n  if (namespace.endsWith(\"badge\") && key === \"size\" || key === \"color\" || key === \"variant\") {\n    return false;\n  }\n  if (typeof obj[key] === \"string\" && typeof value === \"string\" && obj[key] && value) {\n    obj[key] = customTwMerge(obj[key], value);\n    return true;\n  }\n});\nexport function mergeConfig(strategy, ...configs) {\n  if (strategy === \"override\") {\n    return defu({}, ...configs);\n  }\n  return defuTwMerge({}, ...configs);\n}\nexport function hexToRgb(hex) {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function(_, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? `${parseInt(result[1], 16)} ${parseInt(result[2], 16)} ${parseInt(result[3], 16)}` : null;\n}\nexport function getSlotsChildren(slots) {\n  let children = slots.default?.();\n  if (children?.length) {\n    children = children.flatMap((c) => {\n      if (typeof c.type === \"symbol\") {\n        if (typeof c.children === \"string\") {\n          return;\n        }\n        return c.children;\n      } else if (c.type.name === \"MDCSlot\") {\n        return c.ctx.slots.default?.();\n      }\n      return c;\n    }).filter(Boolean);\n  }\n  return children || [];\n}\nexport function looseToNumber(val) {\n  const n = parseFloat(val);\n  return isNaN(n) ? val : n;\n}\nexport * from \"./lodash.mjs\";\nexport * from \"./link.mjs\";\n",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "content-slot",
      "result": "import { defu, createDefu } from \"defu\";\nimport { extendTailwindMerge } from \"tailwind-merge\";\nconst customTwMerge = extendTailwindMerge({\n  extend: {\n    classGroups: {\n      icons: [(classPart) => /^i-/.test(classPart)]\n    }\n  }\n});\nconst defuTwMerge = createDefu((obj, key, value, namespace) => {\n  if (namespace === \"default\" || namespace.startsWith(\"default.\")) {\n    return false;\n  }\n  if (namespace === \"popper\" || namespace.startsWith(\"popper.\")) {\n    return false;\n  }\n  if (namespace.endsWith(\"avatar\") && key === \"size\") {\n    return false;\n  }\n  if (namespace.endsWith(\"chip\") && key === \"size\") {\n    return false;\n  }\n  if (namespace.endsWith(\"badge\") && key === \"size\" || key === \"color\" || key === \"variant\") {\n    return false;\n  }\n  if (typeof obj[key] === \"string\" && typeof value === \"string\" && obj[key] && value) {\n    obj[key] = customTwMerge(obj[key], value);\n    return true;\n  }\n});\nexport function mergeConfig(strategy, ...configs) {\n  if (strategy === \"override\") {\n    return defu({}, ...configs);\n  }\n  return defuTwMerge({}, ...configs);\n}\nexport function hexToRgb(hex) {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function(_, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? `${parseInt(result[1], 16)} ${parseInt(result[2], 16)} ${parseInt(result[3], 16)}` : null;\n}\nexport function getSlotsChildren(slots) {\n  let children = slots.default?.();\n  if (children?.length) {\n    children = children.flatMap((c) => {\n      if (typeof c.type === \"symbol\") {\n        if (typeof c.children === \"string\") {\n          return;\n        }\n        return c.children;\n      } else if (c.type.name === \"MDCSlot\") {\n        return c.ctx.slots.default?.();\n      }\n      return c;\n    }).filter(Boolean);\n  }\n  return children || [];\n}\nexport function looseToNumber(val) {\n  const n = parseFloat(val);\n  return isNaN(n) ? val : n;\n}\nexport * from \"./lodash.mjs\";\nexport * from \"./link.mjs\";\n",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1714172188485,
      "end": 1714172188485,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "nuxt:fonts:font-family-injection",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1714172188486,
      "end": 1714172188486,
      "order": "normal"
    }
  ]
}
