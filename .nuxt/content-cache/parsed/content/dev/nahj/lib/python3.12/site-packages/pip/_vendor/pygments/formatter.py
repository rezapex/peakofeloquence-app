{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:formatter.py","body":"\"\"\"\n    pygments.formatter\n    ~~~~~~~~~~~~~~~~~~\n\n    Base formatter class.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport codecs\n\nfrom pip._vendor.pygments.util import get_bool_opt\nfrom pip._vendor.pygments.styles import get_style_by_name\n\n__all__ = ['Formatter']\n\n\ndef _lookup_style(style):\n    if isinstance(style, str):\n        return get_style_by_name(style)\n    return style\n\n\nclass Formatter:\n    \"\"\"\n    Converts a token stream to text.\n\n    Formatters should have attributes to help selecting them. These\n    are similar to the corresponding :class:`~pygments.lexer.Lexer`\n    attributes.\n\n    .. autoattribute:: name\n       :no-value:\n\n    .. autoattribute:: aliases\n       :no-value:\n\n    .. autoattribute:: filenames\n       :no-value:\n\n    You can pass options as keyword arguments to the constructor.\n    All formatters accept these basic options:\n\n    ``style``\n        The style to use, can be a string or a Style subclass\n        (default: \"default\"). Not used by e.g. the\n        TerminalFormatter.\n    ``full``\n        Tells the formatter to output a \"full\" document, i.e.\n        a complete self-contained document. This doesn't have\n        any effect for some formatters (default: false).\n    ``title``\n        If ``full`` is true, the title that should be used to\n        caption the document (default: '').\n    ``encoding``\n        If given, must be an encoding name. This will be used to\n        convert the Unicode token strings to byte strings in the\n        output. If it is \"\" or None, Unicode strings will be written\n        to the output file, which most file-like objects do not\n        support (default: None).\n    ``outencoding``\n        Overrides ``encoding`` if given.\n\n    \"\"\"\n\n    #: Full name for the formatter, in human-readable form.\n    name = None\n\n    #: A list of short, unique identifiers that can be used to lookup\n    #: the formatter from a list, e.g. using :func:`.get_formatter_by_name()`.\n    aliases = []\n\n    #: A list of fnmatch patterns that match filenames for which this\n    #: formatter can produce output. The patterns in this list should be unique\n    #: among all formatters.\n    filenames = []\n\n    #: If True, this formatter outputs Unicode strings when no encoding\n    #: option is given.\n    unicodeoutput = True\n\n    def __init__(self, **options):\n        \"\"\"\n        As with lexers, this constructor takes arbitrary optional arguments,\n        and if you override it, you should first process your own options, then\n        call the base class implementation.\n        \"\"\"\n        self.style = _lookup_style(options.get('style', 'default'))\n        self.full = get_bool_opt(options, 'full', False)\n        self.title = options.get('title', '')\n        self.encoding = options.get('encoding', None) or None\n        if self.encoding in ('guess', 'chardet'):\n            # can happen for e.g. pygmentize -O encoding=guess\n            self.encoding = 'utf-8'\n        self.encoding = options.get('outencoding') or self.encoding\n        self.options = options\n\n    def get_style_defs(self, arg=''):\n        \"\"\"\n        This method must return statements or declarations suitable to define\n        the current style for subsequent highlighted text (e.g. CSS classes\n        in the `HTMLFormatter`).\n\n        The optional argument `arg` can be used to modify the generation and\n        is formatter dependent (it is standardized because it can be given on\n        the command line).\n\n        This method is called by the ``-S`` :doc:`command-line option <cmdline>`,\n        the `arg` is then given by the ``-a`` option.\n        \"\"\"\n        return ''\n\n    def format(self, tokensource, outfile):\n        \"\"\"\n        This method must format the tokens from the `tokensource` iterable and\n        write the formatted version to the file object `outfile`.\n\n        Formatter options can control how exactly the tokens are converted.\n        \"\"\"\n        if self.encoding:\n            # wrap the outfile in a StreamWriter\n            outfile = codecs.lookup(self.encoding)[3](outfile)\n        return self.format_unencoded(tokensource, outfile)\n"},"hash":"EEC5lkyukZ"}