{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:commands:check.py","body":"import logging\nfrom optparse import Values\nfrom typing import List\n\nfrom pip._internal.cli.base_command import Command\nfrom pip._internal.cli.status_codes import ERROR, SUCCESS\nfrom pip._internal.operations.check import (\n    check_package_set,\n    create_package_set_from_installed,\n    warn_legacy_versions_and_specifiers,\n)\nfrom pip._internal.utils.misc import write_output\n\nlogger = logging.getLogger(__name__)\n\n\nclass CheckCommand(Command):\n    \"\"\"Verify installed packages have compatible dependencies.\"\"\"\n\n    usage = \"\"\"\n      %prog [options]\"\"\"\n\n    def run(self, options: Values, args: List[str]) -> int:\n        package_set, parsing_probs = create_package_set_from_installed()\n        warn_legacy_versions_and_specifiers(package_set)\n        missing, conflicting = check_package_set(package_set)\n\n        for project_name in missing:\n            version = package_set[project_name].version\n            for dependency in missing[project_name]:\n                write_output(\n                    \"%s %s requires %s, which is not installed.\",\n                    project_name,\n                    version,\n                    dependency[0],\n                )\n\n        for project_name in conflicting:\n            version = package_set[project_name].version\n            for dep_name, dep_version, req in conflicting[project_name]:\n                write_output(\n                    \"%s %s has requirement %s, but you have %s %s.\",\n                    project_name,\n                    version,\n                    req,\n                    dep_name,\n                    dep_version,\n                )\n\n        if missing or conflicting or parsing_probs:\n            return ERROR\n        else:\n            write_output(\"No broken requirements found.\")\n            return SUCCESS\n"},"hash":"LgNG7eOZJj"}