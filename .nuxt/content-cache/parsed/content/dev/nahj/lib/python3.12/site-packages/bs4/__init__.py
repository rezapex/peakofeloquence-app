{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:bs4:__init__.py","body":"\"\"\"Beautiful Soup Elixir and Tonic - \"The Screen-Scraper's Friend\".\n\nhttp://www.crummy.com/software/BeautifulSoup/\n\nBeautiful Soup uses a pluggable XML or HTML parser to parse a\n(possibly invalid) document into a tree representation. Beautiful Soup\nprovides methods and Pythonic idioms that make it easy to navigate,\nsearch, and modify the parse tree.\n\nBeautiful Soup works with Python 3.6 and up. It works better if lxml\nand/or html5lib is installed.\n\nFor more than you ever wanted to know about Beautiful Soup, see the\ndocumentation: http://www.crummy.com/software/BeautifulSoup/bs4/doc/\n\"\"\"\n\n__author__ = \"Leonard Richardson (leonardr@segfault.org)\"\n__version__ = \"4.12.3\"\n__copyright__ = \"Copyright (c) 2004-2024 Leonard Richardson\"\n# Use of this source code is governed by the MIT license.\n__license__ = \"MIT\"\n\n__all__ = ['BeautifulSoup']\n\nfrom collections import Counter\nimport os\nimport re\nimport sys\nimport traceback\nimport warnings\n\n# The very first thing we do is give a useful error if someone is\n# running this code under Python 2.\nif sys.version_info.major < 3:\n    raise ImportError('You are trying to use a Python 3-specific version of Beautiful Soup under Python 2. This will not work. The final version of Beautiful Soup to support Python 2 was 4.9.3.')\n\nfrom .builder import (\n    builder_registry,\n    ParserRejectedMarkup,\n    XMLParsedAsHTMLWarning,\n    HTMLParserTreeBuilder\n)\nfrom .dammit import UnicodeDammit\nfrom .element import (\n    CData,\n    Comment,\n    CSS,\n    DEFAULT_OUTPUT_ENCODING,\n    Declaration,\n    Doctype,\n    NavigableString,\n    PageElement,\n    ProcessingInstruction,\n    PYTHON_SPECIFIC_ENCODINGS,\n    ResultSet,\n    Script,\n    Stylesheet,\n    SoupStrainer,\n    Tag,\n    TemplateString,\n    )\n\n# Define some custom warnings.\nclass GuessedAtParserWarning(UserWarning):\n    \"\"\"The warning issued when BeautifulSoup has to guess what parser to\n    use -- probably because no parser was specified in the constructor.\n    \"\"\"\n\nclass MarkupResemblesLocatorWarning(UserWarning):\n    \"\"\"The warning issued when BeautifulSoup is given 'markup' that\n    actually looks like a resource locator -- a URL or a path to a file\n    on disk.\n    \"\"\"\n\n   \nclass BeautifulSoup(Tag):\n    \"\"\"A data structure representing a parsed HTML or XML document.\n\n    Most of the methods you'll call on a BeautifulSoup object are inherited from\n    PageElement or Tag.\n\n    Internally, this class defines the basic interface called by the\n    tree builders when converting an HTML/XML document into a data\n    structure. The interface abstracts away the differences between\n    parsers. To write a new tree builder, you'll need to understand\n    these methods as a whole.\n\n    These methods will be called by the BeautifulSoup constructor:\n      * reset()\n      * feed(markup)\n\n    The tree builder may call these methods from its feed() implementation:\n      * handle_starttag(name, attrs) # See note about return value\n      * handle_endtag(name)\n      * handle_data(data) # Appends to the current data node\n      * endData(containerClass) # Ends the current data node\n\n    No matter how complicated the underlying parser is, you should be\n    able to build a tree using 'start tag' events, 'end tag' events,\n    'data' events, and \"done with data\" events.\n\n    If you encounter an empty-element tag (aka a self-closing tag,\n    like HTML's <br> tag), call handle_starttag and then\n    handle_endtag.\n    \"\"\"\n\n    # Since BeautifulSoup subclasses Tag, it's possible to treat it as\n    # a Tag with a .name. This name makes it clear the BeautifulSoup\n    # object isn't a real markup tag.\n    ROOT_TAG_NAME = '[document]'\n\n    # If the end-user gives no indication which tree builder they\n    # want, look for one with these features.\n    DEFAULT_BUILDER_FEATURES = ['html', 'fast']\n\n    # A string containing all ASCII whitespace characters, used in\n    # endData() to detect data chunks that seem 'empty'.\n    ASCII_SPACES = '\\x20\\x0a\\x09\\x0c\\x0d'\n\n    NO_PARSER_SPECIFIED_WARNING = \"No parser was explicitly specified, so I'm using the best available %(markup_type)s parser for this system (\\\"%(parser)s\\\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\\n\\nThe code that caused this warning is on line %(line_number)s of the file %(filename)s. To get rid of this warning, pass the additional argument 'features=\\\"%(parser)s\\\"' to the BeautifulSoup constructor.\\n\"\n   \n    def __init__(self, markup=\"\", features=None, builder=None,\n                 parse_only=None, from_encoding=None, exclude_encodings=None,\n                 element_classes=None, **kwargs):\n        \"\"\"Constructor.\n\n        :param markup: A string or a file-like object representing\n         markup to be parsed.\n\n        :param features: Desirable features of the parser to be\n         used. This may be the name of a specific parser (\"lxml\",\n         \"lxml-xml\", \"html.parser\", or \"html5lib\") or it may be the\n         type of markup to be used (\"html\", \"html5\", \"xml\"). It's\n         recommended that you name a specific parser, so that\n         Beautiful Soup gives you the same results across platforms\n         and virtual environments.\n\n        :param builder: A TreeBuilder subclass to instantiate (or\n         instance to use) instead of looking one up based on\n         `features`. You only need to use this if you've implemented a\n         custom TreeBuilder.\n\n        :param parse_only: A SoupStrainer. Only parts of the document\n         matching the SoupStrainer will be considered. This is useful\n         when parsing part of a document that would otherwise be too\n         large to fit into memory.\n\n        :param from_encoding: A string indicating the encoding of the\n         document to be parsed. Pass this in if Beautiful Soup is\n         guessing wrongly about the document's encoding.\n\n        :param exclude_encodings: A list of strings indicating\n         encodings known to be wrong. Pass this in if you don't know\n         the document's encoding but you know Beautiful Soup's guess is\n         wrong.\n\n        :param element_classes: A dictionary mapping BeautifulSoup\n         classes like Tag and NavigableString, to other classes you'd\n         like to be instantiated instead as the parse tree is\n         built. This is useful for subclassing Tag or NavigableString\n         to modify default behavior.\n\n        :param kwargs: For backwards compatibility purposes, the\n         constructor accepts certain keyword arguments used in\n         Beautiful Soup 3. None of these arguments do anything in\n         Beautiful Soup 4; they will result in a warning and then be\n         ignored.\n         \n         Apart from this, any keyword arguments passed into the\n         BeautifulSoup constructor are propagated to the TreeBuilder\n         constructor. This makes it possible to configure a\n         TreeBuilder by passing in arguments, not just by saying which\n         one to use.\n        \"\"\"\n        if 'convertEntities' in kwargs:\n            del kwargs['convertEntities']\n            warnings.warn(\n                \"BS4 does not respect the convertEntities argument to the \"\n                \"BeautifulSoup constructor. Entities are always converted \"\n                \"to Unicode characters.\")\n\n        if 'markupMassage' in kwargs:\n            del kwargs['markupMassage']\n            warnings.warn(\n                \"BS4 does not respect the markupMassage argument to the \"\n                \"BeautifulSoup constructor. The tree builder is responsible \"\n                \"for any necessary markup massage.\")\n\n        if 'smartQuotesTo' in kwargs:\n            del kwargs['smartQuotesTo']\n            warnings.warn(\n                \"BS4 does not respect the smartQuotesTo argument to the \"\n                \"BeautifulSoup constructor. Smart quotes are always converted \"\n                \"to Unicode characters.\")\n\n        if 'selfClosingTags' in kwargs:\n            del kwargs['selfClosingTags']\n            warnings.warn(\n                \"BS4 does not respect the selfClosingTags argument to the \"\n                \"BeautifulSoup constructor. The tree builder is responsible \"\n                \"for understanding self-closing tags.\")\n\n        if 'isHTML' in kwargs:\n            del kwargs['isHTML']\n            warnings.warn(\n                \"BS4 does not respect the isHTML argument to the \"\n                \"BeautifulSoup constructor. Suggest you use \"\n                \"features='lxml' for HTML and features='lxml-xml' for \"\n                \"XML.\")\n\n        def deprecated_argument(old_name, new_name):\n            if old_name in kwargs:\n                warnings.warn(\n                    'The \"%s\" argument to the BeautifulSoup constructor '\n                    'has been renamed to \"%s.\"' % (old_name, new_name),\n                    DeprecationWarning, stacklevel=3\n                )\n                return kwargs.pop(old_name)\n            return None\n\n        parse_only = parse_only or deprecated_argument(\n            \"parseOnlyThese\", \"parse_only\")\n\n        from_encoding = from_encoding or deprecated_argument(\n            \"fromEncoding\", \"from_encoding\")\n\n        if from_encoding and isinstance(markup, str):\n            warnings.warn(\"You provided Unicode markup but also provided a value for from_encoding. Your from_encoding will be ignored.\")\n            from_encoding = None\n\n        self.element_classes = element_classes or dict()\n\n        # We need this information to track whether or not the builder\n        # was specified well enough that we can omit the 'you need to\n        # specify a parser' warning.\n        original_builder = builder\n        original_features = features\n            \n        if isinstance(builder, type):\n            # A builder class was passed in; it needs to be instantiated.\n            builder_class = builder\n            builder = None\n        elif builder is None:\n            if isinstance(features, str):\n                features = [features]\n            if features is None or len(features) == 0:\n                features = self.DEFAULT_BUILDER_FEATURES\n            builder_class = builder_registry.lookup(*features)\n            if builder_class is None:\n                raise FeatureNotFound(\n                    \"Couldn't find a tree builder with the features you \"\n                    \"requested: %s. Do you need to install a parser library?\"\n                    % \",\".join(features))\n\n        # At this point either we have a TreeBuilder instance in\n        # builder, or we have a builder_class that we can instantiate\n        # with the remaining **kwargs.\n        if builder is None:\n            builder = builder_class(**kwargs)\n            if not original_builder and not (\n                    original_features == builder.NAME or\n                    original_features in builder.ALTERNATE_NAMES\n            ) and markup:\n                # The user did not tell us which TreeBuilder to use,\n                # and we had to guess. Issue a warning.\n                if builder.is_xml:\n                    markup_type = \"XML\"\n                else:\n                    markup_type = \"HTML\"\n\n                # This code adapted from warnings.py so that we get the same line\n                # of code as our warnings.warn() call gets, even if the answer is wrong\n                # (as it may be in a multithreading situation).\n                caller = None\n                try:\n                    caller = sys._getframe(1)\n                except ValueError:\n                    pass\n                if caller:\n                    globals = caller.f_globals\n                    line_number = caller.f_lineno\n                else:\n                    globals = sys.__dict__\n                    line_number= 1                    \n                filename = globals.get('__file__')\n                if filename:\n                    fnl = filename.lower()\n                    if fnl.endswith((\".pyc\", \".pyo\")):\n                        filename = filename[:-1]\n                if filename:\n                    # If there is no filename at all, the user is most likely in a REPL,\n                    # and the warning is not necessary.\n                    values = dict(\n                        filename=filename,\n                        line_number=line_number,\n                        parser=builder.NAME,\n                        markup_type=markup_type\n                    )\n                    warnings.warn(\n                        self.NO_PARSER_SPECIFIED_WARNING % values,\n                        GuessedAtParserWarning, stacklevel=2\n                    )\n        else:\n            if kwargs:\n                warnings.warn(\"Keyword arguments to the BeautifulSoup constructor will be ignored. These would normally be passed into the TreeBuilder constructor, but a TreeBuilder instance was passed in as `builder`.\")\n                    \n        self.builder = builder\n        self.is_xml = builder.is_xml\n        self.known_xml = self.is_xml\n        self._namespaces = dict()\n        self.parse_only = parse_only\n\n        if hasattr(markup, 'read'):        # It's a file-type object.\n            markup = markup.read()\n        elif len(markup) <= 256 and (\n                (isinstance(markup, bytes) and not b'<' in markup)\n                or (isinstance(markup, str) and not '<' in markup)\n        ):\n            # Issue warnings for a couple beginner problems\n            # involving passing non-markup to Beautiful Soup.\n            # Beautiful Soup will still parse the input as markup,\n            # since that is sometimes the intended behavior.\n            if not self._markup_is_url(markup):\n                self._markup_resembles_filename(markup)                \n\n        rejections = []\n        success = False\n        for (self.markup, self.original_encoding, self.declared_html_encoding,\n         self.contains_replacement_characters) in (\n             self.builder.prepare_markup(\n                 markup, from_encoding, exclude_encodings=exclude_encodings)):\n            self.reset()\n            self.builder.initialize_soup(self)\n            try:\n                self._feed()\n                success = True\n                break\n            except ParserRejectedMarkup as e:\n                rejections.append(e)\n                pass\n\n        if not success:\n            other_exceptions = [str(e) for e in rejections]\n            raise ParserRejectedMarkup(\n                \"The markup you provided was rejected by the parser. Trying a different parser or a different encoding may help.\\n\\nOriginal exception(s) from parser:\\n \" + \"\\n \".join(other_exceptions)\n            )\n\n        # Clear out the markup and remove the builder's circular\n        # reference to this object.\n        self.markup = None\n        self.builder.soup = None\n\n    def _clone(self):\n        \"\"\"Create a new BeautifulSoup object with the same TreeBuilder,\n        but not associated with any markup.\n\n        This is the first step of the deepcopy process.\n        \"\"\"\n        clone = type(self)(\"\", None, self.builder)\n\n        # Keep track of the encoding of the original document,\n        # since we won't be parsing it again.\n        clone.original_encoding = self.original_encoding\n        return clone\n        \n    def __getstate__(self):\n        # Frequently a tree builder can't be pickled.\n        d = dict(self.__dict__)\n        if 'builder' in d and d['builder'] is not None and not self.builder.picklable:\n            d['builder'] = type(self.builder)\n        # Store the contents as a Unicode string.\n        d['contents'] = []\n        d['markup'] = self.decode()\n\n        # If _most_recent_element is present, it's a Tag object left\n        # over from initial parse. It might not be picklable and we\n        # don't need it.\n        if '_most_recent_element' in d:\n            del d['_most_recent_element']\n        return d\n\n    def __setstate__(self, state):\n        # If necessary, restore the TreeBuilder by looking it up.\n        self.__dict__ = state\n        if isinstance(self.builder, type):\n            self.builder = self.builder()\n        elif not self.builder:\n            # We don't know which builder was used to build this\n            # parse tree, so use a default we know is always available.\n            self.builder = HTMLParserTreeBuilder()\n        self.builder.soup = self\n        self.reset()\n        self._feed()\n        return state\n\n    \n    @classmethod\n    def _decode_markup(cls, markup):\n        \"\"\"Ensure `markup` is bytes so it's safe to send into warnings.warn.\n\n        TODO: warnings.warn had this problem back in 2010 but it might not\n        anymore.\n        \"\"\"\n        if isinstance(markup, bytes):\n            decoded = markup.decode('utf-8', 'replace')\n        else:\n            decoded = markup\n        return decoded\n\n    @classmethod\n    def _markup_is_url(cls, markup):\n        \"\"\"Error-handling method to raise a warning if incoming markup looks\n        like a URL.\n\n        :param markup: A string.\n        :return: Whether or not the markup resembles a URL\n            closely enough to justify a warning.\n        \"\"\"\n        if isinstance(markup, bytes):\n            space = b' '\n            cant_start_with = (b\"http:\", b\"https:\")\n        elif isinstance(markup, str):\n            space = ' '\n            cant_start_with = (\"http:\", \"https:\")\n        else:\n            return False\n\n        if any(markup.startswith(prefix) for prefix in cant_start_with):\n            if not space in markup:\n                warnings.warn(\n                    'The input looks more like a URL than markup. You may want to use'\n                    ' an HTTP client like requests to get the document behind'\n                    ' the URL, and feed that document to Beautiful Soup.',\n                    MarkupResemblesLocatorWarning,\n                    stacklevel=3\n                )\n                return True\n        return False\n\n    @classmethod\n    def _markup_resembles_filename(cls, markup):\n        \"\"\"Error-handling method to raise a warning if incoming markup\n        resembles a filename.\n\n        :param markup: A bytestring or string.\n        :return: Whether or not the markup resembles a filename\n            closely enough to justify a warning.\n        \"\"\"\n        path_characters = '/\\\\'\n        extensions = ['.html', '.htm', '.xml', '.xhtml', '.txt']\n        if isinstance(markup, bytes):\n            path_characters = path_characters.encode(\"utf8\")\n            extensions = [x.encode('utf8') for x in extensions]\n        filelike = False\n        if any(x in markup for x in path_characters):\n            filelike = True\n        else:\n            lower = markup.lower()\n            if any(lower.endswith(ext) for ext in extensions):\n                filelike = True\n        if filelike:\n            warnings.warn(\n                'The input looks more like a filename than markup. You may'\n                ' want to open this file and pass the filehandle into'\n                ' Beautiful Soup.',\n                MarkupResemblesLocatorWarning, stacklevel=3\n            )\n            return True\n        return False\n    \n    def _feed(self):\n        \"\"\"Internal method that parses previously set markup, creating a large\n        number of Tag and NavigableString objects.\n        \"\"\"\n        # Convert the document to Unicode.\n        self.builder.reset()\n\n        self.builder.feed(self.markup)\n        # Close out any unfinished strings and close all the open tags.\n        self.endData()\n        while self.currentTag.name != self.ROOT_TAG_NAME:\n            self.popTag()\n\n    def reset(self):\n        \"\"\"Reset this object to a state as though it had never parsed any\n        markup.\n        \"\"\"\n        Tag.__init__(self, self, self.builder, self.ROOT_TAG_NAME)\n        self.hidden = 1\n        self.builder.reset()\n        self.current_data = []\n        self.currentTag = None\n        self.tagStack = []\n        self.open_tag_counter = Counter()\n        self.preserve_whitespace_tag_stack = []\n        self.string_container_stack = []\n        self._most_recent_element = None\n        self.pushTag(self)\n\n    def new_tag(self, name, namespace=None, nsprefix=None, attrs={},\n                sourceline=None, sourcepos=None, **kwattrs):\n        \"\"\"Create a new Tag associated with this BeautifulSoup object.\n\n        :param name: The name of the new Tag.\n        :param namespace: The URI of the new Tag's XML namespace, if any.\n        :param prefix: The prefix for the new Tag's XML namespace, if any.\n        :param attrs: A dictionary of this Tag's attribute values; can\n            be used instead of `kwattrs` for attributes like 'class'\n            that are reserved words in Python.\n        :param sourceline: The line number where this tag was\n            (purportedly) found in its source document.\n        :param sourcepos: The character position within `sourceline` where this\n            tag was (purportedly) found.\n        :param kwattrs: Keyword arguments for the new Tag's attribute values.\n\n        \"\"\"\n        kwattrs.update(attrs)\n        return self.element_classes.get(Tag, Tag)(\n            None, self.builder, name, namespace, nsprefix, kwattrs,\n            sourceline=sourceline, sourcepos=sourcepos\n        )\n\n    def string_container(self, base_class=None):\n        container = base_class or NavigableString\n        \n        # There may be a general override of NavigableString.\n        container = self.element_classes.get(\n            container, container\n        )\n\n        # On top of that, we may be inside a tag that needs a special\n        # container class.\n        if self.string_container_stack and container is NavigableString:\n            container = self.builder.string_containers.get(\n                self.string_container_stack[-1].name, container\n            )\n        return container\n        \n    def new_string(self, s, subclass=None):\n        \"\"\"Create a new NavigableString associated with this BeautifulSoup\n        object.\n        \"\"\"\n        container = self.string_container(subclass)\n        return container(s)\n\n    def insert_before(self, *args):\n        \"\"\"This method is part of the PageElement API, but `BeautifulSoup` doesn't implement\n        it because there is nothing before or after it in the parse tree.\n        \"\"\"\n        raise NotImplementedError(\"BeautifulSoup objects don't support insert_before().\")\n\n    def insert_after(self, *args):\n        \"\"\"This method is part of the PageElement API, but `BeautifulSoup` doesn't implement\n        it because there is nothing before or after it in the parse tree.\n        \"\"\"\n        raise NotImplementedError(\"BeautifulSoup objects don't support insert_after().\")\n\n    def popTag(self):\n        \"\"\"Internal method called by _popToTag when a tag is closed.\"\"\"\n        tag = self.tagStack.pop()\n        if tag.name in self.open_tag_counter:\n            self.open_tag_counter[tag.name] -= 1\n        if self.preserve_whitespace_tag_stack and tag == self.preserve_whitespace_tag_stack[-1]:\n            self.preserve_whitespace_tag_stack.pop()\n        if self.string_container_stack and tag == self.string_container_stack[-1]:\n            self.string_container_stack.pop()\n        #print(\"Pop\", tag.name)\n        if self.tagStack:\n            self.currentTag = self.tagStack[-1]\n        return self.currentTag\n\n    def pushTag(self, tag):\n        \"\"\"Internal method called by handle_starttag when a tag is opened.\"\"\"\n        #print(\"Push\", tag.name)\n        if self.currentTag is not None:\n            self.currentTag.contents.append(tag)\n        self.tagStack.append(tag)\n        self.currentTag = self.tagStack[-1]\n        if tag.name != self.ROOT_TAG_NAME:\n            self.open_tag_counter[tag.name] += 1\n        if tag.name in self.builder.preserve_whitespace_tags:\n            self.preserve_whitespace_tag_stack.append(tag)\n        if tag.name in self.builder.string_containers:\n            self.string_container_stack.append(tag)\n\n    def endData(self, containerClass=None):\n        \"\"\"Method called by the TreeBuilder when the end of a data segment\n        occurs.\n        \"\"\"       \n        if self.current_data:\n            current_data = ''.join(self.current_data)\n            # If whitespace is not preserved, and this string contains\n            # nothing but ASCII spaces, replace it with a single space\n            # or newline.\n            if not self.preserve_whitespace_tag_stack:\n                strippable = True\n                for i in current_data:\n                    if i not in self.ASCII_SPACES:\n                        strippable = False\n                        break\n                if strippable:\n                    if '\\n' in current_data:\n                        current_data = '\\n'\n                    else:\n                        current_data = ' '\n\n            # Reset the data collector.\n            self.current_data = []\n\n            # Should we add this string to the tree at all?\n            if self.parse_only and len(self.tagStack) <= 1 and \\\n                   (not self.parse_only.text or \\\n                    not self.parse_only.search(current_data)):\n                return\n\n            containerClass = self.string_container(containerClass)\n            o = containerClass(current_data)\n            self.object_was_parsed(o)\n\n    def object_was_parsed(self, o, parent=None, most_recent_element=None):\n        \"\"\"Method called by the TreeBuilder to integrate an object into the parse tree.\"\"\"\n        if parent is None:\n            parent = self.currentTag\n        if most_recent_element is not None:\n            previous_element = most_recent_element\n        else:\n            previous_element = self._most_recent_element\n\n        next_element = previous_sibling = next_sibling = None\n        if isinstance(o, Tag):\n            next_element = o.next_element\n            next_sibling = o.next_sibling\n            previous_sibling = o.previous_sibling\n            if previous_element is None:\n                previous_element = o.previous_element\n\n        fix = parent.next_element is not None\n\n        o.setup(parent, previous_element, next_element, previous_sibling, next_sibling)\n\n        self._most_recent_element = o\n        parent.contents.append(o)\n\n        # Check if we are inserting into an already parsed node.\n        if fix:\n            self._linkage_fixer(parent)\n\n    def _linkage_fixer(self, el):\n        \"\"\"Make sure linkage of this fragment is sound.\"\"\"\n\n        first = el.contents[0]\n        child = el.contents[-1]\n        descendant = child\n\n        if child is first and el.parent is not None:\n            # Parent should be linked to first child\n            el.next_element = child\n            # We are no longer linked to whatever this element is\n            prev_el = child.previous_element\n            if prev_el is not None and prev_el is not el:\n                prev_el.next_element = None\n            # First child should be linked to the parent, and no previous siblings.\n            child.previous_element = el\n            child.previous_sibling = None\n\n        # We have no sibling as we've been appended as the last.\n        child.next_sibling = None\n\n        # This index is a tag, dig deeper for a \"last descendant\"\n        if isinstance(child, Tag) and child.contents:\n            descendant = child._last_descendant(False)\n\n        # As the final step, link last descendant. It should be linked\n        # to the parent's next sibling (if found), else walk up the chain\n        # and find a parent with a sibling. It should have no next sibling.\n        descendant.next_element = None\n        descendant.next_sibling = None\n        target = el\n        while True:\n            if target is None:\n                break\n            elif target.next_sibling is not None:\n                descendant.next_element = target.next_sibling\n                target.next_sibling.previous_element = child\n                break\n            target = target.parent\n\n    def _popToTag(self, name, nsprefix=None, inclusivePop=True):\n        \"\"\"Pops the tag stack up to and including the most recent\n        instance of the given tag.\n\n        If there are no open tags with the given name, nothing will be\n        popped.\n\n        :param name: Pop up to the most recent tag with this name.\n        :param nsprefix: The namespace prefix that goes with `name`.\n        :param inclusivePop: It this is false, pops the tag stack up\n          to but *not* including the most recent instqance of the\n          given tag.\n\n        \"\"\"\n        #print(\"Popping to %s\" % name)\n        if name == self.ROOT_TAG_NAME:\n            # The BeautifulSoup object itself can never be popped.\n            return\n\n        most_recently_popped = None\n\n        stack_size = len(self.tagStack)\n        for i in range(stack_size - 1, 0, -1):\n            if not self.open_tag_counter.get(name):\n                break\n            t = self.tagStack[i]\n            if (name == t.name and nsprefix == t.prefix):\n                if inclusivePop:\n                    most_recently_popped = self.popTag()\n                break\n            most_recently_popped = self.popTag()\n\n        return most_recently_popped\n\n    def handle_starttag(self, name, namespace, nsprefix, attrs, sourceline=None,\n                        sourcepos=None, namespaces=None):\n        \"\"\"Called by the tree builder when a new tag is encountered.\n\n        :param name: Name of the tag.\n        :param nsprefix: Namespace prefix for the tag.\n        :param attrs: A dictionary of attribute values.\n        :param sourceline: The line number where this tag was found in its\n            source document.\n        :param sourcepos: The character position within `sourceline` where this\n            tag was found.\n        :param namespaces: A dictionary of all namespace prefix mappings \n            currently in scope in the document.\n\n        If this method returns None, the tag was rejected by an active\n        SoupStrainer. You should proceed as if the tag had not occurred\n        in the document. For instance, if this was a self-closing tag,\n        don't call handle_endtag.\n        \"\"\"\n        # print(\"Start tag %s: %s\" % (name, attrs))\n        self.endData()\n\n        if (self.parse_only and len(self.tagStack) <= 1\n            and (self.parse_only.text\n                 or not self.parse_only.search_tag(name, attrs))):\n            return None\n\n        tag = self.element_classes.get(Tag, Tag)(\n            self, self.builder, name, namespace, nsprefix, attrs,\n            self.currentTag, self._most_recent_element,\n            sourceline=sourceline, sourcepos=sourcepos,\n            namespaces=namespaces\n        )\n        if tag is None:\n            return tag\n        if self._most_recent_element is not None:\n            self._most_recent_element.next_element = tag\n        self._most_recent_element = tag\n        self.pushTag(tag)\n        return tag\n\n    def handle_endtag(self, name, nsprefix=None):\n        \"\"\"Called by the tree builder when an ending tag is encountered.\n\n        :param name: Name of the tag.\n        :param nsprefix: Namespace prefix for the tag.\n        \"\"\"\n        #print(\"End tag: \" + name)\n        self.endData()\n        self._popToTag(name, nsprefix)\n        \n    def handle_data(self, data):\n        \"\"\"Called by the tree builder when a chunk of textual data is encountered.\"\"\"\n        self.current_data.append(data)\n       \n    def decode(self, pretty_print=False,\n               eventual_encoding=DEFAULT_OUTPUT_ENCODING,\n               formatter=\"minimal\", iterator=None):\n        \"\"\"Returns a string or Unicode representation of the parse tree\n            as an HTML or XML document.\n\n        :param pretty_print: If this is True, indentation will be used to\n            make the document more readable.\n        :param eventual_encoding: The encoding of the final document.\n            If this is None, the document will be a Unicode string.\n        \"\"\"\n        if self.is_xml:\n            # Print the XML declaration\n            encoding_part = ''\n            if eventual_encoding in PYTHON_SPECIFIC_ENCODINGS:\n                # This is a special Python encoding; it can't actually\n                # go into an XML document because it means nothing\n                # outside of Python.\n                eventual_encoding = None\n            if eventual_encoding != None:\n                encoding_part = ' encoding=\"%s\"' % eventual_encoding\n            prefix = '<?xml version=\"1.0\"%s?>\\n' % encoding_part\n        else:\n            prefix = ''\n        if not pretty_print:\n            indent_level = None\n        else:\n            indent_level = 0\n        return prefix + super(BeautifulSoup, self).decode(\n            indent_level, eventual_encoding, formatter, iterator)\n\n# Aliases to make it easier to get started quickly, e.g. 'from bs4 import _soup'\n_s = BeautifulSoup\n_soup = BeautifulSoup\n\nclass BeautifulStoneSoup(BeautifulSoup):\n    \"\"\"Deprecated interface to an XML parser.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        kwargs['features'] = 'xml'\n        warnings.warn(\n            'The BeautifulStoneSoup class is deprecated. Instead of using '\n            'it, pass features=\"xml\" into the BeautifulSoup constructor.',\n            DeprecationWarning, stacklevel=2\n        )\n        super(BeautifulStoneSoup, self).__init__(*args, **kwargs)\n\n\nclass StopParsing(Exception):\n    \"\"\"Exception raised by a TreeBuilder if it's unable to continue parsing.\"\"\"\n    pass\n\nclass FeatureNotFound(ValueError):\n    \"\"\"Exception raised by the BeautifulSoup constructor if no parser with the\n    requested features is found.\n    \"\"\"\n    pass\n\n\n#If this file is run as a script, act as an HTML pretty-printer.\nif __name__ == '__main__':\n    import sys\n    soup = BeautifulSoup(sys.stdin)\n    print((soup.prettify()))\n"},"hash":"1vhMNB2SrI"}