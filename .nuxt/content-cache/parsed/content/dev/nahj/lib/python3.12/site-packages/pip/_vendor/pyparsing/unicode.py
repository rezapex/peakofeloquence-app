{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pyparsing:unicode.py","body":"# unicode.py\n\nimport sys\nfrom itertools import filterfalse\nfrom typing import List, Tuple, Union\n\n\nclass _lazyclassproperty:\n    def __init__(self, fn):\n        self.fn = fn\n        self.__doc__ = fn.__doc__\n        self.__name__ = fn.__name__\n\n    def __get__(self, obj, cls):\n        if cls is None:\n            cls = type(obj)\n        if not hasattr(cls, \"_intern\") or any(\n            cls._intern is getattr(superclass, \"_intern\", [])\n            for superclass in cls.__mro__[1:]\n        ):\n            cls._intern = {}\n        attrname = self.fn.__name__\n        if attrname not in cls._intern:\n            cls._intern[attrname] = self.fn(cls)\n        return cls._intern[attrname]\n\n\nUnicodeRangeList = List[Union[Tuple[int, int], Tuple[int]]]\n\n\nclass unicode_set:\n    \"\"\"\n    A set of Unicode characters, for language-specific strings for\n    ``alphas``, ``nums``, ``alphanums``, and ``printables``.\n    A unicode_set is defined by a list of ranges in the Unicode character\n    set, in a class attribute ``_ranges``. Ranges can be specified using\n    2-tuples or a 1-tuple, such as::\n\n        _ranges = [\n            (0x0020, 0x007e),\n            (0x00a0, 0x00ff),\n            (0x0100,),\n            ]\n\n    Ranges are left- and right-inclusive. A 1-tuple of (x,) is treated as (x, x).\n\n    A unicode set can also be defined using multiple inheritance of other unicode sets::\n\n        class CJK(Chinese, Japanese, Korean):\n            pass\n    \"\"\"\n\n    _ranges: UnicodeRangeList = []\n\n    @_lazyclassproperty\n    def _chars_for_ranges(cls):\n        ret = []\n        for cc in cls.__mro__:\n            if cc is unicode_set:\n                break\n            for rr in getattr(cc, \"_ranges\", ()):\n                ret.extend(range(rr[0], rr[-1] + 1))\n        return [chr(c) for c in sorted(set(ret))]\n\n    @_lazyclassproperty\n    def printables(cls):\n        \"\"\"all non-whitespace characters in this range\"\"\"\n        return \"\".join(filterfalse(str.isspace, cls._chars_for_ranges))\n\n    @_lazyclassproperty\n    def alphas(cls):\n        \"\"\"all alphabetic characters in this range\"\"\"\n        return \"\".join(filter(str.isalpha, cls._chars_for_ranges))\n\n    @_lazyclassproperty\n    def nums(cls):\n        \"\"\"all numeric digit characters in this range\"\"\"\n        return \"\".join(filter(str.isdigit, cls._chars_for_ranges))\n\n    @_lazyclassproperty\n    def alphanums(cls):\n        \"\"\"all alphanumeric characters in this range\"\"\"\n        return cls.alphas + cls.nums\n\n    @_lazyclassproperty\n    def identchars(cls):\n        \"\"\"all characters in this range that are valid identifier characters, plus underscore '_'\"\"\"\n        return \"\".join(\n            sorted(\n                set(\n                    \"\".join(filter(str.isidentifier, cls._chars_for_ranges))\n                    + \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzªµº\"\n                    + \"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ\"\n                    + \"_\"\n                )\n            )\n        )\n\n    @_lazyclassproperty\n    def identbodychars(cls):\n        \"\"\"\n        all characters in this range that are valid identifier body characters,\n        plus the digits 0-9, and · (Unicode MIDDLE DOT)\n        \"\"\"\n        return \"\".join(\n            sorted(\n                set(\n                    cls.identchars\n                    + \"0123456789·\"\n                    + \"\".join(\n                        [c for c in cls._chars_for_ranges if (\"_\" + c).isidentifier()]\n                    )\n                )\n            )\n        )\n\n    @_lazyclassproperty\n    def identifier(cls):\n        \"\"\"\n        a pyparsing Word expression for an identifier using this range's definitions for\n        identchars and identbodychars\n        \"\"\"\n        from pip._vendor.pyparsing import Word\n\n        return Word(cls.identchars, cls.identbodychars)\n\n\nclass pyparsing_unicode(unicode_set):\n    \"\"\"\n    A namespace class for defining common language unicode_sets.\n    \"\"\"\n\n    # fmt: off\n\n    # define ranges in language character sets\n    _ranges: UnicodeRangeList = [\n        (0x0020, sys.maxunicode),\n    ]\n\n    class BasicMultilingualPlane(unicode_set):\n        \"\"\"Unicode set for the Basic Multilingual Plane\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0020, 0xFFFF),\n        ]\n\n    class Latin1(unicode_set):\n        \"\"\"Unicode set for Latin-1 Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0020, 0x007E),\n            (0x00A0, 0x00FF),\n        ]\n\n    class LatinA(unicode_set):\n        \"\"\"Unicode set for Latin-A Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0100, 0x017F),\n        ]\n\n    class LatinB(unicode_set):\n        \"\"\"Unicode set for Latin-B Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0180, 0x024F),\n        ]\n\n    class Greek(unicode_set):\n        \"\"\"Unicode set for Greek Unicode Character Ranges\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0342, 0x0345),\n            (0x0370, 0x0377),\n            (0x037A, 0x037F),\n            (0x0384, 0x038A),\n            (0x038C,),\n            (0x038E, 0x03A1),\n            (0x03A3, 0x03E1),\n            (0x03F0, 0x03FF),\n            (0x1D26, 0x1D2A),\n            (0x1D5E,),\n            (0x1D60,),\n            (0x1D66, 0x1D6A),\n            (0x1F00, 0x1F15),\n            (0x1F18, 0x1F1D),\n            (0x1F20, 0x1F45),\n            (0x1F48, 0x1F4D),\n            (0x1F50, 0x1F57),\n            (0x1F59,),\n            (0x1F5B,),\n            (0x1F5D,),\n            (0x1F5F, 0x1F7D),\n            (0x1F80, 0x1FB4),\n            (0x1FB6, 0x1FC4),\n            (0x1FC6, 0x1FD3),\n            (0x1FD6, 0x1FDB),\n            (0x1FDD, 0x1FEF),\n            (0x1FF2, 0x1FF4),\n            (0x1FF6, 0x1FFE),\n            (0x2129,),\n            (0x2719, 0x271A),\n            (0xAB65,),\n            (0x10140, 0x1018D),\n            (0x101A0,),\n            (0x1D200, 0x1D245),\n            (0x1F7A1, 0x1F7A7),\n        ]\n\n    class Cyrillic(unicode_set):\n        \"\"\"Unicode set for Cyrillic Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0400, 0x052F),\n            (0x1C80, 0x1C88),\n            (0x1D2B,),\n            (0x1D78,),\n            (0x2DE0, 0x2DFF),\n            (0xA640, 0xA672),\n            (0xA674, 0xA69F),\n            (0xFE2E, 0xFE2F),\n        ]\n\n    class Chinese(unicode_set):\n        \"\"\"Unicode set for Chinese Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x2E80, 0x2E99),\n            (0x2E9B, 0x2EF3),\n            (0x31C0, 0x31E3),\n            (0x3400, 0x4DB5),\n            (0x4E00, 0x9FEF),\n            (0xA700, 0xA707),\n            (0xF900, 0xFA6D),\n            (0xFA70, 0xFAD9),\n            (0x16FE2, 0x16FE3),\n            (0x1F210, 0x1F212),\n            (0x1F214, 0x1F23B),\n            (0x1F240, 0x1F248),\n            (0x20000, 0x2A6D6),\n            (0x2A700, 0x2B734),\n            (0x2B740, 0x2B81D),\n            (0x2B820, 0x2CEA1),\n            (0x2CEB0, 0x2EBE0),\n            (0x2F800, 0x2FA1D),\n        ]\n\n    class Japanese(unicode_set):\n        \"\"\"Unicode set for Japanese Unicode Character Range, combining Kanji, Hiragana, and Katakana ranges\"\"\"\n\n        class Kanji(unicode_set):\n            \"Unicode set for Kanji Unicode Character Range\"\n            _ranges: UnicodeRangeList = [\n                (0x4E00, 0x9FBF),\n                (0x3000, 0x303F),\n            ]\n\n        class Hiragana(unicode_set):\n            \"\"\"Unicode set for Hiragana Unicode Character Range\"\"\"\n            _ranges: UnicodeRangeList = [\n                (0x3041, 0x3096),\n                (0x3099, 0x30A0),\n                (0x30FC,),\n                (0xFF70,),\n                (0x1B001,),\n                (0x1B150, 0x1B152),\n                (0x1F200,),\n            ]\n\n        class Katakana(unicode_set):\n            \"\"\"Unicode set for Katakana  Unicode Character Range\"\"\"\n            _ranges: UnicodeRangeList = [\n                (0x3099, 0x309C),\n                (0x30A0, 0x30FF),\n                (0x31F0, 0x31FF),\n                (0x32D0, 0x32FE),\n                (0xFF65, 0xFF9F),\n                (0x1B000,),\n                (0x1B164, 0x1B167),\n                (0x1F201, 0x1F202),\n                (0x1F213,),\n            ]\n\n        漢字 = Kanji\n        カタカナ = Katakana\n        ひらがな = Hiragana\n\n        _ranges = (\n            Kanji._ranges\n            + Hiragana._ranges\n            + Katakana._ranges\n        )\n\n    class Hangul(unicode_set):\n        \"\"\"Unicode set for Hangul (Korean) Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x1100, 0x11FF),\n            (0x302E, 0x302F),\n            (0x3131, 0x318E),\n            (0x3200, 0x321C),\n            (0x3260, 0x327B),\n            (0x327E,),\n            (0xA960, 0xA97C),\n            (0xAC00, 0xD7A3),\n            (0xD7B0, 0xD7C6),\n            (0xD7CB, 0xD7FB),\n            (0xFFA0, 0xFFBE),\n            (0xFFC2, 0xFFC7),\n            (0xFFCA, 0xFFCF),\n            (0xFFD2, 0xFFD7),\n            (0xFFDA, 0xFFDC),\n        ]\n\n    Korean = Hangul\n\n    class CJK(Chinese, Japanese, Hangul):\n        \"\"\"Unicode set for combined Chinese, Japanese, and Korean (CJK) Unicode Character Range\"\"\"\n\n    class Thai(unicode_set):\n        \"\"\"Unicode set for Thai Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0E01, 0x0E3A),\n            (0x0E3F, 0x0E5B)\n        ]\n\n    class Arabic(unicode_set):\n        \"\"\"Unicode set for Arabic Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0600, 0x061B),\n            (0x061E, 0x06FF),\n            (0x0700, 0x077F),\n        ]\n\n    class Hebrew(unicode_set):\n        \"\"\"Unicode set for Hebrew Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0591, 0x05C7),\n            (0x05D0, 0x05EA),\n            (0x05EF, 0x05F4),\n            (0xFB1D, 0xFB36),\n            (0xFB38, 0xFB3C),\n            (0xFB3E,),\n            (0xFB40, 0xFB41),\n            (0xFB43, 0xFB44),\n            (0xFB46, 0xFB4F),\n        ]\n\n    class Devanagari(unicode_set):\n        \"\"\"Unicode set for Devanagari Unicode Character Range\"\"\"\n        _ranges: UnicodeRangeList = [\n            (0x0900, 0x097F),\n            (0xA8E0, 0xA8FF)\n        ]\n\n    BMP = BasicMultilingualPlane\n\n    # add language identifiers using language Unicode\n    العربية = Arabic\n    中文 = Chinese\n    кириллица = Cyrillic\n    Ελληνικά = Greek\n    עִברִית = Hebrew\n    日本語 = Japanese\n    한국어 = Korean\n    ไทย = Thai\n    देवनागरी = Devanagari\n\n    # fmt: on\n"},"hash":"ytBDe2aDCL"}