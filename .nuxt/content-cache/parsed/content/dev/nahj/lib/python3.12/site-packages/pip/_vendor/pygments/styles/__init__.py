{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:styles:__init__.py","body":"\"\"\"\n    pygments.styles\n    ~~~~~~~~~~~~~~~\n\n    Contains built-in styles.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nfrom pip._vendor.pygments.plugin import find_plugin_styles\nfrom pip._vendor.pygments.util import ClassNotFound\n\n#: A dictionary of built-in styles, mapping style names to\n#: ``'submodule::classname'`` strings.\nSTYLE_MAP = {\n    'default':  'default::DefaultStyle',\n    'emacs':    'emacs::EmacsStyle',\n    'friendly': 'friendly::FriendlyStyle',\n    'friendly_grayscale': 'friendly_grayscale::FriendlyGrayscaleStyle',\n    'colorful': 'colorful::ColorfulStyle',\n    'autumn':   'autumn::AutumnStyle',\n    'murphy':   'murphy::MurphyStyle',\n    'manni':    'manni::ManniStyle',\n    'material': 'material::MaterialStyle',\n    'monokai':  'monokai::MonokaiStyle',\n    'perldoc':  'perldoc::PerldocStyle',\n    'pastie':   'pastie::PastieStyle',\n    'borland':  'borland::BorlandStyle',\n    'trac':     'trac::TracStyle',\n    'native':   'native::NativeStyle',\n    'fruity':   'fruity::FruityStyle',\n    'bw':       'bw::BlackWhiteStyle',\n    'vim':      'vim::VimStyle',\n    'vs':       'vs::VisualStudioStyle',\n    'tango':    'tango::TangoStyle',\n    'rrt':      'rrt::RrtStyle',\n    'xcode':    'xcode::XcodeStyle',\n    'igor':     'igor::IgorStyle',\n    'paraiso-light': 'paraiso_light::ParaisoLightStyle',\n    'paraiso-dark': 'paraiso_dark::ParaisoDarkStyle',\n    'lovelace': 'lovelace::LovelaceStyle',\n    'algol':    'algol::AlgolStyle',\n    'algol_nu': 'algol_nu::Algol_NuStyle',\n    'arduino':  'arduino::ArduinoStyle',\n    'rainbow_dash': 'rainbow_dash::RainbowDashStyle',\n    'abap':     'abap::AbapStyle',\n    'solarized-dark': 'solarized::SolarizedDarkStyle',\n    'solarized-light': 'solarized::SolarizedLightStyle',\n    'sas':         'sas::SasStyle',\n    'staroffice' : 'staroffice::StarofficeStyle',\n    'stata':       'stata_light::StataLightStyle',\n    'stata-light': 'stata_light::StataLightStyle',\n    'stata-dark':  'stata_dark::StataDarkStyle',\n    'inkpot':      'inkpot::InkPotStyle',\n    'zenburn': 'zenburn::ZenburnStyle',\n    'gruvbox-dark': 'gruvbox::GruvboxDarkStyle',\n    'gruvbox-light': 'gruvbox::GruvboxLightStyle',\n    'dracula': 'dracula::DraculaStyle',\n    'one-dark': 'onedark::OneDarkStyle',\n    'lilypond' : 'lilypond::LilyPondStyle',\n    'nord': 'nord::NordStyle',\n    'nord-darker': 'nord::NordDarkerStyle',\n    'github-dark': 'gh_dark::GhDarkStyle'\n}\n\n\ndef get_style_by_name(name):\n    \"\"\"\n    Return a style class by its short name. The names of the builtin styles\n    are listed in :data:`pygments.styles.STYLE_MAP`.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no style of that name is\n    found.\n    \"\"\"\n    if name in STYLE_MAP:\n        mod, cls = STYLE_MAP[name].split('::')\n        builtin = \"yes\"\n    else:\n        for found_name, style in find_plugin_styles():\n            if name == found_name:\n                return style\n        # perhaps it got dropped into our styles package\n        builtin = \"\"\n        mod = name\n        cls = name.title() + \"Style\"\n\n    try:\n        mod = __import__('pygments.styles.' + mod, None, None, [cls])\n    except ImportError:\n        raise ClassNotFound(\"Could not find style module %r\" % mod +\n                         (builtin and \", though it should be builtin\") + \".\")\n    try:\n        return getattr(mod, cls)\n    except AttributeError:\n        raise ClassNotFound(\"Could not find style class %r in style module.\" % cls)\n\n\ndef get_all_styles():\n    \"\"\"Return a generator for all styles by name, both builtin and plugin.\"\"\"\n    yield from STYLE_MAP\n    for name, _ in find_plugin_styles():\n        yield name\n"},"hash":"IRLc7vkpDL"}