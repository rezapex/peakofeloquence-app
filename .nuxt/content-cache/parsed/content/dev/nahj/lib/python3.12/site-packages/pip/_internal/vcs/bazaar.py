{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:vcs:bazaar.py","body":"import logging\nfrom typing import List, Optional, Tuple\n\nfrom pip._internal.utils.misc import HiddenText, display_path\nfrom pip._internal.utils.subprocess import make_command\nfrom pip._internal.utils.urls import path_to_url\nfrom pip._internal.vcs.versioncontrol import (\n    AuthInfo,\n    RemoteNotFoundError,\n    RevOptions,\n    VersionControl,\n    vcs,\n)\n\nlogger = logging.getLogger(__name__)\n\n\nclass Bazaar(VersionControl):\n    name = \"bzr\"\n    dirname = \".bzr\"\n    repo_name = \"branch\"\n    schemes = (\n        \"bzr+http\",\n        \"bzr+https\",\n        \"bzr+ssh\",\n        \"bzr+sftp\",\n        \"bzr+ftp\",\n        \"bzr+lp\",\n        \"bzr+file\",\n    )\n\n    @staticmethod\n    def get_base_rev_args(rev: str) -> List[str]:\n        return [\"-r\", rev]\n\n    def fetch_new(\n        self, dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int\n    ) -> None:\n        rev_display = rev_options.to_display()\n        logger.info(\n            \"Checking out %s%s to %s\",\n            url,\n            rev_display,\n            display_path(dest),\n        )\n        if verbosity <= 0:\n            flag = \"--quiet\"\n        elif verbosity == 1:\n            flag = \"\"\n        else:\n            flag = f\"-{'v'*verbosity}\"\n        cmd_args = make_command(\n            \"checkout\", \"--lightweight\", flag, rev_options.to_args(), url, dest\n        )\n        self.run_command(cmd_args)\n\n    def switch(self, dest: str, url: HiddenText, rev_options: RevOptions) -> None:\n        self.run_command(make_command(\"switch\", url), cwd=dest)\n\n    def update(self, dest: str, url: HiddenText, rev_options: RevOptions) -> None:\n        output = self.run_command(\n            make_command(\"info\"), show_stdout=False, stdout_only=True, cwd=dest\n        )\n        if output.startswith(\"Standalone \"):\n            # Older versions of pip used to create standalone branches.\n            # Convert the standalone branch to a checkout by calling \"bzr bind\".\n            cmd_args = make_command(\"bind\", \"-q\", url)\n            self.run_command(cmd_args, cwd=dest)\n\n        cmd_args = make_command(\"update\", \"-q\", rev_options.to_args())\n        self.run_command(cmd_args, cwd=dest)\n\n    @classmethod\n    def get_url_rev_and_auth(cls, url: str) -> Tuple[str, Optional[str], AuthInfo]:\n        # hotfix the URL scheme after removing bzr+ from bzr+ssh:// re-add it\n        url, rev, user_pass = super().get_url_rev_and_auth(url)\n        if url.startswith(\"ssh://\"):\n            url = \"bzr+\" + url\n        return url, rev, user_pass\n\n    @classmethod\n    def get_remote_url(cls, location: str) -> str:\n        urls = cls.run_command(\n            [\"info\"], show_stdout=False, stdout_only=True, cwd=location\n        )\n        for line in urls.splitlines():\n            line = line.strip()\n            for x in (\"checkout of branch: \", \"parent branch: \"):\n                if line.startswith(x):\n                    repo = line.split(x)[1]\n                    if cls._is_local_repository(repo):\n                        return path_to_url(repo)\n                    return repo\n        raise RemoteNotFoundError\n\n    @classmethod\n    def get_revision(cls, location: str) -> str:\n        revision = cls.run_command(\n            [\"revno\"],\n            show_stdout=False,\n            stdout_only=True,\n            cwd=location,\n        )\n        return revision.splitlines()[-1]\n\n    @classmethod\n    def is_commit_id_equal(cls, dest: str, name: Optional[str]) -> bool:\n        \"\"\"Always assume the versions don't match\"\"\"\n        return False\n\n\nvcs.register(Bazaar)\n"},"hash":"UkomfGGYbk"}