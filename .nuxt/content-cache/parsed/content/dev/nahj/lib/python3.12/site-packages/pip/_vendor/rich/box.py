{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:rich:box.py","body":"import sys\nfrom typing import TYPE_CHECKING, Iterable, List\n\nif sys.version_info >= (3, 8):\n    from typing import Literal\nelse:\n    from pip._vendor.typing_extensions import Literal  # pragma: no cover\n\n\nfrom ._loop import loop_last\n\nif TYPE_CHECKING:\n    from pip._vendor.rich.console import ConsoleOptions\n\n\nclass Box:\n    \"\"\"Defines characters to render boxes.\n\n    ┌─┬┐ top\n    │ ││ head\n    ├─┼┤ head_row\n    │ ││ mid\n    ├─┼┤ row\n    ├─┼┤ foot_row\n    │ ││ foot\n    └─┴┘ bottom\n\n    Args:\n        box (str): Characters making up box.\n        ascii (bool, optional): True if this box uses ascii characters only. Default is False.\n    \"\"\"\n\n    def __init__(self, box: str, *, ascii: bool = False) -> None:\n        self._box = box\n        self.ascii = ascii\n        line1, line2, line3, line4, line5, line6, line7, line8 = box.splitlines()\n        # top\n        self.top_left, self.top, self.top_divider, self.top_right = iter(line1)\n        # head\n        self.head_left, _, self.head_vertical, self.head_right = iter(line2)\n        # head_row\n        (\n            self.head_row_left,\n            self.head_row_horizontal,\n            self.head_row_cross,\n            self.head_row_right,\n        ) = iter(line3)\n\n        # mid\n        self.mid_left, _, self.mid_vertical, self.mid_right = iter(line4)\n        # row\n        self.row_left, self.row_horizontal, self.row_cross, self.row_right = iter(line5)\n        # foot_row\n        (\n            self.foot_row_left,\n            self.foot_row_horizontal,\n            self.foot_row_cross,\n            self.foot_row_right,\n        ) = iter(line6)\n        # foot\n        self.foot_left, _, self.foot_vertical, self.foot_right = iter(line7)\n        # bottom\n        self.bottom_left, self.bottom, self.bottom_divider, self.bottom_right = iter(\n            line8\n        )\n\n    def __repr__(self) -> str:\n        return \"Box(...)\"\n\n    def __str__(self) -> str:\n        return self._box\n\n    def substitute(self, options: \"ConsoleOptions\", safe: bool = True) -> \"Box\":\n        \"\"\"Substitute this box for another if it won't render due to platform issues.\n\n        Args:\n            options (ConsoleOptions): Console options used in rendering.\n            safe (bool, optional): Substitute this for another Box if there are known problems\n                displaying on the platform (currently only relevant on Windows). Default is True.\n\n        Returns:\n            Box: A different Box or the same Box.\n        \"\"\"\n        box = self\n        if options.legacy_windows and safe:\n            box = LEGACY_WINDOWS_SUBSTITUTIONS.get(box, box)\n        if options.ascii_only and not box.ascii:\n            box = ASCII\n        return box\n\n    def get_plain_headed_box(self) -> \"Box\":\n        \"\"\"If this box uses special characters for the borders of the header, then\n        return the equivalent box that does not.\n\n        Returns:\n            Box: The most similar Box that doesn't use header-specific box characters.\n                If the current Box already satisfies this criterion, then it's returned.\n        \"\"\"\n        return PLAIN_HEADED_SUBSTITUTIONS.get(self, self)\n\n    def get_top(self, widths: Iterable[int]) -> str:\n        \"\"\"Get the top of a simple box.\n\n        Args:\n            widths (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        \"\"\"\n\n        parts: List[str] = []\n        append = parts.append\n        append(self.top_left)\n        for last, width in loop_last(widths):\n            append(self.top * width)\n            if not last:\n                append(self.top_divider)\n        append(self.top_right)\n        return \"\".join(parts)\n\n    def get_row(\n        self,\n        widths: Iterable[int],\n        level: Literal[\"head\", \"row\", \"foot\", \"mid\"] = \"row\",\n        edge: bool = True,\n    ) -> str:\n        \"\"\"Get the top of a simple box.\n\n        Args:\n            width (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        \"\"\"\n        if level == \"head\":\n            left = self.head_row_left\n            horizontal = self.head_row_horizontal\n            cross = self.head_row_cross\n            right = self.head_row_right\n        elif level == \"row\":\n            left = self.row_left\n            horizontal = self.row_horizontal\n            cross = self.row_cross\n            right = self.row_right\n        elif level == \"mid\":\n            left = self.mid_left\n            horizontal = \" \"\n            cross = self.mid_vertical\n            right = self.mid_right\n        elif level == \"foot\":\n            left = self.foot_row_left\n            horizontal = self.foot_row_horizontal\n            cross = self.foot_row_cross\n            right = self.foot_row_right\n        else:\n            raise ValueError(\"level must be 'head', 'row' or 'foot'\")\n\n        parts: List[str] = []\n        append = parts.append\n        if edge:\n            append(left)\n        for last, width in loop_last(widths):\n            append(horizontal * width)\n            if not last:\n                append(cross)\n        if edge:\n            append(right)\n        return \"\".join(parts)\n\n    def get_bottom(self, widths: Iterable[int]) -> str:\n        \"\"\"Get the bottom of a simple box.\n\n        Args:\n            widths (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        \"\"\"\n\n        parts: List[str] = []\n        append = parts.append\n        append(self.bottom_left)\n        for last, width in loop_last(widths):\n            append(self.bottom * width)\n            if not last:\n                append(self.bottom_divider)\n        append(self.bottom_right)\n        return \"\".join(parts)\n\n\nASCII: Box = Box(\n    \"\"\"\\\n+--+\n| ||\n|-+|\n| ||\n|-+|\n|-+|\n| ||\n+--+\n\"\"\",\n    ascii=True,\n)\n\nASCII2: Box = Box(\n    \"\"\"\\\n+-++\n| ||\n+-++\n| ||\n+-++\n+-++\n| ||\n+-++\n\"\"\",\n    ascii=True,\n)\n\nASCII_DOUBLE_HEAD: Box = Box(\n    \"\"\"\\\n+-++\n| ||\n+=++\n| ||\n+-++\n+-++\n| ||\n+-++\n\"\"\",\n    ascii=True,\n)\n\nSQUARE: Box = Box(\n    \"\"\"\\\n┌─┬┐\n│ ││\n├─┼┤\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n\"\"\"\n)\n\nSQUARE_DOUBLE_HEAD: Box = Box(\n    \"\"\"\\\n┌─┬┐\n│ ││\n╞═╪╡\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n\"\"\"\n)\n\nMINIMAL: Box = Box(\n    \"\"\"\\\n  ╷ \n  │ \n╶─┼╴\n  │ \n╶─┼╴\n╶─┼╴\n  │ \n  ╵ \n\"\"\"\n)\n\n\nMINIMAL_HEAVY_HEAD: Box = Box(\n    \"\"\"\\\n  ╷ \n  │ \n╺━┿╸\n  │ \n╶─┼╴\n╶─┼╴\n  │ \n  ╵ \n\"\"\"\n)\n\nMINIMAL_DOUBLE_HEAD: Box = Box(\n    \"\"\"\\\n  ╷ \n  │ \n ═╪ \n  │ \n ─┼ \n ─┼ \n  │ \n  ╵ \n\"\"\"\n)\n\n\nSIMPLE: Box = Box(\n    \"\"\"\\\n    \n    \n ── \n    \n    \n ── \n    \n    \n\"\"\"\n)\n\nSIMPLE_HEAD: Box = Box(\n    \"\"\"\\\n    \n    \n ── \n    \n    \n    \n    \n    \n\"\"\"\n)\n\n\nSIMPLE_HEAVY: Box = Box(\n    \"\"\"\\\n    \n    \n ━━ \n    \n    \n ━━ \n    \n    \n\"\"\"\n)\n\n\nHORIZONTALS: Box = Box(\n    \"\"\"\\\n ── \n    \n ── \n    \n ── \n ── \n    \n ── \n\"\"\"\n)\n\nROUNDED: Box = Box(\n    \"\"\"\\\n╭─┬╮\n│ ││\n├─┼┤\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n╰─┴╯\n\"\"\"\n)\n\nHEAVY: Box = Box(\n    \"\"\"\\\n┏━┳┓\n┃ ┃┃\n┣━╋┫\n┃ ┃┃\n┣━╋┫\n┣━╋┫\n┃ ┃┃\n┗━┻┛\n\"\"\"\n)\n\nHEAVY_EDGE: Box = Box(\n    \"\"\"\\\n┏━┯┓\n┃ │┃\n┠─┼┨\n┃ │┃\n┠─┼┨\n┠─┼┨\n┃ │┃\n┗━┷┛\n\"\"\"\n)\n\nHEAVY_HEAD: Box = Box(\n    \"\"\"\\\n┏━┳┓\n┃ ┃┃\n┡━╇┩\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n\"\"\"\n)\n\nDOUBLE: Box = Box(\n    \"\"\"\\\n╔═╦╗\n║ ║║\n╠═╬╣\n║ ║║\n╠═╬╣\n╠═╬╣\n║ ║║\n╚═╩╝\n\"\"\"\n)\n\nDOUBLE_EDGE: Box = Box(\n    \"\"\"\\\n╔═╤╗\n║ │║\n╟─┼╢\n║ │║\n╟─┼╢\n╟─┼╢\n║ │║\n╚═╧╝\n\"\"\"\n)\n\nMARKDOWN: Box = Box(\n    \"\"\"\\\n    \n| ||\n|-||\n| ||\n|-||\n|-||\n| ||\n    \n\"\"\",\n    ascii=True,\n)\n\n# Map Boxes that don't render with raster fonts on to equivalent that do\nLEGACY_WINDOWS_SUBSTITUTIONS = {\n    ROUNDED: SQUARE,\n    MINIMAL_HEAVY_HEAD: MINIMAL,\n    SIMPLE_HEAVY: SIMPLE,\n    HEAVY: SQUARE,\n    HEAVY_EDGE: SQUARE,\n    HEAVY_HEAD: SQUARE,\n}\n\n# Map headed boxes to their headerless equivalents\nPLAIN_HEADED_SUBSTITUTIONS = {\n    HEAVY_HEAD: SQUARE,\n    SQUARE_DOUBLE_HEAD: SQUARE,\n    MINIMAL_DOUBLE_HEAD: MINIMAL,\n    MINIMAL_HEAVY_HEAD: MINIMAL,\n    ASCII_DOUBLE_HEAD: ASCII2,\n}\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n\n    from pip._vendor.rich.columns import Columns\n    from pip._vendor.rich.panel import Panel\n\n    from . import box as box\n    from .console import Console\n    from .table import Table\n    from .text import Text\n\n    console = Console(record=True)\n\n    BOXES = [\n        \"ASCII\",\n        \"ASCII2\",\n        \"ASCII_DOUBLE_HEAD\",\n        \"SQUARE\",\n        \"SQUARE_DOUBLE_HEAD\",\n        \"MINIMAL\",\n        \"MINIMAL_HEAVY_HEAD\",\n        \"MINIMAL_DOUBLE_HEAD\",\n        \"SIMPLE\",\n        \"SIMPLE_HEAD\",\n        \"SIMPLE_HEAVY\",\n        \"HORIZONTALS\",\n        \"ROUNDED\",\n        \"HEAVY\",\n        \"HEAVY_EDGE\",\n        \"HEAVY_HEAD\",\n        \"DOUBLE\",\n        \"DOUBLE_EDGE\",\n        \"MARKDOWN\",\n    ]\n\n    console.print(Panel(\"[bold green]Box Constants\", style=\"green\"), justify=\"center\")\n    console.print()\n\n    columns = Columns(expand=True, padding=2)\n    for box_name in sorted(BOXES):\n        table = Table(\n            show_footer=True, style=\"dim\", border_style=\"not dim\", expand=True\n        )\n        table.add_column(\"Header 1\", \"Footer 1\")\n        table.add_column(\"Header 2\", \"Footer 2\")\n        table.add_row(\"Cell\", \"Cell\")\n        table.add_row(\"Cell\", \"Cell\")\n        table.box = getattr(box, box_name)\n        table.title = Text(f\"box.{box_name}\", style=\"magenta\")\n        columns.add_renderable(table)\n    console.print(columns)\n\n    # console.save_svg(\"box.svg\")\n"},"hash":"P6HjARzdCa"}