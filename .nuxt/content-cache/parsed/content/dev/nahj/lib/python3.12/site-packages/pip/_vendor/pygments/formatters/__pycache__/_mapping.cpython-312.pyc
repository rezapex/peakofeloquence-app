{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:formatters:__pycache__:_mapping.cpython-312.pyc","body":"�\n\n\u0000\u0000\u0000\u0000�Y!fP\u0010\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000�v\u0000\u0000\u0000�\u0000i\u0000d\u0000d\u0001�\u0001d\u0002d\u0003�\u0001d\u0004d\u0005�\u0001d\u0006d\u0007�\u0001d\bd\t�\u0001d\nd\u000b�\u0001d\fd\n�\u0001d\u000ed\u000f�\u0001d\u0010d\u0011�\u0001d\u0012d\u0013�\u0001d\u0014d\u0015�\u0001d\u0016d\u0017�\u0001d\u0018d\u0019�\u0001d\u001ad\u001b�\u0001d\u001cd\u001d�\u0001d\u001ed\u001f�\u0001d d!�\u0001d\"d#i\u0001�\u0001Z\u0000y$)%�\u000fBBCodeFormatter)\u0005z\u001apygments.formatters.bbcode�\u0006BBCode)\u0002�\u0006bbcode�\u0002bb�\u0000z�Format tokens with BBcodes. These formatting codes are used by many bulletin boards, so you can highlight your sourcecode with pygments before posting it there.�\u0011BmpImageFormatter)\u0005�\u0017pygments.formatters.img�\u0007img_bmp)\u0002�\u0003bmp�\u0006bitmap)\u0001z\u0005*.bmpzwCreate a bitmap image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.�\u0011GifImageFormatter)\u0005r\b\u0000\u0000\u0000�\u0007img_gif)\u0001�\u0003gif)\u0001z\u0005*.gifztCreate a GIF image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.�\u000eGroffFormatter)\u0005z\u0019pygments.formatters.groff�\u0005groff)\u0003r\u0010\u0000\u0000\u0000�\u0005troff�\u0004roffr\u0006\u0000\u0000\u0000zFFormat tokens with groff escapes to change their color and font style.�\nHtmlFormatter)\u0005z\u0018pygments.formatters.html�\u0004HTML)\u0001�\u0004html)\u0002z\u0006*.htmlz\u0005*.htmz�Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option). The ``<div>``'s CSS class can be set by the `cssclass` option.�\fIRCFormatter)\u0005z\u0017pygments.formatters.irc�\u0003IRC)\u0002�\u0003ircr\u0017\u0000\u0000\u0000r\u0006\u0000\u0000\u0000z&Format tokens with IRC color sequences�\u000eImageFormatter)\u0005r\b\u0000\u0000\u0000�\u0003img)\u0003r\u001a\u0000\u0000\u0000�\u0003IMG�\u0003png)\u0001z\u0005*.pngztCreate a PNG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.�\u0011JpgImageFormatter)\u0005r\b\u0000\u0000\u0000�\u0007img_jpg)\u0002�\u0003jpg�\u0004jpeg)\u0001z\u0005*.jpgzuCreate a JPEG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.�\u000eLatexFormatter)\u0005z\u0019pygments.formatters.latex�\u0005LaTeX)\u0002�\u0005latex�\u0003tex)\u0001z\u0005*.texzUFormat tokens as LaTeX code. This needs the `fancyvrb` and `color` standard packages.�\nNullFormatter)\u0005�\u0019pygments.formatters.otherz\tText only)\u0002�\u0004text�\u0004null)\u0001z\u0005*.txtz1Output the text unchanged without any formatting.�\u0014PangoMarkupFormatter)\u0005z\u001fpygments.formatters.pangomarkupz\fPango Markup)\u0002�\u0005pango�\u000bpangomarkupr\u0006\u0000\u0000\u0000zFFormat tokens as Pango Markup code. It can then be rendered to an SVG.�\u0011RawTokenFormatter)\u0005r&\u0000\u0000\u0000z\nRaw tokens)\u0002�\u0003raw�\u0006tokens)\u0001z\u0005*.rawz@Format tokens as a raw representation for storing token streams.�\fRtfFormatter)\u0005z\u0017pygments.formatters.rtf�\u0003RTF)\u0001�\u0003rtf)\u0001z\u0005*.rtfz�Format tokens as RTF markup. This formatter automatically outputs full RTF documents with color information and other useful stuff. Perfect for Copy and Paste into Microsoft(R) Word(R) documents.�\fSvgFormatter)\u0005z\u0017pygments.formatters.svg�\u0003SVG)\u0001�\u0003svg)\u0001z\u0005*.svgz�Format tokens as an SVG graphics file.  This formatter is still experimental. Each line of code is a ``<text>`` element with explicit ``x`` and ``y`` coordinates containing ``<tspan>`` elements with the individual token styles.�\u0014Terminal256Formatter)\u0005�\u001fpygments.formatters.terminal256�\u000bTerminal256)\u0003�\u000bterminal256�\nconsole256�\u0003256r\u0006\u0000\u0000\u0000z�Format tokens with ANSI color sequences, for output in a 256-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.�\u0011TerminalFormatter)\u0005z\u001cpygments.formatters.terminal�\bTerminal)\u0002�\bterminal�\u0007consoler\u0006\u0000\u0000\u0000z�Format tokens with ANSI color sequences, for output in a text console. Color sequences are terminated at newlines, so that paging the output works correctly.�\u001aTerminalTrueColorFormatter)\u0005r6\u0000\u0000\u0000�\u0011TerminalTrueColor)\u0003�\u000bterminal16m�\nconsole16m�\u000316mr\u0006\u0000\u0000\u0000z�Format tokens with ANSI color sequences, for output in a true-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.�\u0011TestcaseFormatter)\u0005r&\u0000\u0000\u0000�\bTestcase)\u0001�\btestcaser\u0006\u0000\u0000\u0000z0Format tokens as appropriate for a new testcase.N)\u0001�\nFORMATTERSr\u0006\u0000\u0000\u0000�\u0000\u0000\u0000\u0000�~/Users/rezajafar/peakofeloquence-app/content/dev/nahj/lib/python3.12/site-packages/pip/_vendor/pygments/formatters/_mapping.py�\b<module>rJ\u0000\u0000\u0000\u0001\u0000\u0000\u0000s%\u0001\u0000\u0000�\u0003\u0001\u0001\u0001�\b\u0013\u000e\u0002�\u0004\u0015�\u0000\u0000\u0018z\u0003�\u0003\u0013\u000e\u0002�\u0004\u0017�\u0000\u0000\u001aZ\u0003�\u0005\u0013\u000e\u0002�\u0006\u0000\u0005\u0018�\u0000\u0000\u001aN\u0003�\u0007\u0013\u000e\u0002�\b\u0000\u0005\u0015�\u0000\u0000\u0017g\u0002�\t\u0013\u000e\u0002�\n\u0000\u0005\u0014�\u0000\u0000\u0016~\u0004�\u000b\u0013\u000e\u0002�\f\u0000\u0005\u0013�\u0014t�\n\u0013\u000e\u0002�\u000e\u0000\u0005\u0015�\u0000\u0000\u0017T\u0003�\u000f\u0013\u000e\u0002�\u0010\u0000\u0005\u0018�\u0000\u0000\u001aV\u0003�\u0011\u0013\u000e\u0002�\u0012\u0000\u0005\u0015�\u0000\u0000\u0017t\u0002�\u0013\u0013\u000e\u0002�\u0014\u0000\u0005\u0014�\u0000\u0000\u0016S\u0002�\u0015\u0013\u000e\u0002�\u0016\u0000\u0005\u001b�\u0000\u0000\u001dx\u0002�\u0017\u0013\u000e\u0002�\u0018\u0000\u0005\u0018�\u0000\u0000\u001ah\u0002�\u0019\u0013\u000e\u0002�\u001a\u0000\u0005\u0013�\u0000\u0000\u0015T\u0004�\u001b\u0013\u000e\u0002�\u001c\u0000\u0005\u0013�\u0000\u0000\u0015t\u0004�\u001d\u0013\u000e\u0002�\u001e\u0000\u0005\u001b�\u0000\u0000\u001dH\u0005�\u001f\u0013\u000e\u0002� \u0000\u0005\u0018�\u0000\u0000\u001aD\u0004�!\u0013\u000e\u0002�\"\u0000\u0005!�\u0000\u0000#U\u0005�#\u0013\u000e\u0002�$\u0000\u0005\u0018�\u0000\u0000\u001aJ\u0002�%\u0013\u000e\u0002�\nrH\u0000\u0000\u0000"},"hash":"Eo1uJUlbFW"}