{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:msgpack:__init__.py","body":"# coding: utf-8\nfrom .exceptions import *\nfrom .ext import ExtType, Timestamp\n\nimport os\nimport sys\n\n\nversion = (1, 0, 5)\n__version__ = \"1.0.5\"\n\n\nif os.environ.get(\"MSGPACK_PUREPYTHON\") or sys.version_info[0] == 2:\n    from .fallback import Packer, unpackb, Unpacker\nelse:\n    try:\n        from ._cmsgpack import Packer, unpackb, Unpacker\n    except ImportError:\n        from .fallback import Packer, unpackb, Unpacker\n\n\ndef pack(o, stream, **kwargs):\n    \"\"\"\n    Pack object `o` and write it to `stream`\n\n    See :class:`Packer` for options.\n    \"\"\"\n    packer = Packer(**kwargs)\n    stream.write(packer.pack(o))\n\n\ndef packb(o, **kwargs):\n    \"\"\"\n    Pack object `o` and return packed bytes\n\n    See :class:`Packer` for options.\n    \"\"\"\n    return Packer(**kwargs).pack(o)\n\n\ndef unpack(stream, **kwargs):\n    \"\"\"\n    Unpack an object from `stream`.\n\n    Raises `ExtraData` when `stream` contains extra bytes.\n    See :class:`Unpacker` for options.\n    \"\"\"\n    data = stream.read()\n    return unpackb(data, **kwargs)\n\n\n# alias for compatibility to simplejson/marshal/pickle.\nload = unpack\nloads = unpackb\n\ndump = pack\ndumps = packb\n"},"hash":"2tob6lsGJv"}