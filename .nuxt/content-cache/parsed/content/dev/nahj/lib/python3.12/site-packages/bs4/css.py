{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:bs4:css.py","body":"\"\"\"Integration code for CSS selectors using Soup Sieve (pypi: soupsieve).\"\"\"\n\nimport warnings\ntry:\n    import soupsieve\nexcept ImportError as e:\n    soupsieve = None\n    warnings.warn(\n        'The soupsieve package is not installed. CSS selectors cannot be used.'\n    )\n\n\nclass CSS(object):\n    \"\"\"A proxy object against the soupsieve library, to simplify its\n    CSS selector API.\n\n    Acquire this object through the .css attribute on the\n    BeautifulSoup object, or on the Tag you want to use as the\n    starting point for a CSS selector.\n\n    The main advantage of doing this is that the tag to be selected\n    against doesn't need to be explicitly specified in the function\n    calls, since it's already scoped to a tag.\n    \"\"\"\n\n    def __init__(self, tag, api=soupsieve):\n        \"\"\"Constructor.\n\n        You don't need to instantiate this class yourself; instead,\n        access the .css attribute on the BeautifulSoup object, or on\n        the Tag you want to use as the starting point for your CSS\n        selector.\n\n        :param tag: All CSS selectors will use this as their starting\n        point.\n\n        :param api: A plug-in replacement for the soupsieve module,\n        designed mainly for use in tests.\n        \"\"\"\n        if api is None:\n            raise NotImplementedError(\n                \"Cannot execute CSS selectors because the soupsieve package is not installed.\"\n            )\n        self.api = api\n        self.tag = tag\n\n    def escape(self, ident):\n        \"\"\"Escape a CSS identifier.\n\n        This is a simple wrapper around soupselect.escape(). See the\n        documentation for that function for more information.\n        \"\"\"\n        if soupsieve is None:\n            raise NotImplementedError(\n                \"Cannot escape CSS identifiers because the soupsieve package is not installed.\"\n            )\n        return self.api.escape(ident)\n\n    def _ns(self, ns, select):\n        \"\"\"Normalize a dictionary of namespaces.\"\"\"\n        if not isinstance(select, self.api.SoupSieve) and ns is None:\n            # If the selector is a precompiled pattern, it already has\n            # a namespace context compiled in, which cannot be\n            # replaced.\n            ns = self.tag._namespaces\n        return ns\n\n    def _rs(self, results):\n        \"\"\"Normalize a list of results to a Resultset.\n\n        A ResultSet is more consistent with the rest of Beautiful\n        Soup's API, and ResultSet.__getattr__ has a helpful error\n        message if you try to treat a list of results as a single\n        result (a common mistake).\n        \"\"\"\n        # Import here to avoid circular import\n        from bs4.element import ResultSet\n        return ResultSet(None, results)\n\n    def compile(self, select, namespaces=None, flags=0, **kwargs):\n        \"\"\"Pre-compile a selector and return the compiled object.\n\n        :param selector: A CSS selector.\n\n        :param namespaces: A dictionary mapping namespace prefixes\n           used in the CSS selector to namespace URIs. By default,\n           Beautiful Soup will use the prefixes it encountered while\n           parsing the document.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.compile() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n           soupsieve.compile() method.\n\n        :return: A precompiled selector object.\n        :rtype: soupsieve.SoupSieve\n        \"\"\"\n        return self.api.compile(\n            select, self._ns(namespaces, select), flags, **kwargs\n        )\n\n    def select_one(self, select, namespaces=None, flags=0, **kwargs):\n        \"\"\"Perform a CSS selection operation on the current Tag and return the\n        first result.\n\n        This uses the Soup Sieve library. For more information, see\n        that library's documentation for the soupsieve.select_one()\n        method.\n\n        :param selector: A CSS selector.\n\n        :param namespaces: A dictionary mapping namespace prefixes\n           used in the CSS selector to namespace URIs. By default,\n           Beautiful Soup will use the prefixes it encountered while\n           parsing the document.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.select_one() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n           soupsieve.select_one() method.\n\n        :return: A Tag, or None if the selector has no match.\n        :rtype: bs4.element.Tag\n\n        \"\"\"\n        return self.api.select_one(\n            select, self.tag, self._ns(namespaces, select), flags, **kwargs\n        )\n\n    def select(self, select, namespaces=None, limit=0, flags=0, **kwargs):\n        \"\"\"Perform a CSS selection operation on the current Tag.\n\n        This uses the Soup Sieve library. For more information, see\n        that library's documentation for the soupsieve.select()\n        method.\n\n        :param selector: A string containing a CSS selector.\n\n        :param namespaces: A dictionary mapping namespace prefixes\n            used in the CSS selector to namespace URIs. By default,\n            Beautiful Soup will pass in the prefixes it encountered while\n            parsing the document.\n\n        :param limit: After finding this number of results, stop looking.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.select() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n            soupsieve.select() method.\n\n        :return: A ResultSet of Tag objects.\n        :rtype: bs4.element.ResultSet\n\n        \"\"\"\n        if limit is None:\n            limit = 0\n\n        return self._rs(\n            self.api.select(\n                select, self.tag, self._ns(namespaces, select), limit, flags,\n                **kwargs\n            )\n        )\n\n    def iselect(self, select, namespaces=None, limit=0, flags=0, **kwargs):\n        \"\"\"Perform a CSS selection operation on the current Tag.\n\n        This uses the Soup Sieve library. For more information, see\n        that library's documentation for the soupsieve.iselect()\n        method. It is the same as select(), but it returns a generator\n        instead of a list.\n\n        :param selector: A string containing a CSS selector.\n\n        :param namespaces: A dictionary mapping namespace prefixes\n            used in the CSS selector to namespace URIs. By default,\n            Beautiful Soup will pass in the prefixes it encountered while\n            parsing the document.\n\n        :param limit: After finding this number of results, stop looking.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.iselect() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n            soupsieve.iselect() method.\n\n        :return: A generator\n        :rtype: types.GeneratorType\n        \"\"\"\n        return self.api.iselect(\n            select, self.tag, self._ns(namespaces, select), limit, flags, **kwargs\n        )\n\n    def closest(self, select, namespaces=None, flags=0, **kwargs):\n        \"\"\"Find the Tag closest to this one that matches the given selector.\n\n        This uses the Soup Sieve library. For more information, see\n        that library's documentation for the soupsieve.closest()\n        method.\n\n        :param selector: A string containing a CSS selector.\n\n        :param namespaces: A dictionary mapping namespace prefixes\n            used in the CSS selector to namespace URIs. By default,\n            Beautiful Soup will pass in the prefixes it encountered while\n            parsing the document.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.closest() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n            soupsieve.closest() method.\n\n        :return: A Tag, or None if there is no match.\n        :rtype: bs4.Tag\n\n        \"\"\"\n        return self.api.closest(\n            select, self.tag, self._ns(namespaces, select), flags, **kwargs\n        )\n\n    def match(self, select, namespaces=None, flags=0, **kwargs):\n        \"\"\"Check whether this Tag matches the given CSS selector.\n\n        This uses the Soup Sieve library. For more information, see\n        that library's documentation for the soupsieve.match()\n        method.\n\n        :param: a CSS selector.\n\n        :param namespaces: A dictionary mapping namespace prefixes\n            used in the CSS selector to namespace URIs. By default,\n            Beautiful Soup will pass in the prefixes it encountered while\n            parsing the document.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.match() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n            soupsieve.match() method.\n\n        :return: True if this Tag matches the selector; False otherwise.\n        :rtype: bool\n        \"\"\"\n        return self.api.match(\n            select, self.tag, self._ns(namespaces, select), flags, **kwargs\n        )\n\n    def filter(self, select, namespaces=None, flags=0, **kwargs):\n        \"\"\"Filter this Tag's direct children based on the given CSS selector.\n\n        This uses the Soup Sieve library. It works the same way as\n        passing this Tag into that library's soupsieve.filter()\n        method. More information, for more information see the\n        documentation for soupsieve.filter().\n\n        :param namespaces: A dictionary mapping namespace prefixes\n            used in the CSS selector to namespace URIs. By default,\n            Beautiful Soup will pass in the prefixes it encountered while\n            parsing the document.\n\n        :param flags: Flags to be passed into Soup Sieve's\n            soupsieve.filter() method.\n\n        :param kwargs: Keyword arguments to be passed into SoupSieve's\n            soupsieve.filter() method.\n\n        :return: A ResultSet of Tag objects.\n        :rtype: bs4.element.ResultSet\n\n        \"\"\"\n        return self._rs(\n            self.api.filter(\n                select, self.tag, self._ns(namespaces, select), flags, **kwargs\n            )\n        )\n"},"hash":"5jDe5UFa9v"}