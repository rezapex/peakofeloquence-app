{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:commands:freeze.py","body":"import sys\nfrom optparse import Values\nfrom typing import AbstractSet, List\n\nfrom pip._internal.cli import cmdoptions\nfrom pip._internal.cli.base_command import Command\nfrom pip._internal.cli.status_codes import SUCCESS\nfrom pip._internal.operations.freeze import freeze\nfrom pip._internal.utils.compat import stdlib_pkgs\n\n\ndef _should_suppress_build_backends() -> bool:\n    return sys.version_info < (3, 12)\n\n\ndef _dev_pkgs() -> AbstractSet[str]:\n    pkgs = {\"pip\"}\n\n    if _should_suppress_build_backends():\n        pkgs |= {\"setuptools\", \"distribute\", \"wheel\"}\n\n    return pkgs\n\n\nclass FreezeCommand(Command):\n    \"\"\"\n    Output installed packages in requirements format.\n\n    packages are listed in a case-insensitive sorted order.\n    \"\"\"\n\n    usage = \"\"\"\n      %prog [options]\"\"\"\n    log_streams = (\"ext://sys.stderr\", \"ext://sys.stderr\")\n\n    def add_options(self) -> None:\n        self.cmd_opts.add_option(\n            \"-r\",\n            \"--requirement\",\n            dest=\"requirements\",\n            action=\"append\",\n            default=[],\n            metavar=\"file\",\n            help=(\n                \"Use the order in the given requirements file and its \"\n                \"comments when generating output. This option can be \"\n                \"used multiple times.\"\n            ),\n        )\n        self.cmd_opts.add_option(\n            \"-l\",\n            \"--local\",\n            dest=\"local\",\n            action=\"store_true\",\n            default=False,\n            help=(\n                \"If in a virtualenv that has global access, do not output \"\n                \"globally-installed packages.\"\n            ),\n        )\n        self.cmd_opts.add_option(\n            \"--user\",\n            dest=\"user\",\n            action=\"store_true\",\n            default=False,\n            help=\"Only output packages installed in user-site.\",\n        )\n        self.cmd_opts.add_option(cmdoptions.list_path())\n        self.cmd_opts.add_option(\n            \"--all\",\n            dest=\"freeze_all\",\n            action=\"store_true\",\n            help=(\n                \"Do not skip these packages in the output:\"\n                \" {}\".format(\", \".join(_dev_pkgs()))\n            ),\n        )\n        self.cmd_opts.add_option(\n            \"--exclude-editable\",\n            dest=\"exclude_editable\",\n            action=\"store_true\",\n            help=\"Exclude editable package from output.\",\n        )\n        self.cmd_opts.add_option(cmdoptions.list_exclude())\n\n        self.parser.insert_option_group(0, self.cmd_opts)\n\n    def run(self, options: Values, args: List[str]) -> int:\n        skip = set(stdlib_pkgs)\n        if not options.freeze_all:\n            skip.update(_dev_pkgs())\n\n        if options.excludes:\n            skip.update(options.excludes)\n\n        cmdoptions.check_list_path_option(options)\n\n        for line in freeze(\n            requirement=options.requirements,\n            local_only=options.local,\n            user_only=options.user,\n            paths=options.path,\n            isolated=options.isolated_mode,\n            skip=skip,\n            exclude_editable=options.exclude_editable,\n        ):\n            sys.stdout.write(line + \"\\n\")\n        return SUCCESS\n"},"hash":"rTk35OMon8"}