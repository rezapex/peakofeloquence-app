{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:vcs:subversion.py","body":"import logging\nimport os\nimport re\nfrom typing import List, Optional, Tuple\n\nfrom pip._internal.utils.misc import (\n    HiddenText,\n    display_path,\n    is_console_interactive,\n    is_installable_dir,\n    split_auth_from_netloc,\n)\nfrom pip._internal.utils.subprocess import CommandArgs, make_command\nfrom pip._internal.vcs.versioncontrol import (\n    AuthInfo,\n    RemoteNotFoundError,\n    RevOptions,\n    VersionControl,\n    vcs,\n)\n\nlogger = logging.getLogger(__name__)\n\n_svn_xml_url_re = re.compile('url=\"([^\"]+)\"')\n_svn_rev_re = re.compile(r'committed-rev=\"(\\d+)\"')\n_svn_info_xml_rev_re = re.compile(r'\\s*revision=\"(\\d+)\"')\n_svn_info_xml_url_re = re.compile(r\"<url>(.*)</url>\")\n\n\nclass Subversion(VersionControl):\n    name = \"svn\"\n    dirname = \".svn\"\n    repo_name = \"checkout\"\n    schemes = (\"svn+ssh\", \"svn+http\", \"svn+https\", \"svn+svn\", \"svn+file\")\n\n    @classmethod\n    def should_add_vcs_url_prefix(cls, remote_url: str) -> bool:\n        return True\n\n    @staticmethod\n    def get_base_rev_args(rev: str) -> List[str]:\n        return [\"-r\", rev]\n\n    @classmethod\n    def get_revision(cls, location: str) -> str:\n        \"\"\"\n        Return the maximum revision for all files under a given location\n        \"\"\"\n        # Note: taken from setuptools.command.egg_info\n        revision = 0\n\n        for base, dirs, _ in os.walk(location):\n            if cls.dirname not in dirs:\n                dirs[:] = []\n                continue  # no sense walking uncontrolled subdirs\n            dirs.remove(cls.dirname)\n            entries_fn = os.path.join(base, cls.dirname, \"entries\")\n            if not os.path.exists(entries_fn):\n                # FIXME: should we warn?\n                continue\n\n            dirurl, localrev = cls._get_svn_url_rev(base)\n\n            if base == location:\n                assert dirurl is not None\n                base = dirurl + \"/\"  # save the root url\n            elif not dirurl or not dirurl.startswith(base):\n                dirs[:] = []\n                continue  # not part of the same svn tree, skip it\n            revision = max(revision, localrev)\n        return str(revision)\n\n    @classmethod\n    def get_netloc_and_auth(\n        cls, netloc: str, scheme: str\n    ) -> Tuple[str, Tuple[Optional[str], Optional[str]]]:\n        \"\"\"\n        This override allows the auth information to be passed to svn via the\n        --username and --password options instead of via the URL.\n        \"\"\"\n        if scheme == \"ssh\":\n            # The --username and --password options can't be used for\n            # svn+ssh URLs, so keep the auth information in the URL.\n            return super().get_netloc_and_auth(netloc, scheme)\n\n        return split_auth_from_netloc(netloc)\n\n    @classmethod\n    def get_url_rev_and_auth(cls, url: str) -> Tuple[str, Optional[str], AuthInfo]:\n        # hotfix the URL scheme after removing svn+ from svn+ssh:// re-add it\n        url, rev, user_pass = super().get_url_rev_and_auth(url)\n        if url.startswith(\"ssh://\"):\n            url = \"svn+\" + url\n        return url, rev, user_pass\n\n    @staticmethod\n    def make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        extra_args: CommandArgs = []\n        if username:\n            extra_args += [\"--username\", username]\n        if password:\n            extra_args += [\"--password\", password]\n\n        return extra_args\n\n    @classmethod\n    def get_remote_url(cls, location: str) -> str:\n        # In cases where the source is in a subdirectory, we have to look up in\n        # the location until we find a valid project root.\n        orig_location = location\n        while not is_installable_dir(location):\n            last_location = location\n            location = os.path.dirname(location)\n            if location == last_location:\n                # We've traversed up to the root of the filesystem without\n                # finding a Python project.\n                logger.warning(\n                    \"Could not find Python project for directory %s (tried all \"\n                    \"parent directories)\",\n                    orig_location,\n                )\n                raise RemoteNotFoundError\n\n        url, _rev = cls._get_svn_url_rev(location)\n        if url is None:\n            raise RemoteNotFoundError\n\n        return url\n\n    @classmethod\n    def _get_svn_url_rev(cls, location: str) -> Tuple[Optional[str], int]:\n        from pip._internal.exceptions import InstallationError\n\n        entries_path = os.path.join(location, cls.dirname, \"entries\")\n        if os.path.exists(entries_path):\n            with open(entries_path) as f:\n                data = f.read()\n        else:  # subversion >= 1.7 does not have the 'entries' file\n            data = \"\"\n\n        url = None\n        if data.startswith(\"8\") or data.startswith(\"9\") or data.startswith(\"10\"):\n            entries = list(map(str.splitlines, data.split(\"\\n\\x0c\\n\")))\n            del entries[0][0]  # get rid of the '8'\n            url = entries[0][3]\n            revs = [int(d[9]) for d in entries if len(d) > 9 and d[9]] + [0]\n        elif data.startswith(\"<?xml\"):\n            match = _svn_xml_url_re.search(data)\n            if not match:\n                raise ValueError(f\"Badly formatted data: {data!r}\")\n            url = match.group(1)  # get repository URL\n            revs = [int(m.group(1)) for m in _svn_rev_re.finditer(data)] + [0]\n        else:\n            try:\n                # subversion >= 1.7\n                # Note that using get_remote_call_options is not necessary here\n                # because `svn info` is being run against a local directory.\n                # We don't need to worry about making sure interactive mode\n                # is being used to prompt for passwords, because passwords\n                # are only potentially needed for remote server requests.\n                xml = cls.run_command(\n                    [\"info\", \"--xml\", location],\n                    show_stdout=False,\n                    stdout_only=True,\n                )\n                match = _svn_info_xml_url_re.search(xml)\n                assert match is not None\n                url = match.group(1)\n                revs = [int(m.group(1)) for m in _svn_info_xml_rev_re.finditer(xml)]\n            except InstallationError:\n                url, revs = None, []\n\n        if revs:\n            rev = max(revs)\n        else:\n            rev = 0\n\n        return url, rev\n\n    @classmethod\n    def is_commit_id_equal(cls, dest: str, name: Optional[str]) -> bool:\n        \"\"\"Always assume the versions don't match\"\"\"\n        return False\n\n    def __init__(self, use_interactive: Optional[bool] = None) -> None:\n        if use_interactive is None:\n            use_interactive = is_console_interactive()\n        self.use_interactive = use_interactive\n\n        # This member is used to cache the fetched version of the current\n        # ``svn`` client.\n        # Special value definitions:\n        #   None: Not evaluated yet.\n        #   Empty tuple: Could not parse version.\n        self._vcs_version: Optional[Tuple[int, ...]] = None\n\n        super().__init__()\n\n    def call_vcs_version(self) -> Tuple[int, ...]:\n        \"\"\"Query the version of the currently installed Subversion client.\n\n        :return: A tuple containing the parts of the version information or\n            ``()`` if the version returned from ``svn`` could not be parsed.\n        :raises: BadCommand: If ``svn`` is not installed.\n        \"\"\"\n        # Example versions:\n        #   svn, version 1.10.3 (r1842928)\n        #      compiled Feb 25 2019, 14:20:39 on x86_64-apple-darwin17.0.0\n        #   svn, version 1.7.14 (r1542130)\n        #      compiled Mar 28 2018, 08:49:13 on x86_64-pc-linux-gnu\n        #   svn, version 1.12.0-SlikSvn (SlikSvn/1.12.0)\n        #      compiled May 28 2019, 13:44:56 on x86_64-microsoft-windows6.2\n        version_prefix = \"svn, version \"\n        version = self.run_command([\"--version\"], show_stdout=False, stdout_only=True)\n        if not version.startswith(version_prefix):\n            return ()\n\n        version = version[len(version_prefix) :].split()[0]\n        version_list = version.partition(\"-\")[0].split(\".\")\n        try:\n            parsed_version = tuple(map(int, version_list))\n        except ValueError:\n            return ()\n\n        return parsed_version\n\n    def get_vcs_version(self) -> Tuple[int, ...]:\n        \"\"\"Return the version of the currently installed Subversion client.\n\n        If the version of the Subversion client has already been queried,\n        a cached value will be used.\n\n        :return: A tuple containing the parts of the version information or\n            ``()`` if the version returned from ``svn`` could not be parsed.\n        :raises: BadCommand: If ``svn`` is not installed.\n        \"\"\"\n        if self._vcs_version is not None:\n            # Use cached version, if available.\n            # If parsing the version failed previously (empty tuple),\n            # do not attempt to parse it again.\n            return self._vcs_version\n\n        vcs_version = self.call_vcs_version()\n        self._vcs_version = vcs_version\n        return vcs_version\n\n    def get_remote_call_options(self) -> CommandArgs:\n        \"\"\"Return options to be used on calls to Subversion that contact the server.\n\n        These options are applicable for the following ``svn`` subcommands used\n        in this class.\n\n            - checkout\n            - switch\n            - update\n\n        :return: A list of command line arguments to pass to ``svn``.\n        \"\"\"\n        if not self.use_interactive:\n            # --non-interactive switch is available since Subversion 0.14.4.\n            # Subversion < 1.8 runs in interactive mode by default.\n            return [\"--non-interactive\"]\n\n        svn_version = self.get_vcs_version()\n        # By default, Subversion >= 1.8 runs in non-interactive mode if\n        # stdin is not a TTY. Since that is how pip invokes SVN, in\n        # call_subprocess(), pip must pass --force-interactive to ensure\n        # the user can be prompted for a password, if required.\n        #   SVN added the --force-interactive option in SVN 1.8. Since\n        # e.g. RHEL/CentOS 7, which is supported until 2024, ships with\n        # SVN 1.7, pip should continue to support SVN 1.7. Therefore, pip\n        # can't safely add the option if the SVN version is < 1.8 (or unknown).\n        if svn_version >= (1, 8):\n            return [\"--force-interactive\"]\n\n        return []\n\n    def fetch_new(\n        self, dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int\n    ) -> None:\n        rev_display = rev_options.to_display()\n        logger.info(\n            \"Checking out %s%s to %s\",\n            url,\n            rev_display,\n            display_path(dest),\n        )\n        if verbosity <= 0:\n            flag = \"--quiet\"\n        else:\n            flag = \"\"\n        cmd_args = make_command(\n            \"checkout\",\n            flag,\n            self.get_remote_call_options(),\n            rev_options.to_args(),\n            url,\n            dest,\n        )\n        self.run_command(cmd_args)\n\n    def switch(self, dest: str, url: HiddenText, rev_options: RevOptions) -> None:\n        cmd_args = make_command(\n            \"switch\",\n            self.get_remote_call_options(),\n            rev_options.to_args(),\n            url,\n            dest,\n        )\n        self.run_command(cmd_args)\n\n    def update(self, dest: str, url: HiddenText, rev_options: RevOptions) -> None:\n        cmd_args = make_command(\n            \"update\",\n            self.get_remote_call_options(),\n            rev_options.to_args(),\n            dest,\n        )\n        self.run_command(cmd_args)\n\n\nvcs.register(Subversion)\n"},"hash":"Zbyn1sR5VR"}