{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:operations:build:wheel_legacy.py","body":"import logging\nimport os.path\nfrom typing import List, Optional\n\nfrom pip._internal.cli.spinners import open_spinner\nfrom pip._internal.utils.setuptools_build import make_setuptools_bdist_wheel_args\nfrom pip._internal.utils.subprocess import call_subprocess, format_command_args\n\nlogger = logging.getLogger(__name__)\n\n\ndef format_command_result(\n    command_args: List[str],\n    command_output: str,\n) -> str:\n    \"\"\"Format command information for logging.\"\"\"\n    command_desc = format_command_args(command_args)\n    text = f\"Command arguments: {command_desc}\\n\"\n\n    if not command_output:\n        text += \"Command output: None\"\n    elif logger.getEffectiveLevel() > logging.DEBUG:\n        text += \"Command output: [use --verbose to show]\"\n    else:\n        if not command_output.endswith(\"\\n\"):\n            command_output += \"\\n\"\n        text += f\"Command output:\\n{command_output}\"\n\n    return text\n\n\ndef get_legacy_build_wheel_path(\n    names: List[str],\n    temp_dir: str,\n    name: str,\n    command_args: List[str],\n    command_output: str,\n) -> Optional[str]:\n    \"\"\"Return the path to the wheel in the temporary build directory.\"\"\"\n    # Sort for determinism.\n    names = sorted(names)\n    if not names:\n        msg = (\"Legacy build of wheel for {!r} created no files.\\n\").format(name)\n        msg += format_command_result(command_args, command_output)\n        logger.warning(msg)\n        return None\n\n    if len(names) > 1:\n        msg = (\n            \"Legacy build of wheel for {!r} created more than one file.\\n\"\n            \"Filenames (choosing first): {}\\n\"\n        ).format(name, names)\n        msg += format_command_result(command_args, command_output)\n        logger.warning(msg)\n\n    return os.path.join(temp_dir, names[0])\n\n\ndef build_wheel_legacy(\n    name: str,\n    setup_py_path: str,\n    source_dir: str,\n    global_options: List[str],\n    build_options: List[str],\n    tempd: str,\n) -> Optional[str]:\n    \"\"\"Build one unpacked package using the \"legacy\" build process.\n\n    Returns path to wheel if successfully built. Otherwise, returns None.\n    \"\"\"\n    wheel_args = make_setuptools_bdist_wheel_args(\n        setup_py_path,\n        global_options=global_options,\n        build_options=build_options,\n        destination_dir=tempd,\n    )\n\n    spin_message = f\"Building wheel for {name} (setup.py)\"\n    with open_spinner(spin_message) as spinner:\n        logger.debug(\"Destination directory: %s\", tempd)\n\n        try:\n            output = call_subprocess(\n                wheel_args,\n                command_desc=\"python setup.py bdist_wheel\",\n                cwd=source_dir,\n                spinner=spinner,\n            )\n        except Exception:\n            spinner.finish(\"error\")\n            logger.error(\"Failed building wheel for %s\", name)\n            return None\n\n        names = os.listdir(tempd)\n        wheel_path = get_legacy_build_wheel_path(\n            names=names,\n            temp_dir=tempd,\n            name=name,\n            command_args=wheel_args,\n            command_output=output,\n        )\n        return wheel_path\n"},"hash":"pYCoaLYQVI"}