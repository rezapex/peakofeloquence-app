{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:network:auth.py","body":"\"\"\"Network Authentication Helpers\n\nContains interface (MultiDomainBasicAuth) and associated glue code for\nproviding credentials in the context of network requests.\n\"\"\"\nimport logging\nimport os\nimport shutil\nimport subprocess\nimport sysconfig\nimport typing\nimport urllib.parse\nfrom abc import ABC, abstractmethod\nfrom functools import lru_cache\nfrom os.path import commonprefix\nfrom pathlib import Path\nfrom typing import Any, Dict, List, NamedTuple, Optional, Tuple\n\nfrom pip._vendor.requests.auth import AuthBase, HTTPBasicAuth\nfrom pip._vendor.requests.models import Request, Response\nfrom pip._vendor.requests.utils import get_netrc_auth\n\nfrom pip._internal.utils.logging import getLogger\nfrom pip._internal.utils.misc import (\n    ask,\n    ask_input,\n    ask_password,\n    remove_auth_from_url,\n    split_auth_netloc_from_url,\n)\nfrom pip._internal.vcs.versioncontrol import AuthInfo\n\nlogger = getLogger(__name__)\n\nKEYRING_DISABLED = False\n\n\nclass Credentials(NamedTuple):\n    url: str\n    username: str\n    password: str\n\n\nclass KeyRingBaseProvider(ABC):\n    \"\"\"Keyring base provider interface\"\"\"\n\n    has_keyring: bool\n\n    @abstractmethod\n    def get_auth_info(self, url: str, username: Optional[str]) -> Optional[AuthInfo]:\n        ...\n\n    @abstractmethod\n    def save_auth_info(self, url: str, username: str, password: str) -> None:\n        ...\n\n\nclass KeyRingNullProvider(KeyRingBaseProvider):\n    \"\"\"Keyring null provider\"\"\"\n\n    has_keyring = False\n\n    def get_auth_info(self, url: str, username: Optional[str]) -> Optional[AuthInfo]:\n        return None\n\n    def save_auth_info(self, url: str, username: str, password: str) -> None:\n        return None\n\n\nclass KeyRingPythonProvider(KeyRingBaseProvider):\n    \"\"\"Keyring interface which uses locally imported `keyring`\"\"\"\n\n    has_keyring = True\n\n    def __init__(self) -> None:\n        import keyring\n\n        self.keyring = keyring\n\n    def get_auth_info(self, url: str, username: Optional[str]) -> Optional[AuthInfo]:\n        # Support keyring's get_credential interface which supports getting\n        # credentials without a username. This is only available for\n        # keyring>=15.2.0.\n        if hasattr(self.keyring, \"get_credential\"):\n            logger.debug(\"Getting credentials from keyring for %s\", url)\n            cred = self.keyring.get_credential(url, username)\n            if cred is not None:\n                return cred.username, cred.password\n            return None\n\n        if username is not None:\n            logger.debug(\"Getting password from keyring for %s\", url)\n            password = self.keyring.get_password(url, username)\n            if password:\n                return username, password\n        return None\n\n    def save_auth_info(self, url: str, username: str, password: str) -> None:\n        self.keyring.set_password(url, username, password)\n\n\nclass KeyRingCliProvider(KeyRingBaseProvider):\n    \"\"\"Provider which uses `keyring` cli\n\n    Instead of calling the keyring package installed alongside pip\n    we call keyring on the command line which will enable pip to\n    use which ever installation of keyring is available first in\n    PATH.\n    \"\"\"\n\n    has_keyring = True\n\n    def __init__(self, cmd: str) -> None:\n        self.keyring = cmd\n\n    def get_auth_info(self, url: str, username: Optional[str]) -> Optional[AuthInfo]:\n        # This is the default implementation of keyring.get_credential\n        # https://github.com/jaraco/keyring/blob/97689324abcf01bd1793d49063e7ca01e03d7d07/keyring/backend.py#L134-L139\n        if username is not None:\n            password = self._get_password(url, username)\n            if password is not None:\n                return username, password\n        return None\n\n    def save_auth_info(self, url: str, username: str, password: str) -> None:\n        return self._set_password(url, username, password)\n\n    def _get_password(self, service_name: str, username: str) -> Optional[str]:\n        \"\"\"Mirror the implementation of keyring.get_password using cli\"\"\"\n        if self.keyring is None:\n            return None\n\n        cmd = [self.keyring, \"get\", service_name, username]\n        env = os.environ.copy()\n        env[\"PYTHONIOENCODING\"] = \"utf-8\"\n        res = subprocess.run(\n            cmd,\n            stdin=subprocess.DEVNULL,\n            stdout=subprocess.PIPE,\n            env=env,\n        )\n        if res.returncode:\n            return None\n        return res.stdout.decode(\"utf-8\").strip(os.linesep)\n\n    def _set_password(self, service_name: str, username: str, password: str) -> None:\n        \"\"\"Mirror the implementation of keyring.set_password using cli\"\"\"\n        if self.keyring is None:\n            return None\n        env = os.environ.copy()\n        env[\"PYTHONIOENCODING\"] = \"utf-8\"\n        subprocess.run(\n            [self.keyring, \"set\", service_name, username],\n            input=f\"{password}{os.linesep}\".encode(\"utf-8\"),\n            env=env,\n            check=True,\n        )\n        return None\n\n\n@lru_cache(maxsize=None)\ndef get_keyring_provider(provider: str) -> KeyRingBaseProvider:\n    logger.verbose(\"Keyring provider requested: %s\", provider)\n\n    # keyring has previously failed and been disabled\n    if KEYRING_DISABLED:\n        provider = \"disabled\"\n    if provider in [\"import\", \"auto\"]:\n        try:\n            impl = KeyRingPythonProvider()\n            logger.verbose(\"Keyring provider set: import\")\n            return impl\n        except ImportError:\n            pass\n        except Exception as exc:\n            # In the event of an unexpected exception\n            # we should warn the user\n            msg = \"Installed copy of keyring fails with exception %s\"\n            if provider == \"auto\":\n                msg = msg + \", trying to find a keyring executable as a fallback\"\n            logger.warning(msg, exc, exc_info=logger.isEnabledFor(logging.DEBUG))\n    if provider in [\"subprocess\", \"auto\"]:\n        cli = shutil.which(\"keyring\")\n        if cli and cli.startswith(sysconfig.get_path(\"scripts\")):\n            # all code within this function is stolen from shutil.which implementation\n            @typing.no_type_check\n            def PATH_as_shutil_which_determines_it() -> str:\n                path = os.environ.get(\"PATH\", None)\n                if path is None:\n                    try:\n                        path = os.confstr(\"CS_PATH\")\n                    except (AttributeError, ValueError):\n                        # os.confstr() or CS_PATH is not available\n                        path = os.defpath\n                # bpo-35755: Don't use os.defpath if the PATH environment variable is\n                # set to an empty string\n\n                return path\n\n            scripts = Path(sysconfig.get_path(\"scripts\"))\n\n            paths = []\n            for path in PATH_as_shutil_which_determines_it().split(os.pathsep):\n                p = Path(path)\n                try:\n                    if not p.samefile(scripts):\n                        paths.append(path)\n                except FileNotFoundError:\n                    pass\n\n            path = os.pathsep.join(paths)\n\n            cli = shutil.which(\"keyring\", path=path)\n\n        if cli:\n            logger.verbose(\"Keyring provider set: subprocess with executable %s\", cli)\n            return KeyRingCliProvider(cli)\n\n    logger.verbose(\"Keyring provider set: disabled\")\n    return KeyRingNullProvider()\n\n\nclass MultiDomainBasicAuth(AuthBase):\n    def __init__(\n        self,\n        prompting: bool = True,\n        index_urls: Optional[List[str]] = None,\n        keyring_provider: str = \"auto\",\n    ) -> None:\n        self.prompting = prompting\n        self.index_urls = index_urls\n        self.keyring_provider = keyring_provider  # type: ignore[assignment]\n        self.passwords: Dict[str, AuthInfo] = {}\n        # When the user is prompted to enter credentials and keyring is\n        # available, we will offer to save them. If the user accepts,\n        # this value is set to the credentials they entered. After the\n        # request authenticates, the caller should call\n        # ``save_credentials`` to save these.\n        self._credentials_to_save: Optional[Credentials] = None\n\n    @property\n    def keyring_provider(self) -> KeyRingBaseProvider:\n        return get_keyring_provider(self._keyring_provider)\n\n    @keyring_provider.setter\n    def keyring_provider(self, provider: str) -> None:\n        # The free function get_keyring_provider has been decorated with\n        # functools.cache. If an exception occurs in get_keyring_auth that\n        # cache will be cleared and keyring disabled, take that into account\n        # if you want to remove this indirection.\n        self._keyring_provider = provider\n\n    @property\n    def use_keyring(self) -> bool:\n        # We won't use keyring when --no-input is passed unless\n        # a specific provider is requested because it might require\n        # user interaction\n        return self.prompting or self._keyring_provider not in [\"auto\", \"disabled\"]\n\n    def _get_keyring_auth(\n        self,\n        url: Optional[str],\n        username: Optional[str],\n    ) -> Optional[AuthInfo]:\n        \"\"\"Return the tuple auth for a given url from keyring.\"\"\"\n        # Do nothing if no url was provided\n        if not url:\n            return None\n\n        try:\n            return self.keyring_provider.get_auth_info(url, username)\n        except Exception as exc:\n            logger.warning(\n                \"Keyring is skipped due to an exception: %s\",\n                str(exc),\n            )\n            global KEYRING_DISABLED\n            KEYRING_DISABLED = True\n            get_keyring_provider.cache_clear()\n            return None\n\n    def _get_index_url(self, url: str) -> Optional[str]:\n        \"\"\"Return the original index URL matching the requested URL.\n\n        Cached or dynamically generated credentials may work against\n        the original index URL rather than just the netloc.\n\n        The provided url should have had its username and password\n        removed already. If the original index url had credentials then\n        they will be included in the return value.\n\n        Returns None if no matching index was found, or if --no-index\n        was specified by the user.\n        \"\"\"\n        if not url or not self.index_urls:\n            return None\n\n        url = remove_auth_from_url(url).rstrip(\"/\") + \"/\"\n        parsed_url = urllib.parse.urlsplit(url)\n\n        candidates = []\n\n        for index in self.index_urls:\n            index = index.rstrip(\"/\") + \"/\"\n            parsed_index = urllib.parse.urlsplit(remove_auth_from_url(index))\n            if parsed_url == parsed_index:\n                return index\n\n            if parsed_url.netloc != parsed_index.netloc:\n                continue\n\n            candidate = urllib.parse.urlsplit(index)\n            candidates.append(candidate)\n\n        if not candidates:\n            return None\n\n        candidates.sort(\n            reverse=True,\n            key=lambda candidate: commonprefix(\n                [\n                    parsed_url.path,\n                    candidate.path,\n                ]\n            ).rfind(\"/\"),\n        )\n\n        return urllib.parse.urlunsplit(candidates[0])\n\n    def _get_new_credentials(\n        self,\n        original_url: str,\n        *,\n        allow_netrc: bool = True,\n        allow_keyring: bool = False,\n    ) -> AuthInfo:\n        \"\"\"Find and return credentials for the specified URL.\"\"\"\n        # Split the credentials and netloc from the url.\n        url, netloc, url_user_password = split_auth_netloc_from_url(\n            original_url,\n        )\n\n        # Start with the credentials embedded in the url\n        username, password = url_user_password\n        if username is not None and password is not None:\n            logger.debug(\"Found credentials in url for %s\", netloc)\n            return url_user_password\n\n        # Find a matching index url for this request\n        index_url = self._get_index_url(url)\n        if index_url:\n            # Split the credentials from the url.\n            index_info = split_auth_netloc_from_url(index_url)\n            if index_info:\n                index_url, _, index_url_user_password = index_info\n                logger.debug(\"Found index url %s\", index_url)\n\n        # If an index URL was found, try its embedded credentials\n        if index_url and index_url_user_password[0] is not None:\n            username, password = index_url_user_password\n            if username is not None and password is not None:\n                logger.debug(\"Found credentials in index url for %s\", netloc)\n                return index_url_user_password\n\n        # Get creds from netrc if we still don't have them\n        if allow_netrc:\n            netrc_auth = get_netrc_auth(original_url)\n            if netrc_auth:\n                logger.debug(\"Found credentials in netrc for %s\", netloc)\n                return netrc_auth\n\n        # If we don't have a password and keyring is available, use it.\n        if allow_keyring:\n            # The index url is more specific than the netloc, so try it first\n            # fmt: off\n            kr_auth = (\n                self._get_keyring_auth(index_url, username) or\n                self._get_keyring_auth(netloc, username)\n            )\n            # fmt: on\n            if kr_auth:\n                logger.debug(\"Found credentials in keyring for %s\", netloc)\n                return kr_auth\n\n        return username, password\n\n    def _get_url_and_credentials(\n        self, original_url: str\n    ) -> Tuple[str, Optional[str], Optional[str]]:\n        \"\"\"Return the credentials to use for the provided URL.\n\n        If allowed, netrc and keyring may be used to obtain the\n        correct credentials.\n\n        Returns (url_without_credentials, username, password). Note\n        that even if the original URL contains credentials, this\n        function may return a different username and password.\n        \"\"\"\n        url, netloc, _ = split_auth_netloc_from_url(original_url)\n\n        # Try to get credentials from original url\n        username, password = self._get_new_credentials(original_url)\n\n        # If credentials not found, use any stored credentials for this netloc.\n        # Do this if either the username or the password is missing.\n        # This accounts for the situation in which the user has specified\n        # the username in the index url, but the password comes from keyring.\n        if (username is None or password is None) and netloc in self.passwords:\n            un, pw = self.passwords[netloc]\n            # It is possible that the cached credentials are for a different username,\n            # in which case the cache should be ignored.\n            if username is None or username == un:\n                username, password = un, pw\n\n        if username is not None or password is not None:\n            # Convert the username and password if they're None, so that\n            # this netloc will show up as \"cached\" in the conditional above.\n            # Further, HTTPBasicAuth doesn't accept None, so it makes sense to\n            # cache the value that is going to be used.\n            username = username or \"\"\n            password = password or \"\"\n\n            # Store any acquired credentials.\n            self.passwords[netloc] = (username, password)\n\n        assert (\n            # Credentials were found\n            (username is not None and password is not None)\n            # Credentials were not found\n            or (username is None and password is None)\n        ), f\"Could not load credentials from url: {original_url}\"\n\n        return url, username, password\n\n    def __call__(self, req: Request) -> Request:\n        # Get credentials for this request\n        url, username, password = self._get_url_and_credentials(req.url)\n\n        # Set the url of the request to the url without any credentials\n        req.url = url\n\n        if username is not None and password is not None:\n            # Send the basic auth with this request\n            req = HTTPBasicAuth(username, password)(req)\n\n        # Attach a hook to handle 401 responses\n        req.register_hook(\"response\", self.handle_401)\n\n        return req\n\n    # Factored out to allow for easy patching in tests\n    def _prompt_for_password(\n        self, netloc: str\n    ) -> Tuple[Optional[str], Optional[str], bool]:\n        username = ask_input(f\"User for {netloc}: \") if self.prompting else None\n        if not username:\n            return None, None, False\n        if self.use_keyring:\n            auth = self._get_keyring_auth(netloc, username)\n            if auth and auth[0] is not None and auth[1] is not None:\n                return auth[0], auth[1], False\n        password = ask_password(\"Password: \")\n        return username, password, True\n\n    # Factored out to allow for easy patching in tests\n    def _should_save_password_to_keyring(self) -> bool:\n        if (\n            not self.prompting\n            or not self.use_keyring\n            or not self.keyring_provider.has_keyring\n        ):\n            return False\n        return ask(\"Save credentials to keyring [y/N]: \", [\"y\", \"n\"]) == \"y\"\n\n    def handle_401(self, resp: Response, **kwargs: Any) -> Response:\n        # We only care about 401 responses, anything else we want to just\n        #   pass through the actual response\n        if resp.status_code != 401:\n            return resp\n\n        username, password = None, None\n\n        # Query the keyring for credentials:\n        if self.use_keyring:\n            username, password = self._get_new_credentials(\n                resp.url,\n                allow_netrc=False,\n                allow_keyring=True,\n            )\n\n        # We are not able to prompt the user so simply return the response\n        if not self.prompting and not username and not password:\n            return resp\n\n        parsed = urllib.parse.urlparse(resp.url)\n\n        # Prompt the user for a new username and password\n        save = False\n        if not username and not password:\n            username, password, save = self._prompt_for_password(parsed.netloc)\n\n        # Store the new username and password to use for future requests\n        self._credentials_to_save = None\n        if username is not None and password is not None:\n            self.passwords[parsed.netloc] = (username, password)\n\n            # Prompt to save the password to keyring\n            if save and self._should_save_password_to_keyring():\n                self._credentials_to_save = Credentials(\n                    url=parsed.netloc,\n                    username=username,\n                    password=password,\n                )\n\n        # Consume content and release the original connection to allow our new\n        #   request to reuse the same one.\n        # The result of the assignment isn't used, it's just needed to consume\n        # the content.\n        _ = resp.content\n        resp.raw.release_conn()\n\n        # Add our new username and password to the request\n        req = HTTPBasicAuth(username or \"\", password or \"\")(resp.request)\n        req.register_hook(\"response\", self.warn_on_401)\n\n        # On successful request, save the credentials that were used to\n        # keyring. (Note that if the user responded \"no\" above, this member\n        # is not set and nothing will be saved.)\n        if self._credentials_to_save:\n            req.register_hook(\"response\", self.save_credentials)\n\n        # Send our new request\n        new_resp = resp.connection.send(req, **kwargs)\n        new_resp.history.append(resp)\n\n        return new_resp\n\n    def warn_on_401(self, resp: Response, **kwargs: Any) -> None:\n        \"\"\"Response callback to warn about incorrect credentials.\"\"\"\n        if resp.status_code == 401:\n            logger.warning(\n                \"401 Error, Credentials not correct for %s\",\n                resp.request.url,\n            )\n\n    def save_credentials(self, resp: Response, **kwargs: Any) -> None:\n        \"\"\"Response callback to save credentials on success.\"\"\"\n        assert (\n            self.keyring_provider.has_keyring\n        ), \"should never reach here without keyring\"\n\n        creds = self._credentials_to_save\n        self._credentials_to_save = None\n        if creds and resp.status_code < 400:\n            try:\n                logger.info(\"Saving credentials to keyring\")\n                self.keyring_provider.save_auth_info(\n                    creds.url, creds.username, creds.password\n                )\n            except Exception:\n                logger.exception(\"Failed to save credentials\")\n"},"hash":"pHU5OwyQtw"}