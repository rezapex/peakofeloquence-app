{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:models:target_python.py","body":"import sys\nfrom typing import List, Optional, Set, Tuple\n\nfrom pip._vendor.packaging.tags import Tag\n\nfrom pip._internal.utils.compatibility_tags import get_supported, version_info_to_nodot\nfrom pip._internal.utils.misc import normalize_version_info\n\n\nclass TargetPython:\n\n    \"\"\"\n    Encapsulates the properties of a Python interpreter one is targeting\n    for a package install, download, etc.\n    \"\"\"\n\n    __slots__ = [\n        \"_given_py_version_info\",\n        \"abis\",\n        \"implementation\",\n        \"platforms\",\n        \"py_version\",\n        \"py_version_info\",\n        \"_valid_tags\",\n        \"_valid_tags_set\",\n    ]\n\n    def __init__(\n        self,\n        platforms: Optional[List[str]] = None,\n        py_version_info: Optional[Tuple[int, ...]] = None,\n        abis: Optional[List[str]] = None,\n        implementation: Optional[str] = None,\n    ) -> None:\n        \"\"\"\n        :param platforms: A list of strings or None. If None, searches for\n            packages that are supported by the current system. Otherwise, will\n            find packages that can be built on the platforms passed in. These\n            packages will only be downloaded for distribution: they will\n            not be built locally.\n        :param py_version_info: An optional tuple of ints representing the\n            Python version information to use (e.g. `sys.version_info[:3]`).\n            This can have length 1, 2, or 3 when provided.\n        :param abis: A list of strings or None. This is passed to\n            compatibility_tags.py's get_supported() function as is.\n        :param implementation: A string or None. This is passed to\n            compatibility_tags.py's get_supported() function as is.\n        \"\"\"\n        # Store the given py_version_info for when we call get_supported().\n        self._given_py_version_info = py_version_info\n\n        if py_version_info is None:\n            py_version_info = sys.version_info[:3]\n        else:\n            py_version_info = normalize_version_info(py_version_info)\n\n        py_version = \".\".join(map(str, py_version_info[:2]))\n\n        self.abis = abis\n        self.implementation = implementation\n        self.platforms = platforms\n        self.py_version = py_version\n        self.py_version_info = py_version_info\n\n        # This is used to cache the return value of get_(un)sorted_tags.\n        self._valid_tags: Optional[List[Tag]] = None\n        self._valid_tags_set: Optional[Set[Tag]] = None\n\n    def format_given(self) -> str:\n        \"\"\"\n        Format the given, non-None attributes for display.\n        \"\"\"\n        display_version = None\n        if self._given_py_version_info is not None:\n            display_version = \".\".join(\n                str(part) for part in self._given_py_version_info\n            )\n\n        key_values = [\n            (\"platforms\", self.platforms),\n            (\"version_info\", display_version),\n            (\"abis\", self.abis),\n            (\"implementation\", self.implementation),\n        ]\n        return \" \".join(\n            f\"{key}={value!r}\" for key, value in key_values if value is not None\n        )\n\n    def get_sorted_tags(self) -> List[Tag]:\n        \"\"\"\n        Return the supported PEP 425 tags to check wheel candidates against.\n\n        The tags are returned in order of preference (most preferred first).\n        \"\"\"\n        if self._valid_tags is None:\n            # Pass versions=None if no py_version_info was given since\n            # versions=None uses special default logic.\n            py_version_info = self._given_py_version_info\n            if py_version_info is None:\n                version = None\n            else:\n                version = version_info_to_nodot(py_version_info)\n\n            tags = get_supported(\n                version=version,\n                platforms=self.platforms,\n                abis=self.abis,\n                impl=self.implementation,\n            )\n            self._valid_tags = tags\n\n        return self._valid_tags\n\n    def get_unsorted_tags(self) -> Set[Tag]:\n        \"\"\"Exactly the same as get_sorted_tags, but returns a set.\n\n        This is important for performance.\n        \"\"\"\n        if self._valid_tags_set is None:\n            self._valid_tags_set = set(self.get_sorted_tags())\n\n        return self._valid_tags_set\n"},"hash":"KHh4s46wQE"}