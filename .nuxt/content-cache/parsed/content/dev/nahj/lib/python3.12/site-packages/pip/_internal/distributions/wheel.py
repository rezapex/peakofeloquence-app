{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:distributions:wheel.py","body":"from typing import Optional\n\nfrom pip._vendor.packaging.utils import canonicalize_name\n\nfrom pip._internal.distributions.base import AbstractDistribution\nfrom pip._internal.index.package_finder import PackageFinder\nfrom pip._internal.metadata import (\n    BaseDistribution,\n    FilesystemWheel,\n    get_wheel_distribution,\n)\n\n\nclass WheelDistribution(AbstractDistribution):\n    \"\"\"Represents a wheel distribution.\n\n    This does not need any preparation as wheels can be directly unpacked.\n    \"\"\"\n\n    @property\n    def build_tracker_id(self) -> Optional[str]:\n        return None\n\n    def get_metadata_distribution(self) -> BaseDistribution:\n        \"\"\"Loads the metadata from the wheel file into memory and returns a\n        Distribution that uses it, not relying on the wheel file or\n        requirement.\n        \"\"\"\n        assert self.req.local_file_path, \"Set as part of preparation during download\"\n        assert self.req.name, \"Wheels are never unnamed\"\n        wheel = FilesystemWheel(self.req.local_file_path)\n        return get_wheel_distribution(wheel, canonicalize_name(self.req.name))\n\n    def prepare_distribution_metadata(\n        self,\n        finder: PackageFinder,\n        build_isolation: bool,\n        check_build_deps: bool,\n    ) -> None:\n        pass\n"},"hash":"NF3mlhSsNO"}