{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:colorama:tests:winterm_test.py","body":"# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.\nimport sys\nfrom unittest import TestCase, main, skipUnless\n\ntry:\n    from unittest.mock import Mock, patch\nexcept ImportError:\n    from mock import Mock, patch\n\nfrom ..winterm import WinColor, WinStyle, WinTerm\n\n\nclass WinTermTest(TestCase):\n\n    @patch('colorama.winterm.win32')\n    def testInit(self, mockWin32):\n        mockAttr = Mock()\n        mockAttr.wAttributes = 7 + 6 * 16 + 8\n        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr\n        term = WinTerm()\n        self.assertEqual(term._fore, 7)\n        self.assertEqual(term._back, 6)\n        self.assertEqual(term._style, 8)\n\n    @skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")\n    def testGetAttrs(self):\n        term = WinTerm()\n\n        term._fore = 0\n        term._back = 0\n        term._style = 0\n        self.assertEqual(term.get_attrs(), 0)\n\n        term._fore = WinColor.YELLOW\n        self.assertEqual(term.get_attrs(), WinColor.YELLOW)\n\n        term._back = WinColor.MAGENTA\n        self.assertEqual(\n            term.get_attrs(),\n            WinColor.YELLOW + WinColor.MAGENTA * 16)\n\n        term._style = WinStyle.BRIGHT\n        self.assertEqual(\n            term.get_attrs(),\n            WinColor.YELLOW + WinColor.MAGENTA * 16 + WinStyle.BRIGHT)\n\n    @patch('colorama.winterm.win32')\n    def testResetAll(self, mockWin32):\n        mockAttr = Mock()\n        mockAttr.wAttributes = 1 + 2 * 16 + 8\n        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr\n        term = WinTerm()\n\n        term.set_console = Mock()\n        term._fore = -1\n        term._back = -1\n        term._style = -1\n\n        term.reset_all()\n\n        self.assertEqual(term._fore, 1)\n        self.assertEqual(term._back, 2)\n        self.assertEqual(term._style, 8)\n        self.assertEqual(term.set_console.called, True)\n\n    @skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")\n    def testFore(self):\n        term = WinTerm()\n        term.set_console = Mock()\n        term._fore = 0\n\n        term.fore(5)\n\n        self.assertEqual(term._fore, 5)\n        self.assertEqual(term.set_console.called, True)\n\n    @skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")\n    def testBack(self):\n        term = WinTerm()\n        term.set_console = Mock()\n        term._back = 0\n\n        term.back(5)\n\n        self.assertEqual(term._back, 5)\n        self.assertEqual(term.set_console.called, True)\n\n    @skipUnless(sys.platform.startswith(\"win\"), \"requires Windows\")\n    def testStyle(self):\n        term = WinTerm()\n        term.set_console = Mock()\n        term._style = 0\n\n        term.style(22)\n\n        self.assertEqual(term._style, 22)\n        self.assertEqual(term.set_console.called, True)\n\n    @patch('colorama.winterm.win32')\n    def testSetConsole(self, mockWin32):\n        mockAttr = Mock()\n        mockAttr.wAttributes = 0\n        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr\n        term = WinTerm()\n        term.windll = Mock()\n\n        term.set_console()\n\n        self.assertEqual(\n            mockWin32.SetConsoleTextAttribute.call_args,\n            ((mockWin32.STDOUT, term.get_attrs()), {})\n        )\n\n    @patch('colorama.winterm.win32')\n    def testSetConsoleOnStderr(self, mockWin32):\n        mockAttr = Mock()\n        mockAttr.wAttributes = 0\n        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr\n        term = WinTerm()\n        term.windll = Mock()\n\n        term.set_console(on_stderr=True)\n\n        self.assertEqual(\n            mockWin32.SetConsoleTextAttribute.call_args,\n            ((mockWin32.STDERR, term.get_attrs()), {})\n        )\n\n\nif __name__ == '__main__':\n    main()\n"},"hash":"woc4Lx71HW"}