{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:cli:progress_bars.py","body":"import functools\nfrom typing import Callable, Generator, Iterable, Iterator, Optional, Tuple\n\nfrom pip._vendor.rich.progress import (\n    BarColumn,\n    DownloadColumn,\n    FileSizeColumn,\n    Progress,\n    ProgressColumn,\n    SpinnerColumn,\n    TextColumn,\n    TimeElapsedColumn,\n    TimeRemainingColumn,\n    TransferSpeedColumn,\n)\n\nfrom pip._internal.utils.logging import get_indentation\n\nDownloadProgressRenderer = Callable[[Iterable[bytes]], Iterator[bytes]]\n\n\ndef _rich_progress_bar(\n    iterable: Iterable[bytes],\n    *,\n    bar_type: str,\n    size: int,\n) -> Generator[bytes, None, None]:\n    assert bar_type == \"on\", \"This should only be used in the default mode.\"\n\n    if not size:\n        total = float(\"inf\")\n        columns: Tuple[ProgressColumn, ...] = (\n            TextColumn(\"[progress.description]{task.description}\"),\n            SpinnerColumn(\"line\", speed=1.5),\n            FileSizeColumn(),\n            TransferSpeedColumn(),\n            TimeElapsedColumn(),\n        )\n    else:\n        total = size\n        columns = (\n            TextColumn(\"[progress.description]{task.description}\"),\n            BarColumn(),\n            DownloadColumn(),\n            TransferSpeedColumn(),\n            TextColumn(\"eta\"),\n            TimeRemainingColumn(),\n        )\n\n    progress = Progress(*columns, refresh_per_second=30)\n    task_id = progress.add_task(\" \" * (get_indentation() + 2), total=total)\n    with progress:\n        for chunk in iterable:\n            yield chunk\n            progress.update(task_id, advance=len(chunk))\n\n\ndef get_download_progress_renderer(\n    *, bar_type: str, size: Optional[int] = None\n) -> DownloadProgressRenderer:\n    \"\"\"Get an object that can be used to render the download progress.\n\n    Returns a callable, that takes an iterable to \"wrap\".\n    \"\"\"\n    if bar_type == \"on\":\n        return functools.partial(_rich_progress_bar, bar_type=bar_type, size=size)\n    else:\n        return iter  # no-op, when passed an iterator\n"},"hash":"mfBER1QdLg"}