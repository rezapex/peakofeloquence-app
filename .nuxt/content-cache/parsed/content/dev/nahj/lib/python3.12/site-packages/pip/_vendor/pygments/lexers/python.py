{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:lexers:python.py","body":"\"\"\"\n    pygments.lexers.python\n    ~~~~~~~~~~~~~~~~~~~~~~\n\n    Lexers for Python and related languages.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport re\nimport keyword\n\nfrom pip._vendor.pygments.lexer import DelegatingLexer, Lexer, RegexLexer, include, \\\n    bygroups, using, default, words, combined, do_insertions, this, line_re\nfrom pip._vendor.pygments.util import get_bool_opt, shebang_matches\nfrom pip._vendor.pygments.token import Text, Comment, Operator, Keyword, Name, String, \\\n    Number, Punctuation, Generic, Other, Error, Whitespace\nfrom pip._vendor.pygments import unistring as uni\n\n__all__ = ['PythonLexer', 'PythonConsoleLexer', 'PythonTracebackLexer',\n           'Python2Lexer', 'Python2TracebackLexer',\n           'CythonLexer', 'DgLexer', 'NumPyLexer']\n\n\nclass PythonLexer(RegexLexer):\n    \"\"\"\n    For Python source code (version 3.x).\n\n    .. versionadded:: 0.10\n\n    .. versionchanged:: 2.5\n       This is now the default ``PythonLexer``.  It is still available as the\n       alias ``Python3Lexer``.\n    \"\"\"\n\n    name = 'Python'\n    url = 'http://www.python.org'\n    aliases = ['python', 'py', 'sage', 'python3', 'py3']\n    filenames = [\n        '*.py',\n        '*.pyw',\n        # Type stubs\n        '*.pyi',\n        # Jython\n        '*.jy',\n        # Sage\n        '*.sage',\n        # SCons\n        '*.sc',\n        'SConstruct',\n        'SConscript',\n        # Skylark/Starlark (used by Bazel, Buck, and Pants)\n        '*.bzl',\n        'BUCK',\n        'BUILD',\n        'BUILD.bazel',\n        'WORKSPACE',\n        # Twisted Application infrastructure\n        '*.tac',\n    ]\n    mimetypes = ['text/x-python', 'application/x-python',\n                 'text/x-python3', 'application/x-python3']\n\n    uni_name = \"[%s][%s]*\" % (uni.xid_start, uni.xid_continue)\n\n    def innerstring_rules(ttype):\n        return [\n            # the old style '%s' % (...) string formatting (still valid in Py3)\n            (r'%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?'\n             '[hlL]?[E-GXc-giorsaux%]', String.Interpol),\n            # the new style '{}'.format(...) string formatting\n            (r'\\{'\n             r'((\\w+)((\\.\\w+)|(\\[[^\\]]+\\]))*)?'  # field name\n             r'(\\![sra])?'                       # conversion\n             r'(\\:(.?[<>=\\^])?[-+ ]?#?0?(\\d+)?,?(\\.\\d+)?[E-GXb-gnosx%]?)?'\n             r'\\}', String.Interpol),\n\n            # backslashes, quotes and formatting signs must be parsed one at a time\n            (r'[^\\\\\\'\"%{\\n]+', ttype),\n            (r'[\\'\"\\\\]', ttype),\n            # unhandled string formatting sign\n            (r'%|(\\{{1,2})', ttype)\n            # newlines are an error (use \"nl\" state)\n        ]\n\n    def fstring_rules(ttype):\n        return [\n            # Assuming that a '}' is the closing brace after format specifier.\n            # Sadly, this means that we won't detect syntax error. But it's\n            # more important to parse correct syntax correctly, than to\n            # highlight invalid syntax.\n            (r'\\}', String.Interpol),\n            (r'\\{', String.Interpol, 'expr-inside-fstring'),\n            # backslashes, quotes and formatting signs must be parsed one at a time\n            (r'[^\\\\\\'\"{}\\n]+', ttype),\n            (r'[\\'\"\\\\]', ttype),\n            # newlines are an error (use \"nl\" state)\n        ]\n\n    tokens = {\n        'root': [\n            (r'\\n', Whitespace),\n            (r'^(\\s*)([rRuUbB]{,2})(\"\"\"(?:.|\\n)*?\"\"\")',\n             bygroups(Whitespace, String.Affix, String.Doc)),\n            (r\"^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')\",\n             bygroups(Whitespace, String.Affix, String.Doc)),\n            (r'\\A#!.+$', Comment.Hashbang),\n            (r'#.*$', Comment.Single),\n            (r'\\\\\\n', Text),\n            (r'\\\\', Text),\n            include('keywords'),\n            include('soft-keywords'),\n            (r'(def)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'funcname'),\n            (r'(class)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'classname'),\n            (r'(from)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text),\n             'fromimport'),\n            (r'(import)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text),\n             'import'),\n            include('expr'),\n        ],\n        'expr': [\n            # raw f-strings\n            ('(?i)(rf|fr)(\"\"\")',\n             bygroups(String.Affix, String.Double),\n             combined('rfstringescape', 'tdqf')),\n            (\"(?i)(rf|fr)(''')\",\n             bygroups(String.Affix, String.Single),\n             combined('rfstringescape', 'tsqf')),\n            ('(?i)(rf|fr)(\")',\n             bygroups(String.Affix, String.Double),\n             combined('rfstringescape', 'dqf')),\n            (\"(?i)(rf|fr)(')\",\n             bygroups(String.Affix, String.Single),\n             combined('rfstringescape', 'sqf')),\n            # non-raw f-strings\n            ('([fF])(\"\"\")', bygroups(String.Affix, String.Double),\n             combined('fstringescape', 'tdqf')),\n            (\"([fF])(''')\", bygroups(String.Affix, String.Single),\n             combined('fstringescape', 'tsqf')),\n            ('([fF])(\")', bygroups(String.Affix, String.Double),\n             combined('fstringescape', 'dqf')),\n            (\"([fF])(')\", bygroups(String.Affix, String.Single),\n             combined('fstringescape', 'sqf')),\n            # raw bytes and strings\n            ('(?i)(rb|br|r)(\"\"\")',\n             bygroups(String.Affix, String.Double), 'tdqs'),\n            (\"(?i)(rb|br|r)(''')\",\n             bygroups(String.Affix, String.Single), 'tsqs'),\n            ('(?i)(rb|br|r)(\")',\n             bygroups(String.Affix, String.Double), 'dqs'),\n            (\"(?i)(rb|br|r)(')\",\n             bygroups(String.Affix, String.Single), 'sqs'),\n            # non-raw strings\n            ('([uU]?)(\"\"\")', bygroups(String.Affix, String.Double),\n             combined('stringescape', 'tdqs')),\n            (\"([uU]?)(''')\", bygroups(String.Affix, String.Single),\n             combined('stringescape', 'tsqs')),\n            ('([uU]?)(\")', bygroups(String.Affix, String.Double),\n             combined('stringescape', 'dqs')),\n            (\"([uU]?)(')\", bygroups(String.Affix, String.Single),\n             combined('stringescape', 'sqs')),\n            # non-raw bytes\n            ('([bB])(\"\"\")', bygroups(String.Affix, String.Double),\n             combined('bytesescape', 'tdqs')),\n            (\"([bB])(''')\", bygroups(String.Affix, String.Single),\n             combined('bytesescape', 'tsqs')),\n            ('([bB])(\")', bygroups(String.Affix, String.Double),\n             combined('bytesescape', 'dqs')),\n            (\"([bB])(')\", bygroups(String.Affix, String.Single),\n             combined('bytesescape', 'sqs')),\n\n            (r'[^\\S\\n]+', Text),\n            include('numbers'),\n            (r'!=|==|<<|>>|:=|[-~+/*%=<>&^|.]', Operator),\n            (r'[]{}:(),;[]', Punctuation),\n            (r'(in|is|and|or|not)\\b', Operator.Word),\n            include('expr-keywords'),\n            include('builtins'),\n            include('magicfuncs'),\n            include('magicvars'),\n            include('name'),\n        ],\n        'expr-inside-fstring': [\n            (r'[{([]', Punctuation, 'expr-inside-fstring-inner'),\n            # without format specifier\n            (r'(=\\s*)?'         # debug (https://bugs.python.org/issue36817)\n             r'(\\![sraf])?'     # conversion\n             r'\\}', String.Interpol, '#pop'),\n            # with format specifier\n            # we'll catch the remaining '}' in the outer scope\n            (r'(=\\s*)?'         # debug (https://bugs.python.org/issue36817)\n             r'(\\![sraf])?'     # conversion\n             r':', String.Interpol, '#pop'),\n            (r'\\s+', Whitespace),  # allow new lines\n            include('expr'),\n        ],\n        'expr-inside-fstring-inner': [\n            (r'[{([]', Punctuation, 'expr-inside-fstring-inner'),\n            (r'[])}]', Punctuation, '#pop'),\n            (r'\\s+', Whitespace),  # allow new lines\n            include('expr'),\n        ],\n        'expr-keywords': [\n            # Based on https://docs.python.org/3/reference/expressions.html\n            (words((\n                'async for', 'await', 'else', 'for', 'if', 'lambda',\n                'yield', 'yield from'), suffix=r'\\b'),\n             Keyword),\n            (words(('True', 'False', 'None'), suffix=r'\\b'), Keyword.Constant),\n        ],\n        'keywords': [\n            (words((\n                'assert', 'async', 'await', 'break', 'continue', 'del', 'elif',\n                'else', 'except', 'finally', 'for', 'global', 'if', 'lambda',\n                'pass', 'raise', 'nonlocal', 'return', 'try', 'while', 'yield',\n                'yield from', 'as', 'with'), suffix=r'\\b'),\n             Keyword),\n            (words(('True', 'False', 'None'), suffix=r'\\b'), Keyword.Constant),\n        ],\n        'soft-keywords': [\n            # `match`, `case` and `_` soft keywords\n            (r'(^[ \\t]*)'              # at beginning of line + possible indentation\n             r'(match|case)\\b'         # a possible keyword\n             r'(?![ \\t]*(?:'           # not followed by...\n             r'[:,;=^&|@~)\\]}]|(?:' +  # characters and keywords that mean this isn't\n             r'|'.join(keyword.kwlist) + r')\\b))',                 # pattern matching\n             bygroups(Text, Keyword), 'soft-keywords-inner'),\n        ],\n        'soft-keywords-inner': [\n            # optional `_` keyword\n            (r'(\\s+)([^\\n_]*)(_\\b)', bygroups(Whitespace, using(this), Keyword)),\n            default('#pop')\n        ],\n        'builtins': [\n            (words((\n                '__import__', 'abs', 'aiter', 'all', 'any', 'bin', 'bool', 'bytearray',\n                'breakpoint', 'bytes', 'callable', 'chr', 'classmethod', 'compile',\n                'complex', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval',\n                'filter', 'float', 'format', 'frozenset', 'getattr', 'globals',\n                'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'isinstance',\n                'issubclass', 'iter', 'len', 'list', 'locals', 'map', 'max',\n                'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow',\n                'print', 'property', 'range', 'repr', 'reversed', 'round', 'set',\n                'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super',\n                'tuple', 'type', 'vars', 'zip'), prefix=r'(?<!\\.)', suffix=r'\\b'),\n             Name.Builtin),\n            (r'(?<!\\.)(self|Ellipsis|NotImplemented|cls)\\b', Name.Builtin.Pseudo),\n            (words((\n                'ArithmeticError', 'AssertionError', 'AttributeError',\n                'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning',\n                'EOFError', 'EnvironmentError', 'Exception', 'FloatingPointError',\n                'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',\n                'ImportWarning', 'IndentationError', 'IndexError', 'KeyError',\n                'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError',\n                'NotImplementedError', 'OSError', 'OverflowError',\n                'PendingDeprecationWarning', 'ReferenceError', 'ResourceWarning',\n                'RuntimeError', 'RuntimeWarning', 'StopIteration',\n                'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit',\n                'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError',\n                'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',\n                'UnicodeWarning', 'UserWarning', 'ValueError', 'VMSError',\n                'Warning', 'WindowsError', 'ZeroDivisionError',\n                # new builtin exceptions from PEP 3151\n                'BlockingIOError', 'ChildProcessError', 'ConnectionError',\n                'BrokenPipeError', 'ConnectionAbortedError', 'ConnectionRefusedError',\n                'ConnectionResetError', 'FileExistsError', 'FileNotFoundError',\n                'InterruptedError', 'IsADirectoryError', 'NotADirectoryError',\n                'PermissionError', 'ProcessLookupError', 'TimeoutError',\n                # others new in Python 3\n                'StopAsyncIteration', 'ModuleNotFoundError', 'RecursionError',\n                'EncodingWarning'),\n                prefix=r'(?<!\\.)', suffix=r'\\b'),\n             Name.Exception),\n        ],\n        'magicfuncs': [\n            (words((\n                '__abs__', '__add__', '__aenter__', '__aexit__', '__aiter__',\n                '__and__', '__anext__', '__await__', '__bool__', '__bytes__',\n                '__call__', '__complex__', '__contains__', '__del__', '__delattr__',\n                '__delete__', '__delitem__', '__dir__', '__divmod__', '__enter__',\n                '__eq__', '__exit__', '__float__', '__floordiv__', '__format__',\n                '__ge__', '__get__', '__getattr__', '__getattribute__',\n                '__getitem__', '__gt__', '__hash__', '__iadd__', '__iand__',\n                '__ifloordiv__', '__ilshift__', '__imatmul__', '__imod__',\n                '__imul__', '__index__', '__init__', '__instancecheck__',\n                '__int__', '__invert__', '__ior__', '__ipow__', '__irshift__',\n                '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__',\n                '__len__', '__length_hint__', '__lshift__', '__lt__', '__matmul__',\n                '__missing__', '__mod__', '__mul__', '__ne__', '__neg__',\n                '__new__', '__next__', '__or__', '__pos__', '__pow__',\n                '__prepare__', '__radd__', '__rand__', '__rdivmod__', '__repr__',\n                '__reversed__', '__rfloordiv__', '__rlshift__', '__rmatmul__',\n                '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__',\n                '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__',\n                '__rxor__', '__set__', '__setattr__', '__setitem__', '__str__',\n                '__sub__', '__subclasscheck__', '__truediv__',\n                '__xor__'), suffix=r'\\b'),\n             Name.Function.Magic),\n        ],\n        'magicvars': [\n            (words((\n                '__annotations__', '__bases__', '__class__', '__closure__',\n                '__code__', '__defaults__', '__dict__', '__doc__', '__file__',\n                '__func__', '__globals__', '__kwdefaults__', '__module__',\n                '__mro__', '__name__', '__objclass__', '__qualname__',\n                '__self__', '__slots__', '__weakref__'), suffix=r'\\b'),\n             Name.Variable.Magic),\n        ],\n        'numbers': [\n            (r'(\\d(?:_?\\d)*\\.(?:\\d(?:_?\\d)*)?|(?:\\d(?:_?\\d)*)?\\.\\d(?:_?\\d)*)'\n             r'([eE][+-]?\\d(?:_?\\d)*)?', Number.Float),\n            (r'\\d(?:_?\\d)*[eE][+-]?\\d(?:_?\\d)*j?', Number.Float),\n            (r'0[oO](?:_?[0-7])+', Number.Oct),\n            (r'0[bB](?:_?[01])+', Number.Bin),\n            (r'0[xX](?:_?[a-fA-F0-9])+', Number.Hex),\n            (r'\\d(?:_?\\d)*', Number.Integer),\n        ],\n        'name': [\n            (r'@' + uni_name, Name.Decorator),\n            (r'@', Operator),  # new matrix multiplication operator\n            (uni_name, Name),\n        ],\n        'funcname': [\n            include('magicfuncs'),\n            (uni_name, Name.Function, '#pop'),\n            default('#pop'),\n        ],\n        'classname': [\n            (uni_name, Name.Class, '#pop'),\n        ],\n        'import': [\n            (r'(\\s+)(as)(\\s+)', bygroups(Text, Keyword, Text)),\n            (r'\\.', Name.Namespace),\n            (uni_name, Name.Namespace),\n            (r'(\\s*)(,)(\\s*)', bygroups(Text, Operator, Text)),\n            default('#pop')  # all else: go back\n        ],\n        'fromimport': [\n            (r'(\\s+)(import)\\b', bygroups(Text, Keyword.Namespace), '#pop'),\n            (r'\\.', Name.Namespace),\n            # if None occurs here, it's \"raise x from None\", since None can\n            # never be a module name\n            (r'None\\b', Keyword.Constant, '#pop'),\n            (uni_name, Name.Namespace),\n            default('#pop'),\n        ],\n        'rfstringescape': [\n            (r'\\{\\{', String.Escape),\n            (r'\\}\\}', String.Escape),\n        ],\n        'fstringescape': [\n            include('rfstringescape'),\n            include('stringescape'),\n        ],\n        'bytesescape': [\n            (r'\\\\([\\\\abfnrtv\"\\']|\\n|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)\n        ],\n        'stringescape': [\n            (r'\\\\(N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})', String.Escape),\n            include('bytesescape')\n        ],\n        'fstrings-single': fstring_rules(String.Single),\n        'fstrings-double': fstring_rules(String.Double),\n        'strings-single': innerstring_rules(String.Single),\n        'strings-double': innerstring_rules(String.Double),\n        'dqf': [\n            (r'\"', String.Double, '#pop'),\n            (r'\\\\\\\\|\\\\\"|\\\\\\n', String.Escape),  # included here for raw strings\n            include('fstrings-double')\n        ],\n        'sqf': [\n            (r\"'\", String.Single, '#pop'),\n            (r\"\\\\\\\\|\\\\'|\\\\\\n\", String.Escape),  # included here for raw strings\n            include('fstrings-single')\n        ],\n        'dqs': [\n            (r'\"', String.Double, '#pop'),\n            (r'\\\\\\\\|\\\\\"|\\\\\\n', String.Escape),  # included here for raw strings\n            include('strings-double')\n        ],\n        'sqs': [\n            (r\"'\", String.Single, '#pop'),\n            (r\"\\\\\\\\|\\\\'|\\\\\\n\", String.Escape),  # included here for raw strings\n            include('strings-single')\n        ],\n        'tdqf': [\n            (r'\"\"\"', String.Double, '#pop'),\n            include('fstrings-double'),\n            (r'\\n', String.Double)\n        ],\n        'tsqf': [\n            (r\"'''\", String.Single, '#pop'),\n            include('fstrings-single'),\n            (r'\\n', String.Single)\n        ],\n        'tdqs': [\n            (r'\"\"\"', String.Double, '#pop'),\n            include('strings-double'),\n            (r'\\n', String.Double)\n        ],\n        'tsqs': [\n            (r\"'''\", String.Single, '#pop'),\n            include('strings-single'),\n            (r'\\n', String.Single)\n        ],\n    }\n\n    def analyse_text(text):\n        return shebang_matches(text, r'pythonw?(3(\\.\\d)?)?') or \\\n            'import ' in text[:1000]\n\n\nPython3Lexer = PythonLexer\n\n\nclass Python2Lexer(RegexLexer):\n    \"\"\"\n    For Python 2.x source code.\n\n    .. versionchanged:: 2.5\n       This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now\n       refers to the Python 3 variant.  File name patterns like ``*.py`` have\n       been moved to Python 3 as well.\n    \"\"\"\n\n    name = 'Python 2.x'\n    url = 'http://www.python.org'\n    aliases = ['python2', 'py2']\n    filenames = []  # now taken over by PythonLexer (3.x)\n    mimetypes = ['text/x-python2', 'application/x-python2']\n\n    def innerstring_rules(ttype):\n        return [\n            # the old style '%s' % (...) string formatting\n            (r'%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?'\n             '[hlL]?[E-GXc-giorsux%]', String.Interpol),\n            # backslashes, quotes and formatting signs must be parsed one at a time\n            (r'[^\\\\\\'\"%\\n]+', ttype),\n            (r'[\\'\"\\\\]', ttype),\n            # unhandled string formatting sign\n            (r'%', ttype),\n            # newlines are an error (use \"nl\" state)\n        ]\n\n    tokens = {\n        'root': [\n            (r'\\n', Whitespace),\n            (r'^(\\s*)([rRuUbB]{,2})(\"\"\"(?:.|\\n)*?\"\"\")',\n             bygroups(Whitespace, String.Affix, String.Doc)),\n            (r\"^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')\",\n             bygroups(Whitespace, String.Affix, String.Doc)),\n            (r'[^\\S\\n]+', Text),\n            (r'\\A#!.+$', Comment.Hashbang),\n            (r'#.*$', Comment.Single),\n            (r'[]{}:(),;[]', Punctuation),\n            (r'\\\\\\n', Text),\n            (r'\\\\', Text),\n            (r'(in|is|and|or|not)\\b', Operator.Word),\n            (r'!=|==|<<|>>|[-~+/*%=<>&^|.]', Operator),\n            include('keywords'),\n            (r'(def)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'funcname'),\n            (r'(class)((?:\\s|\\\\\\s)+)', bygroups(Keyword, Text), 'classname'),\n            (r'(from)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text),\n             'fromimport'),\n            (r'(import)((?:\\s|\\\\\\s)+)', bygroups(Keyword.Namespace, Text),\n             'import'),\n            include('builtins'),\n            include('magicfuncs'),\n            include('magicvars'),\n            include('backtick'),\n            ('([rR]|[uUbB][rR]|[rR][uUbB])(\"\"\")',\n             bygroups(String.Affix, String.Double), 'tdqs'),\n            (\"([rR]|[uUbB][rR]|[rR][uUbB])(''')\",\n             bygroups(String.Affix, String.Single), 'tsqs'),\n            ('([rR]|[uUbB][rR]|[rR][uUbB])(\")',\n             bygroups(String.Affix, String.Double), 'dqs'),\n            (\"([rR]|[uUbB][rR]|[rR][uUbB])(')\",\n             bygroups(String.Affix, String.Single), 'sqs'),\n            ('([uUbB]?)(\"\"\")', bygroups(String.Affix, String.Double),\n             combined('stringescape', 'tdqs')),\n            (\"([uUbB]?)(''')\", bygroups(String.Affix, String.Single),\n             combined('stringescape', 'tsqs')),\n            ('([uUbB]?)(\")', bygroups(String.Affix, String.Double),\n             combined('stringescape', 'dqs')),\n            (\"([uUbB]?)(')\", bygroups(String.Affix, String.Single),\n             combined('stringescape', 'sqs')),\n            include('name'),\n            include('numbers'),\n        ],\n        'keywords': [\n            (words((\n                'assert', 'break', 'continue', 'del', 'elif', 'else', 'except',\n                'exec', 'finally', 'for', 'global', 'if', 'lambda', 'pass',\n                'print', 'raise', 'return', 'try', 'while', 'yield',\n                'yield from', 'as', 'with'), suffix=r'\\b'),\n             Keyword),\n        ],\n        'builtins': [\n            (words((\n                '__import__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin',\n                'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod',\n                'cmp', 'coerce', 'compile', 'complex', 'delattr', 'dict', 'dir', 'divmod',\n                'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float',\n                'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id',\n                'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len',\n                'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object',\n                'oct', 'open', 'ord', 'pow', 'property', 'range', 'raw_input', 'reduce',\n                'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',\n                'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type',\n                'unichr', 'unicode', 'vars', 'xrange', 'zip'),\n                prefix=r'(?<!\\.)', suffix=r'\\b'),\n             Name.Builtin),\n            (r'(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|cls'\n             r')\\b', Name.Builtin.Pseudo),\n            (words((\n                'ArithmeticError', 'AssertionError', 'AttributeError',\n                'BaseException', 'DeprecationWarning', 'EOFError', 'EnvironmentError',\n                'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit',\n                'IOError', 'ImportError', 'ImportWarning', 'IndentationError',\n                'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n                'MemoryError', 'NameError',\n                'NotImplementedError', 'OSError', 'OverflowError', 'OverflowWarning',\n                'PendingDeprecationWarning', 'ReferenceError',\n                'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration',\n                'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit',\n                'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError',\n                'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',\n                'UnicodeWarning', 'UserWarning', 'ValueError', 'VMSError', 'Warning',\n                'WindowsError', 'ZeroDivisionError'), prefix=r'(?<!\\.)', suffix=r'\\b'),\n             Name.Exception),\n        ],\n        'magicfuncs': [\n            (words((\n                '__abs__', '__add__', '__and__', '__call__', '__cmp__', '__coerce__',\n                '__complex__', '__contains__', '__del__', '__delattr__', '__delete__',\n                '__delitem__', '__delslice__', '__div__', '__divmod__', '__enter__',\n                '__eq__', '__exit__', '__float__', '__floordiv__', '__ge__', '__get__',\n                '__getattr__', '__getattribute__', '__getitem__', '__getslice__', '__gt__',\n                '__hash__', '__hex__', '__iadd__', '__iand__', '__idiv__', '__ifloordiv__',\n                '__ilshift__', '__imod__', '__imul__', '__index__', '__init__',\n                '__instancecheck__', '__int__', '__invert__', '__iop__', '__ior__',\n                '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__',\n                '__ixor__', '__le__', '__len__', '__long__', '__lshift__', '__lt__',\n                '__missing__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__',\n                '__nonzero__', '__oct__', '__op__', '__or__', '__pos__', '__pow__',\n                '__radd__', '__rand__', '__rcmp__', '__rdiv__', '__rdivmod__', '__repr__',\n                '__reversed__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__',\n                '__rop__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__',\n                '__rtruediv__', '__rxor__', '__set__', '__setattr__', '__setitem__',\n                '__setslice__', '__str__', '__sub__', '__subclasscheck__', '__truediv__',\n                '__unicode__', '__xor__'), suffix=r'\\b'),\n             Name.Function.Magic),\n        ],\n        'magicvars': [\n            (words((\n                '__bases__', '__class__', '__closure__', '__code__', '__defaults__',\n                '__dict__', '__doc__', '__file__', '__func__', '__globals__',\n                '__metaclass__', '__module__', '__mro__', '__name__', '__self__',\n                '__slots__', '__weakref__'),\n                suffix=r'\\b'),\n             Name.Variable.Magic),\n        ],\n        'numbers': [\n            (r'(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?', Number.Float),\n            (r'\\d+[eE][+-]?[0-9]+j?', Number.Float),\n            (r'0[0-7]+j?', Number.Oct),\n            (r'0[bB][01]+', Number.Bin),\n            (r'0[xX][a-fA-F0-9]+', Number.Hex),\n            (r'\\d+L', Number.Integer.Long),\n            (r'\\d+j?', Number.Integer)\n        ],\n        'backtick': [\n            ('`.*?`', String.Backtick),\n        ],\n        'name': [\n            (r'@[\\w.]+', Name.Decorator),\n            (r'[a-zA-Z_]\\w*', Name),\n        ],\n        'funcname': [\n            include('magicfuncs'),\n            (r'[a-zA-Z_]\\w*', Name.Function, '#pop'),\n            default('#pop'),\n        ],\n        'classname': [\n            (r'[a-zA-Z_]\\w*', Name.Class, '#pop')\n        ],\n        'import': [\n            (r'(?:[ \\t]|\\\\\\n)+', Text),\n            (r'as\\b', Keyword.Namespace),\n            (r',', Operator),\n            (r'[a-zA-Z_][\\w.]*', Name.Namespace),\n            default('#pop')  # all else: go back\n        ],\n        'fromimport': [\n            (r'(?:[ \\t]|\\\\\\n)+', Text),\n            (r'import\\b', Keyword.Namespace, '#pop'),\n            # if None occurs here, it's \"raise x from None\", since None can\n            # never be a module name\n            (r'None\\b', Name.Builtin.Pseudo, '#pop'),\n            # sadly, in \"raise x from y\" y will be highlighted as namespace too\n            (r'[a-zA-Z_.][\\w.]*', Name.Namespace),\n            # anything else here also means \"raise x from y\" and is therefore\n            # not an error\n            default('#pop'),\n        ],\n        'stringescape': [\n            (r'\\\\([\\\\abfnrtv\"\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|'\n             r'U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)\n        ],\n        'strings-single': innerstring_rules(String.Single),\n        'strings-double': innerstring_rules(String.Double),\n        'dqs': [\n            (r'\"', String.Double, '#pop'),\n            (r'\\\\\\\\|\\\\\"|\\\\\\n', String.Escape),  # included here for raw strings\n            include('strings-double')\n        ],\n        'sqs': [\n            (r\"'\", String.Single, '#pop'),\n            (r\"\\\\\\\\|\\\\'|\\\\\\n\", String.Escape),  # included here for raw strings\n            include('strings-single')\n        ],\n        'tdqs': [\n            (r'\"\"\"', String.Double, '#pop'),\n            include('strings-double'),\n            (r'\\n', String.Double)\n        ],\n        'tsqs': [\n            (r\"'''\", String.Single, '#pop'),\n            include('strings-single'),\n            (r'\\n', String.Single)\n        ],\n    }\n\n    def analyse_text(text):\n        return shebang_matches(text, r'pythonw?2(\\.\\d)?')\n\nclass _PythonConsoleLexerBase(RegexLexer):\n    name = 'Python console session'\n    aliases = ['pycon']\n    mimetypes = ['text/x-python-doctest']\n\n    \"\"\"Auxiliary lexer for `PythonConsoleLexer`.\n\n    Code tokens are output as ``Token.Other.Code``, traceback tokens as\n    ``Token.Other.Traceback``.\n    \"\"\"\n    tokens = {\n        'root': [\n            (r'(>>> )(.*\\n)', bygroups(Generic.Prompt, Other.Code), 'continuations'),\n            # This happens, e.g., when tracebacks are embedded in documentation;\n            # trailing whitespaces are often stripped in such contexts.\n            (r'(>>>)(\\n)', bygroups(Generic.Prompt, Whitespace)),\n            (r'(\\^C)?Traceback \\(most recent call last\\):\\n', Other.Traceback, 'traceback'),\n            # SyntaxError starts with this\n            (r'  File \"[^\"]+\", line \\d+', Other.Traceback, 'traceback'),\n            (r'.*\\n', Generic.Output),\n        ],\n        'continuations': [\n            (r'(\\.\\.\\. )(.*\\n)', bygroups(Generic.Prompt, Other.Code)),\n            # See above.\n            (r'(\\.\\.\\.)(\\n)', bygroups(Generic.Prompt, Whitespace)),\n            default('#pop'),\n        ],\n        'traceback': [\n            # As soon as we see a traceback, consume everything until the next\n            # >>> prompt.\n            (r'(?=>>>( |$))', Text, '#pop'),\n            (r'(KeyboardInterrupt)(\\n)', bygroups(Name.Class, Whitespace)),\n            (r'.*\\n', Other.Traceback),\n        ],\n    }\n\nclass PythonConsoleLexer(DelegatingLexer):\n    \"\"\"\n    For Python console output or doctests, such as:\n\n    .. sourcecode:: pycon\n\n        >>> a = 'foo'\n        >>> print(a)\n        foo\n        >>> 1 / 0\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n        ZeroDivisionError: integer division or modulo by zero\n\n    Additional options:\n\n    `python3`\n        Use Python 3 lexer for code.  Default is ``True``.\n\n        .. versionadded:: 1.0\n        .. versionchanged:: 2.5\n           Now defaults to ``True``.\n    \"\"\"\n\n    name = 'Python console session'\n    aliases = ['pycon']\n    mimetypes = ['text/x-python-doctest']\n\n    def __init__(self, **options):\n        python3 = get_bool_opt(options, 'python3', True)\n        if python3:\n            pylexer = PythonLexer\n            tblexer = PythonTracebackLexer\n        else:\n            pylexer = Python2Lexer\n            tblexer = Python2TracebackLexer\n        # We have two auxiliary lexers. Use DelegatingLexer twice with\n        # different tokens.  TODO: DelegatingLexer should support this\n        # directly, by accepting a tuplet of auxiliary lexers and a tuple of\n        # distinguishing tokens. Then we wouldn't need this intermediary\n        # class.\n        class _ReplaceInnerCode(DelegatingLexer):\n            def __init__(self, **options):\n                super().__init__(pylexer, _PythonConsoleLexerBase, Other.Code, **options)\n        super().__init__(tblexer, _ReplaceInnerCode, Other.Traceback, **options)\n\nclass PythonTracebackLexer(RegexLexer):\n    \"\"\"\n    For Python 3.x tracebacks, with support for chained exceptions.\n\n    .. versionadded:: 1.0\n\n    .. versionchanged:: 2.5\n       This is now the default ``PythonTracebackLexer``.  It is still available\n       as the alias ``Python3TracebackLexer``.\n    \"\"\"\n\n    name = 'Python Traceback'\n    aliases = ['pytb', 'py3tb']\n    filenames = ['*.pytb', '*.py3tb']\n    mimetypes = ['text/x-python-traceback', 'text/x-python3-traceback']\n\n    tokens = {\n        'root': [\n            (r'\\n', Whitespace),\n            (r'^(\\^C)?Traceback \\(most recent call last\\):\\n', Generic.Traceback, 'intb'),\n            (r'^During handling of the above exception, another '\n             r'exception occurred:\\n\\n', Generic.Traceback),\n            (r'^The above exception was the direct cause of the '\n             r'following exception:\\n\\n', Generic.Traceback),\n            (r'^(?=  File \"[^\"]+\", line \\d+)', Generic.Traceback, 'intb'),\n            (r'^.*\\n', Other),\n        ],\n        'intb': [\n            (r'^(  File )(\"[^\"]+\")(, line )(\\d+)(, in )(.+)(\\n)',\n             bygroups(Text, Name.Builtin, Text, Number, Text, Name, Whitespace)),\n            (r'^(  File )(\"[^\"]+\")(, line )(\\d+)(\\n)',\n             bygroups(Text, Name.Builtin, Text, Number, Whitespace)),\n            (r'^(    )(.+)(\\n)',\n             bygroups(Whitespace, using(PythonLexer), Whitespace), 'markers'),\n            (r'^([ \\t]*)(\\.\\.\\.)(\\n)',\n             bygroups(Whitespace, Comment, Whitespace)),  # for doctests...\n            (r'^([^:]+)(: )(.+)(\\n)',\n             bygroups(Generic.Error, Text, Name, Whitespace), '#pop'),\n            (r'^([a-zA-Z_][\\w.]*)(:?\\n)',\n             bygroups(Generic.Error, Whitespace), '#pop'),\n            default('#pop'),\n        ],\n        'markers': [\n            # Either `PEP 657 <https://www.python.org/dev/peps/pep-0657/>`\n            # error locations in Python 3.11+, or single-caret markers\n            # for syntax errors before that.\n            (r'^( {4,})([~^]+)(\\n)',\n             bygroups(Whitespace, Punctuation.Marker, Whitespace),\n             '#pop'),\n            default('#pop'),\n        ],\n    }\n\n\nPython3TracebackLexer = PythonTracebackLexer\n\n\nclass Python2TracebackLexer(RegexLexer):\n    \"\"\"\n    For Python tracebacks.\n\n    .. versionadded:: 0.7\n\n    .. versionchanged:: 2.5\n       This class has been renamed from ``PythonTracebackLexer``.\n       ``PythonTracebackLexer`` now refers to the Python 3 variant.\n    \"\"\"\n\n    name = 'Python 2.x Traceback'\n    aliases = ['py2tb']\n    filenames = ['*.py2tb']\n    mimetypes = ['text/x-python2-traceback']\n\n    tokens = {\n        'root': [\n            # Cover both (most recent call last) and (innermost last)\n            # The optional ^C allows us to catch keyboard interrupt signals.\n            (r'^(\\^C)?(Traceback.*\\n)',\n             bygroups(Text, Generic.Traceback), 'intb'),\n            # SyntaxError starts with this.\n            (r'^(?=  File \"[^\"]+\", line \\d+)', Generic.Traceback, 'intb'),\n            (r'^.*\\n', Other),\n        ],\n        'intb': [\n            (r'^(  File )(\"[^\"]+\")(, line )(\\d+)(, in )(.+)(\\n)',\n             bygroups(Text, Name.Builtin, Text, Number, Text, Name, Whitespace)),\n            (r'^(  File )(\"[^\"]+\")(, line )(\\d+)(\\n)',\n             bygroups(Text, Name.Builtin, Text, Number, Whitespace)),\n            (r'^(    )(.+)(\\n)',\n             bygroups(Text, using(Python2Lexer), Whitespace), 'marker'),\n            (r'^([ \\t]*)(\\.\\.\\.)(\\n)',\n             bygroups(Text, Comment, Whitespace)),  # for doctests...\n            (r'^([^:]+)(: )(.+)(\\n)',\n             bygroups(Generic.Error, Text, Name, Whitespace), '#pop'),\n            (r'^([a-zA-Z_]\\w*)(:?\\n)',\n             bygroups(Generic.Error, Whitespace), '#pop')\n        ],\n        'marker': [\n            # For syntax errors.\n            (r'( {4,})(\\^)', bygroups(Text, Punctuation.Marker), '#pop'),\n            default('#pop'),\n        ],\n    }\n\n\nclass CythonLexer(RegexLexer):\n    \"\"\"\n    For Pyrex and Cython source code.\n\n    .. versionadded:: 1.1\n    \"\"\"\n\n    name = 'Cython'\n    url = 'http://cython.org'\n    aliases = ['cython', 'pyx', 'pyrex']\n    filenames = ['*.pyx', '*.pxd', '*.pxi']\n    mimetypes = ['text/x-cython', 'application/x-cython']\n\n    tokens = {\n        'root': [\n            (r'\\n', Whitespace),\n            (r'^(\\s*)(\"\"\"(?:.|\\n)*?\"\"\")', bygroups(Whitespace, String.Doc)),\n            (r\"^(\\s*)('''(?:.|\\n)*?''')\", bygroups(Whitespace, String.Doc)),\n            (r'[^\\S\\n]+', Text),\n            (r'#.*$', Comment),\n            (r'[]{}:(),;[]', Punctuation),\n            (r'\\\\\\n', Whitespace),\n            (r'\\\\', Text),\n            (r'(in|is|and|or|not)\\b', Operator.Word),\n            (r'(<)([a-zA-Z0-9.?]+)(>)',\n             bygroups(Punctuation, Keyword.Type, Punctuation)),\n            (r'!=|==|<<|>>|[-~+/*%=<>&^|.?]', Operator),\n            (r'(from)(\\d+)(<=)(\\s+)(<)(\\d+)(:)',\n             bygroups(Keyword, Number.Integer, Operator, Name, Operator,\n                      Name, Punctuation)),\n            include('keywords'),\n            (r'(def|property)(\\s+)', bygroups(Keyword, Text), 'funcname'),\n            (r'(cp?def)(\\s+)', bygroups(Keyword, Text), 'cdef'),\n            # (should actually start a block with only cdefs)\n            (r'(cdef)(:)', bygroups(Keyword, Punctuation)),\n            (r'(class|struct)(\\s+)', bygroups(Keyword, Text), 'classname'),\n            (r'(from)(\\s+)', bygroups(Keyword, Text), 'fromimport'),\n            (r'(c?import)(\\s+)', bygroups(Keyword, Text), 'import'),\n            include('builtins'),\n            include('backtick'),\n            ('(?:[rR]|[uU][rR]|[rR][uU])\"\"\"', String, 'tdqs'),\n            (\"(?:[rR]|[uU][rR]|[rR][uU])'''\", String, 'tsqs'),\n            ('(?:[rR]|[uU][rR]|[rR][uU])\"', String, 'dqs'),\n            (\"(?:[rR]|[uU][rR]|[rR][uU])'\", String, 'sqs'),\n            ('[uU]?\"\"\"', String, combined('stringescape', 'tdqs')),\n            (\"[uU]?'''\", String, combined('stringescape', 'tsqs')),\n            ('[uU]?\"', String, combined('stringescape', 'dqs')),\n            (\"[uU]?'\", String, combined('stringescape', 'sqs')),\n            include('name'),\n            include('numbers'),\n        ],\n        'keywords': [\n            (words((\n                'assert', 'async', 'await', 'break', 'by', 'continue', 'ctypedef', 'del', 'elif',\n                'else', 'except', 'except?', 'exec', 'finally', 'for', 'fused', 'gil',\n                'global', 'if', 'include', 'lambda', 'nogil', 'pass', 'print',\n                'raise', 'return', 'try', 'while', 'yield', 'as', 'with'), suffix=r'\\b'),\n             Keyword),\n            (r'(DEF|IF|ELIF|ELSE)\\b', Comment.Preproc),\n        ],\n        'builtins': [\n            (words((\n                '__import__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bint',\n                'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr',\n                'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'delattr',\n                'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit',\n                'file', 'filter', 'float', 'frozenset', 'getattr', 'globals',\n                'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'intern', 'isinstance',\n                'issubclass', 'iter', 'len', 'list', 'locals', 'long', 'map', 'max',\n                'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'property', 'Py_ssize_t',\n                'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed',\n                'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod',\n                'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'unsigned',\n                'vars', 'xrange', 'zip'), prefix=r'(?<!\\.)', suffix=r'\\b'),\n             Name.Builtin),\n            (r'(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|NULL'\n             r')\\b', Name.Builtin.Pseudo),\n            (words((\n                'ArithmeticError', 'AssertionError', 'AttributeError',\n                'BaseException', 'DeprecationWarning', 'EOFError', 'EnvironmentError',\n                'Exception', 'FloatingPointError', 'FutureWarning', 'GeneratorExit',\n                'IOError', 'ImportError', 'ImportWarning', 'IndentationError',\n                'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n                'MemoryError', 'NameError', 'NotImplemented', 'NotImplementedError',\n                'OSError', 'OverflowError', 'OverflowWarning',\n                'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError',\n                'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError',\n                'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError',\n                'TypeError', 'UnboundLocalError', 'UnicodeDecodeError',\n                'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',\n                'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning',\n                'ZeroDivisionError'), prefix=r'(?<!\\.)', suffix=r'\\b'),\n             Name.Exception),\n        ],\n        'numbers': [\n            (r'(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float),\n            (r'0\\d+', Number.Oct),\n            (r'0[xX][a-fA-F0-9]+', Number.Hex),\n            (r'\\d+L', Number.Integer.Long),\n            (r'\\d+', Number.Integer)\n        ],\n        'backtick': [\n            ('`.*?`', String.Backtick),\n        ],\n        'name': [\n            (r'@\\w+', Name.Decorator),\n            (r'[a-zA-Z_]\\w*', Name),\n        ],\n        'funcname': [\n            (r'[a-zA-Z_]\\w*', Name.Function, '#pop')\n        ],\n        'cdef': [\n            (r'(public|readonly|extern|api|inline)\\b', Keyword.Reserved),\n            (r'(struct|enum|union|class)\\b', Keyword),\n            (r'([a-zA-Z_]\\w*)(\\s*)(?=[(:#=]|$)',\n             bygroups(Name.Function, Text), '#pop'),\n            (r'([a-zA-Z_]\\w*)(\\s*)(,)',\n             bygroups(Name.Function, Text, Punctuation)),\n            (r'from\\b', Keyword, '#pop'),\n            (r'as\\b', Keyword),\n            (r':', Punctuation, '#pop'),\n            (r'(?=[\"\\'])', Text, '#pop'),\n            (r'[a-zA-Z_]\\w*', Keyword.Type),\n            (r'.', Text),\n        ],\n        'classname': [\n            (r'[a-zA-Z_]\\w*', Name.Class, '#pop')\n        ],\n        'import': [\n            (r'(\\s+)(as)(\\s+)', bygroups(Text, Keyword, Text)),\n            (r'[a-zA-Z_][\\w.]*', Name.Namespace),\n            (r'(\\s*)(,)(\\s*)', bygroups(Text, Operator, Text)),\n            default('#pop')  # all else: go back\n        ],\n        'fromimport': [\n            (r'(\\s+)(c?import)\\b', bygroups(Text, Keyword), '#pop'),\n            (r'[a-zA-Z_.][\\w.]*', Name.Namespace),\n            # ``cdef foo from \"header\"``, or ``for foo from 0 < i < 10``\n            default('#pop'),\n        ],\n        'stringescape': [\n            (r'\\\\([\\\\abfnrtv\"\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|'\n             r'U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)\n        ],\n        'strings': [\n            (r'%(\\([a-zA-Z0-9]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?'\n             '[hlL]?[E-GXc-giorsux%]', String.Interpol),\n            (r'[^\\\\\\'\"%\\n]+', String),\n            # quotes, percents and backslashes must be parsed one at a time\n            (r'[\\'\"\\\\]', String),\n            # unhandled string formatting sign\n            (r'%', String)\n            # newlines are an error (use \"nl\" state)\n        ],\n        'nl': [\n            (r'\\n', String)\n        ],\n        'dqs': [\n            (r'\"', String, '#pop'),\n            (r'\\\\\\\\|\\\\\"|\\\\\\n', String.Escape),  # included here again for raw strings\n            include('strings')\n        ],\n        'sqs': [\n            (r\"'\", String, '#pop'),\n            (r\"\\\\\\\\|\\\\'|\\\\\\n\", String.Escape),  # included here again for raw strings\n            include('strings')\n        ],\n        'tdqs': [\n            (r'\"\"\"', String, '#pop'),\n            include('strings'),\n            include('nl')\n        ],\n        'tsqs': [\n            (r\"'''\", String, '#pop'),\n            include('strings'),\n            include('nl')\n        ],\n    }\n\n\nclass DgLexer(RegexLexer):\n    \"\"\"\n    Lexer for dg,\n    a functional and object-oriented programming language\n    running on the CPython 3 VM.\n\n    .. versionadded:: 1.6\n    \"\"\"\n    name = 'dg'\n    aliases = ['dg']\n    filenames = ['*.dg']\n    mimetypes = ['text/x-dg']\n\n    tokens = {\n        'root': [\n            (r'\\s+', Text),\n            (r'#.*?$', Comment.Single),\n\n            (r'(?i)0b[01]+', Number.Bin),\n            (r'(?i)0o[0-7]+', Number.Oct),\n            (r'(?i)0x[0-9a-f]+', Number.Hex),\n            (r'(?i)[+-]?[0-9]+\\.[0-9]+(e[+-]?[0-9]+)?j?', Number.Float),\n            (r'(?i)[+-]?[0-9]+e[+-]?\\d+j?', Number.Float),\n            (r'(?i)[+-]?[0-9]+j?', Number.Integer),\n\n            (r\"(?i)(br|r?b?)'''\", String, combined('stringescape', 'tsqs', 'string')),\n            (r'(?i)(br|r?b?)\"\"\"', String, combined('stringescape', 'tdqs', 'string')),\n            (r\"(?i)(br|r?b?)'\", String, combined('stringescape', 'sqs', 'string')),\n            (r'(?i)(br|r?b?)\"', String, combined('stringescape', 'dqs', 'string')),\n\n            (r\"`\\w+'*`\", Operator),\n            (r'\\b(and|in|is|or|where)\\b', Operator.Word),\n            (r'[!$%&*+\\-./:<-@\\\\^|~;,]+', Operator),\n\n            (words((\n                'bool', 'bytearray', 'bytes', 'classmethod', 'complex', 'dict', 'dict\\'',\n                'float', 'frozenset', 'int', 'list', 'list\\'', 'memoryview', 'object',\n                'property', 'range', 'set', 'set\\'', 'slice', 'staticmethod', 'str',\n                'super', 'tuple', 'tuple\\'', 'type'),\n                   prefix=r'(?<!\\.)', suffix=r'(?![\\'\\w])'),\n             Name.Builtin),\n            (words((\n                '__import__', 'abs', 'all', 'any', 'bin', 'bind', 'chr', 'cmp', 'compile',\n                'complex', 'delattr', 'dir', 'divmod', 'drop', 'dropwhile', 'enumerate',\n                'eval', 'exhaust', 'filter', 'flip', 'foldl1?', 'format', 'fst',\n                'getattr', 'globals', 'hasattr', 'hash', 'head', 'hex', 'id', 'init',\n                'input', 'isinstance', 'issubclass', 'iter', 'iterate', 'last', 'len',\n                'locals', 'map', 'max', 'min', 'next', 'oct', 'open', 'ord', 'pow',\n                'print', 'repr', 'reversed', 'round', 'setattr', 'scanl1?', 'snd',\n                'sorted', 'sum', 'tail', 'take', 'takewhile', 'vars', 'zip'),\n                   prefix=r'(?<!\\.)', suffix=r'(?![\\'\\w])'),\n             Name.Builtin),\n            (r\"(?<!\\.)(self|Ellipsis|NotImplemented|None|True|False)(?!['\\w])\",\n             Name.Builtin.Pseudo),\n\n            (r\"(?<!\\.)[A-Z]\\w*(Error|Exception|Warning)'*(?!['\\w])\",\n             Name.Exception),\n            (r\"(?<!\\.)(Exception|GeneratorExit|KeyboardInterrupt|StopIteration|\"\n             r\"SystemExit)(?!['\\w])\", Name.Exception),\n\n            (r\"(?<![\\w.])(except|finally|for|if|import|not|otherwise|raise|\"\n             r\"subclass|while|with|yield)(?!['\\w])\", Keyword.Reserved),\n\n            (r\"[A-Z_]+'*(?!['\\w])\", Name),\n            (r\"[A-Z]\\w+'*(?!['\\w])\", Keyword.Type),\n            (r\"\\w+'*\", Name),\n\n            (r'[()]', Punctuation),\n            (r'.', Error),\n        ],\n        'stringescape': [\n            (r'\\\\([\\\\abfnrtv\"\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|'\n             r'U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)\n        ],\n        'string': [\n            (r'%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?'\n             '[hlL]?[E-GXc-giorsux%]', String.Interpol),\n            (r'[^\\\\\\'\"%\\n]+', String),\n            # quotes, percents and backslashes must be parsed one at a time\n            (r'[\\'\"\\\\]', String),\n            # unhandled string formatting sign\n            (r'%', String),\n            (r'\\n', String)\n        ],\n        'dqs': [\n            (r'\"', String, '#pop')\n        ],\n        'sqs': [\n            (r\"'\", String, '#pop')\n        ],\n        'tdqs': [\n            (r'\"\"\"', String, '#pop')\n        ],\n        'tsqs': [\n            (r\"'''\", String, '#pop')\n        ],\n    }\n\n\nclass NumPyLexer(PythonLexer):\n    \"\"\"\n    A Python lexer recognizing Numerical Python builtins.\n\n    .. versionadded:: 0.10\n    \"\"\"\n\n    name = 'NumPy'\n    url = 'https://numpy.org/'\n    aliases = ['numpy']\n\n    # override the mimetypes to not inherit them from python\n    mimetypes = []\n    filenames = []\n\n    EXTRA_KEYWORDS = {\n        'abs', 'absolute', 'accumulate', 'add', 'alen', 'all', 'allclose',\n        'alltrue', 'alterdot', 'amax', 'amin', 'angle', 'any', 'append',\n        'apply_along_axis', 'apply_over_axes', 'arange', 'arccos', 'arccosh',\n        'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'argmax', 'argmin',\n        'argsort', 'argwhere', 'around', 'array', 'array2string', 'array_equal',\n        'array_equiv', 'array_repr', 'array_split', 'array_str', 'arrayrange',\n        'asanyarray', 'asarray', 'asarray_chkfinite', 'ascontiguousarray',\n        'asfarray', 'asfortranarray', 'asmatrix', 'asscalar', 'astype',\n        'atleast_1d', 'atleast_2d', 'atleast_3d', 'average', 'bartlett',\n        'base_repr', 'beta', 'binary_repr', 'bincount', 'binomial',\n        'bitwise_and', 'bitwise_not', 'bitwise_or', 'bitwise_xor', 'blackman',\n        'bmat', 'broadcast', 'byte_bounds', 'bytes', 'byteswap', 'c_',\n        'can_cast', 'ceil', 'choose', 'clip', 'column_stack', 'common_type',\n        'compare_chararrays', 'compress', 'concatenate', 'conj', 'conjugate',\n        'convolve', 'copy', 'corrcoef', 'correlate', 'cos', 'cosh', 'cov',\n        'cross', 'cumprod', 'cumproduct', 'cumsum', 'delete', 'deprecate',\n        'diag', 'diagflat', 'diagonal', 'diff', 'digitize', 'disp', 'divide',\n        'dot', 'dsplit', 'dstack', 'dtype', 'dump', 'dumps', 'ediff1d', 'empty',\n        'empty_like', 'equal', 'exp', 'expand_dims', 'expm1', 'extract', 'eye',\n        'fabs', 'fastCopyAndTranspose', 'fft', 'fftfreq', 'fftshift', 'fill',\n        'finfo', 'fix', 'flat', 'flatnonzero', 'flatten', 'fliplr', 'flipud',\n        'floor', 'floor_divide', 'fmod', 'frexp', 'fromarrays', 'frombuffer',\n        'fromfile', 'fromfunction', 'fromiter', 'frompyfunc', 'fromstring',\n        'generic', 'get_array_wrap', 'get_include', 'get_numarray_include',\n        'get_numpy_include', 'get_printoptions', 'getbuffer', 'getbufsize',\n        'geterr', 'geterrcall', 'geterrobj', 'getfield', 'gradient', 'greater',\n        'greater_equal', 'gumbel', 'hamming', 'hanning', 'histogram',\n        'histogram2d', 'histogramdd', 'hsplit', 'hstack', 'hypot', 'i0',\n        'identity', 'ifft', 'imag', 'index_exp', 'indices', 'inf', 'info',\n        'inner', 'insert', 'int_asbuffer', 'interp', 'intersect1d',\n        'intersect1d_nu', 'inv', 'invert', 'iscomplex', 'iscomplexobj',\n        'isfinite', 'isfortran', 'isinf', 'isnan', 'isneginf', 'isposinf',\n        'isreal', 'isrealobj', 'isscalar', 'issctype', 'issubclass_',\n        'issubdtype', 'issubsctype', 'item', 'itemset', 'iterable', 'ix_',\n        'kaiser', 'kron', 'ldexp', 'left_shift', 'less', 'less_equal', 'lexsort',\n        'linspace', 'load', 'loads', 'loadtxt', 'log', 'log10', 'log1p', 'log2',\n        'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'logspace',\n        'lstsq', 'mat', 'matrix', 'max', 'maximum', 'maximum_sctype',\n        'may_share_memory', 'mean', 'median', 'meshgrid', 'mgrid', 'min',\n        'minimum', 'mintypecode', 'mod', 'modf', 'msort', 'multiply', 'nan',\n        'nan_to_num', 'nanargmax', 'nanargmin', 'nanmax', 'nanmin', 'nansum',\n        'ndenumerate', 'ndim', 'ndindex', 'negative', 'newaxis', 'newbuffer',\n        'newbyteorder', 'nonzero', 'not_equal', 'obj2sctype', 'ogrid', 'ones',\n        'ones_like', 'outer', 'permutation', 'piecewise', 'pinv', 'pkgload',\n        'place', 'poisson', 'poly', 'poly1d', 'polyadd', 'polyder', 'polydiv',\n        'polyfit', 'polyint', 'polymul', 'polysub', 'polyval', 'power', 'prod',\n        'product', 'ptp', 'put', 'putmask', 'r_', 'randint', 'random_integers',\n        'random_sample', 'ranf', 'rank', 'ravel', 'real', 'real_if_close',\n        'recarray', 'reciprocal', 'reduce', 'remainder', 'repeat', 'require',\n        'reshape', 'resize', 'restoredot', 'right_shift', 'rint', 'roll',\n        'rollaxis', 'roots', 'rot90', 'round', 'round_', 'row_stack', 's_',\n        'sample', 'savetxt', 'sctype2char', 'searchsorted', 'seed', 'select',\n        'set_numeric_ops', 'set_printoptions', 'set_string_function',\n        'setbufsize', 'setdiff1d', 'seterr', 'seterrcall', 'seterrobj',\n        'setfield', 'setflags', 'setmember1d', 'setxor1d', 'shape',\n        'show_config', 'shuffle', 'sign', 'signbit', 'sin', 'sinc', 'sinh',\n        'size', 'slice', 'solve', 'sometrue', 'sort', 'sort_complex', 'source',\n        'split', 'sqrt', 'square', 'squeeze', 'standard_normal', 'std',\n        'subtract', 'sum', 'svd', 'swapaxes', 'take', 'tan', 'tanh', 'tensordot',\n        'test', 'tile', 'tofile', 'tolist', 'tostring', 'trace', 'transpose',\n        'trapz', 'tri', 'tril', 'trim_zeros', 'triu', 'true_divide', 'typeDict',\n        'typename', 'uniform', 'union1d', 'unique', 'unique1d', 'unravel_index',\n        'unwrap', 'vander', 'var', 'vdot', 'vectorize', 'view', 'vonmises',\n        'vsplit', 'vstack', 'weibull', 'where', 'who', 'zeros', 'zeros_like'\n    }\n\n    def get_tokens_unprocessed(self, text):\n        for index, token, value in \\\n                PythonLexer.get_tokens_unprocessed(self, text):\n            if token is Name and value in self.EXTRA_KEYWORDS:\n                yield index, Keyword.Pseudo, value\n            else:\n                yield index, token, value\n\n    def analyse_text(text):\n        ltext = text[:1000]\n        return (shebang_matches(text, r'pythonw?(3(\\.\\d)?)?') or\n                'import ' in ltext) \\\n            and ('import numpy' in ltext or 'from numpy import' in ltext)\n"},"hash":"ayL4eo3Ali"}