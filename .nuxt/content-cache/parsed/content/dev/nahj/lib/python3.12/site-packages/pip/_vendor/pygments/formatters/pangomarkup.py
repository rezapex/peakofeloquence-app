{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:formatters:pangomarkup.py","body":"\"\"\"\n    pygments.formatters.pangomarkup\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for Pango markup output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nfrom pip._vendor.pygments.formatter import Formatter\n\n\n__all__ = ['PangoMarkupFormatter']\n\n\n_escape_table = {\n    ord('&'): '&amp;',\n    ord('<'): '&lt;',\n}\n\n\ndef escape_special_chars(text, table=_escape_table):\n    \"\"\"Escape & and < for Pango Markup.\"\"\"\n    return text.translate(table)\n\n\nclass PangoMarkupFormatter(Formatter):\n    \"\"\"\n    Format tokens as Pango Markup code. It can then be rendered to an SVG.\n\n    .. versionadded:: 2.9\n    \"\"\"\n\n    name = 'Pango Markup'\n    aliases = ['pango', 'pangomarkup']\n    filenames = []\n\n    def __init__(self, **options):\n        Formatter.__init__(self, **options)\n\n        self.styles = {}\n\n        for token, style in self.style:\n            start = ''\n            end = ''\n            if style['color']:\n                start += '<span fgcolor=\"#%s\">' % style['color']\n                end = '</span>' + end\n            if style['bold']:\n                start += '<b>'\n                end = '</b>' + end\n            if style['italic']:\n                start += '<i>'\n                end = '</i>' + end\n            if style['underline']:\n                start += '<u>'\n                end = '</u>' + end\n            self.styles[token] = (start, end)\n\n    def format_unencoded(self, tokensource, outfile):\n        lastval = ''\n        lasttype = None\n\n        outfile.write('<tt>')\n\n        for ttype, value in tokensource:\n            while ttype not in self.styles:\n                ttype = ttype.parent\n            if ttype == lasttype:\n                lastval += escape_special_chars(value)\n            else:\n                if lastval:\n                    stylebegin, styleend = self.styles[lasttype]\n                    outfile.write(stylebegin + lastval + styleend)\n                lastval = escape_special_chars(value)\n                lasttype = ttype\n\n        if lastval:\n            stylebegin, styleend = self.styles[lasttype]\n            outfile.write(stylebegin + lastval + styleend)\n\n        outfile.write('</tt>')\n"},"hash":"GZBIXgWnW0"}