{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:utils:models.py","body":"\"\"\"Utilities for defining models\n\"\"\"\n\nimport operator\nfrom typing import Any, Callable, Type\n\n\nclass KeyBasedCompareMixin:\n    \"\"\"Provides comparison capabilities that is based on a key\"\"\"\n\n    __slots__ = [\"_compare_key\", \"_defining_class\"]\n\n    def __init__(self, key: Any, defining_class: Type[\"KeyBasedCompareMixin\"]) -> None:\n        self._compare_key = key\n        self._defining_class = defining_class\n\n    def __hash__(self) -> int:\n        return hash(self._compare_key)\n\n    def __lt__(self, other: Any) -> bool:\n        return self._compare(other, operator.__lt__)\n\n    def __le__(self, other: Any) -> bool:\n        return self._compare(other, operator.__le__)\n\n    def __gt__(self, other: Any) -> bool:\n        return self._compare(other, operator.__gt__)\n\n    def __ge__(self, other: Any) -> bool:\n        return self._compare(other, operator.__ge__)\n\n    def __eq__(self, other: Any) -> bool:\n        return self._compare(other, operator.__eq__)\n\n    def _compare(self, other: Any, method: Callable[[Any, Any], bool]) -> bool:\n        if not isinstance(other, self._defining_class):\n            return NotImplemented\n\n        return method(self._compare_key, other._compare_key)\n"},"hash":"vMtZ5ChYfQ"}