{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:utils:packaging.py","body":"import functools\nimport logging\nimport re\nfrom typing import NewType, Optional, Tuple, cast\n\nfrom pip._vendor.packaging import specifiers, version\nfrom pip._vendor.packaging.requirements import Requirement\n\nNormalizedExtra = NewType(\"NormalizedExtra\", str)\n\nlogger = logging.getLogger(__name__)\n\n\ndef check_requires_python(\n    requires_python: Optional[str], version_info: Tuple[int, ...]\n) -> bool:\n    \"\"\"\n    Check if the given Python version matches a \"Requires-Python\" specifier.\n\n    :param version_info: A 3-tuple of ints representing a Python\n        major-minor-micro version to check (e.g. `sys.version_info[:3]`).\n\n    :return: `True` if the given Python version satisfies the requirement.\n        Otherwise, return `False`.\n\n    :raises InvalidSpecifier: If `requires_python` has an invalid format.\n    \"\"\"\n    if requires_python is None:\n        # The package provides no information\n        return True\n    requires_python_specifier = specifiers.SpecifierSet(requires_python)\n\n    python_version = version.parse(\".\".join(map(str, version_info)))\n    return python_version in requires_python_specifier\n\n\n@functools.lru_cache(maxsize=512)\ndef get_requirement(req_string: str) -> Requirement:\n    \"\"\"Construct a packaging.Requirement object with caching\"\"\"\n    # Parsing requirement strings is expensive, and is also expected to happen\n    # with a low diversity of different arguments (at least relative the number\n    # constructed). This method adds a cache to requirement object creation to\n    # minimize repeated parsing of the same string to construct equivalent\n    # Requirement objects.\n    return Requirement(req_string)\n\n\ndef safe_extra(extra: str) -> NormalizedExtra:\n    \"\"\"Convert an arbitrary string to a standard 'extra' name\n\n    Any runs of non-alphanumeric characters are replaced with a single '_',\n    and the result is always lowercased.\n\n    This function is duplicated from ``pkg_resources``. Note that this is not\n    the same to either ``canonicalize_name`` or ``_egg_link_name``.\n    \"\"\"\n    return cast(NormalizedExtra, re.sub(\"[^A-Za-z0-9.-]+\", \"_\", extra).lower())\n"},"hash":"bjaTxk4gad"}