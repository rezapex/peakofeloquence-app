{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:formatters:svg.py","body":"\"\"\"\n    pygments.formatters.svg\n    ~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for SVG output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nfrom pip._vendor.pygments.formatter import Formatter\nfrom pip._vendor.pygments.token import Comment\nfrom pip._vendor.pygments.util import get_bool_opt, get_int_opt\n\n__all__ = ['SvgFormatter']\n\n\ndef escape_html(text):\n    \"\"\"Escape &, <, > as well as single and double quotes for HTML.\"\"\"\n    return text.replace('&', '&amp;').  \\\n                replace('<', '&lt;').   \\\n                replace('>', '&gt;').   \\\n                replace('\"', '&quot;'). \\\n                replace(\"'\", '&#39;')\n\n\nclass2style = {}\n\nclass SvgFormatter(Formatter):\n    \"\"\"\n    Format tokens as an SVG graphics file.  This formatter is still experimental.\n    Each line of code is a ``<text>`` element with explicit ``x`` and ``y``\n    coordinates containing ``<tspan>`` elements with the individual token styles.\n\n    By default, this formatter outputs a full SVG document including doctype\n    declaration and the ``<svg>`` root element.\n\n    .. versionadded:: 0.9\n\n    Additional options accepted:\n\n    `nowrap`\n        Don't wrap the SVG ``<text>`` elements in ``<svg><g>`` elements and\n        don't add a XML declaration and a doctype.  If true, the `fontfamily`\n        and `fontsize` options are ignored.  Defaults to ``False``.\n\n    `fontfamily`\n        The value to give the wrapping ``<g>`` element's ``font-family``\n        attribute, defaults to ``\"monospace\"``.\n\n    `fontsize`\n        The value to give the wrapping ``<g>`` element's ``font-size``\n        attribute, defaults to ``\"14px\"``.\n\n    `linenos`\n        If ``True``, add line numbers (default: ``False``).\n\n    `linenostart`\n        The line number for the first line (default: ``1``).\n\n    `linenostep`\n        If set to a number n > 1, only every nth line number is printed.\n        \n    `linenowidth`\n        Maximum width devoted to line numbers (default: ``3*ystep``, sufficient\n        for up to 4-digit line numbers. Increase width for longer code blocks).  \n        \n    `xoffset`\n        Starting offset in X direction, defaults to ``0``.\n\n    `yoffset`\n        Starting offset in Y direction, defaults to the font size if it is given\n        in pixels, or ``20`` else.  (This is necessary since text coordinates\n        refer to the text baseline, not the top edge.)\n\n    `ystep`\n        Offset to add to the Y coordinate for each subsequent line.  This should\n        roughly be the text size plus 5.  It defaults to that value if the text\n        size is given in pixels, or ``25`` else.\n\n    `spacehack`\n        Convert spaces in the source to ``&#160;``, which are non-breaking\n        spaces.  SVG provides the ``xml:space`` attribute to control how\n        whitespace inside tags is handled, in theory, the ``preserve`` value\n        could be used to keep all whitespace as-is.  However, many current SVG\n        viewers don't obey that rule, so this option is provided as a workaround\n        and defaults to ``True``.\n    \"\"\"\n    name = 'SVG'\n    aliases = ['svg']\n    filenames = ['*.svg']\n\n    def __init__(self, **options):\n        Formatter.__init__(self, **options)\n        self.nowrap = get_bool_opt(options, 'nowrap', False)\n        self.fontfamily = options.get('fontfamily', 'monospace')\n        self.fontsize = options.get('fontsize', '14px')\n        self.xoffset = get_int_opt(options, 'xoffset', 0)\n        fs = self.fontsize.strip()\n        if fs.endswith('px'): fs = fs[:-2].strip()\n        try:\n            int_fs = int(fs)\n        except:\n            int_fs = 20\n        self.yoffset = get_int_opt(options, 'yoffset', int_fs)\n        self.ystep = get_int_opt(options, 'ystep', int_fs + 5)\n        self.spacehack = get_bool_opt(options, 'spacehack', True)\n        self.linenos = get_bool_opt(options,'linenos',False)\n        self.linenostart = get_int_opt(options,'linenostart',1)\n        self.linenostep = get_int_opt(options,'linenostep',1)\n        self.linenowidth = get_int_opt(options,'linenowidth', 3*self.ystep)\n        self._stylecache = {}\n\n    def format_unencoded(self, tokensource, outfile):\n        \"\"\"\n        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``\n        tuples and write it into ``outfile``.\n\n        For our implementation we put all lines in their own 'line group'.\n        \"\"\"\n        x = self.xoffset\n        y = self.yoffset\n        if not self.nowrap:\n            if self.encoding:\n                outfile.write('<?xml version=\"1.0\" encoding=\"%s\"?>\\n' %\n                              self.encoding)\n            else:\n                outfile.write('<?xml version=\"1.0\"?>\\n')\n            outfile.write('<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" '\n                          '\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/'\n                          'svg10.dtd\">\\n')\n            outfile.write('<svg xmlns=\"http://www.w3.org/2000/svg\">\\n')\n            outfile.write('<g font-family=\"%s\" font-size=\"%s\">\\n' %\n                          (self.fontfamily, self.fontsize))\n        \n        counter = self.linenostart \n        counter_step = self.linenostep\n        counter_style = self._get_style(Comment)\n        line_x = x\n        \n        if self.linenos:\n            if counter % counter_step == 0:\n                outfile.write('<text x=\"%s\" y=\"%s\" %s text-anchor=\"end\">%s</text>' %\n                    (x+self.linenowidth,y,counter_style,counter))\n            line_x += self.linenowidth + self.ystep\n            counter += 1\n\n        outfile.write('<text x=\"%s\" y=\"%s\" xml:space=\"preserve\">' % (line_x, y))\n        for ttype, value in tokensource:\n            style = self._get_style(ttype)\n            tspan = style and '<tspan' + style + '>' or ''\n            tspanend = tspan and '</tspan>' or ''\n            value = escape_html(value)\n            if self.spacehack:\n                value = value.expandtabs().replace(' ', '&#160;')\n            parts = value.split('\\n')\n            for part in parts[:-1]:\n                outfile.write(tspan + part + tspanend)\n                y += self.ystep\n                outfile.write('</text>\\n')\n                if self.linenos and counter % counter_step == 0:\n                    outfile.write('<text x=\"%s\" y=\"%s\" text-anchor=\"end\" %s>%s</text>' %\n                        (x+self.linenowidth,y,counter_style,counter))\n                \n                counter += 1\n                outfile.write('<text x=\"%s\" y=\"%s\" ' 'xml:space=\"preserve\">' % (line_x,y))\n            outfile.write(tspan + parts[-1] + tspanend)\n        outfile.write('</text>')\n\n        if not self.nowrap:\n            outfile.write('</g></svg>\\n')\n\n    def _get_style(self, tokentype):\n        if tokentype in self._stylecache:\n            return self._stylecache[tokentype]\n        otokentype = tokentype\n        while not self.style.styles_token(tokentype):\n            tokentype = tokentype.parent\n        value = self.style.style_for_token(tokentype)\n        result = ''\n        if value['color']:\n            result = ' fill=\"#' + value['color'] + '\"'\n        if value['bold']:\n            result += ' font-weight=\"bold\"'\n        if value['italic']:\n            result += ' font-style=\"italic\"'\n        self._stylecache[otokentype] = result\n        return result\n"},"hash":"J0tzAeC4c4"}