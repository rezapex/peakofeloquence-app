{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:style.py","body":"\"\"\"\n    pygments.style\n    ~~~~~~~~~~~~~~\n\n    Basic style object.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nfrom pip._vendor.pygments.token import Token, STANDARD_TYPES\n\n# Default mapping of ansixxx to RGB colors.\n_ansimap = {\n    # dark\n    'ansiblack': '000000',\n    'ansired': '7f0000',\n    'ansigreen': '007f00',\n    'ansiyellow': '7f7fe0',\n    'ansiblue': '00007f',\n    'ansimagenta': '7f007f',\n    'ansicyan': '007f7f',\n    'ansigray': 'e5e5e5',\n    # normal\n    'ansibrightblack': '555555',\n    'ansibrightred': 'ff0000',\n    'ansibrightgreen': '00ff00',\n    'ansibrightyellow': 'ffff00',\n    'ansibrightblue': '0000ff',\n    'ansibrightmagenta': 'ff00ff',\n    'ansibrightcyan': '00ffff',\n    'ansiwhite': 'ffffff',\n}\n# mapping of deprecated #ansixxx colors to new color names\n_deprecated_ansicolors = {\n    # dark\n    '#ansiblack': 'ansiblack',\n    '#ansidarkred': 'ansired',\n    '#ansidarkgreen': 'ansigreen',\n    '#ansibrown': 'ansiyellow',\n    '#ansidarkblue': 'ansiblue',\n    '#ansipurple': 'ansimagenta',\n    '#ansiteal': 'ansicyan',\n    '#ansilightgray': 'ansigray',\n    # normal\n    '#ansidarkgray': 'ansibrightblack',\n    '#ansired': 'ansibrightred',\n    '#ansigreen': 'ansibrightgreen',\n    '#ansiyellow': 'ansibrightyellow',\n    '#ansiblue': 'ansibrightblue',\n    '#ansifuchsia': 'ansibrightmagenta',\n    '#ansiturquoise': 'ansibrightcyan',\n    '#ansiwhite': 'ansiwhite',\n}\nansicolors = set(_ansimap)\n\n\nclass StyleMeta(type):\n\n    def __new__(mcs, name, bases, dct):\n        obj = type.__new__(mcs, name, bases, dct)\n        for token in STANDARD_TYPES:\n            if token not in obj.styles:\n                obj.styles[token] = ''\n\n        def colorformat(text):\n            if text in ansicolors:\n                return text\n            if text[0:1] == '#':\n                col = text[1:]\n                if len(col) == 6:\n                    return col\n                elif len(col) == 3:\n                    return col[0] * 2 + col[1] * 2 + col[2] * 2\n            elif text == '':\n                return ''\n            elif text.startswith('var') or text.startswith('calc'):\n                return text\n            assert False, \"wrong color format %r\" % text\n\n        _styles = obj._styles = {}\n\n        for ttype in obj.styles:\n            for token in ttype.split():\n                if token in _styles:\n                    continue\n                ndef = _styles.get(token.parent, None)\n                styledefs = obj.styles.get(token, '').split()\n                if not ndef or token is None:\n                    ndef = ['', 0, 0, 0, '', '', 0, 0, 0]\n                elif 'noinherit' in styledefs and token is not Token:\n                    ndef = _styles[Token][:]\n                else:\n                    ndef = ndef[:]\n                _styles[token] = ndef\n                for styledef in obj.styles.get(token, '').split():\n                    if styledef == 'noinherit':\n                        pass\n                    elif styledef == 'bold':\n                        ndef[1] = 1\n                    elif styledef == 'nobold':\n                        ndef[1] = 0\n                    elif styledef == 'italic':\n                        ndef[2] = 1\n                    elif styledef == 'noitalic':\n                        ndef[2] = 0\n                    elif styledef == 'underline':\n                        ndef[3] = 1\n                    elif styledef == 'nounderline':\n                        ndef[3] = 0\n                    elif styledef[:3] == 'bg:':\n                        ndef[4] = colorformat(styledef[3:])\n                    elif styledef[:7] == 'border:':\n                        ndef[5] = colorformat(styledef[7:])\n                    elif styledef == 'roman':\n                        ndef[6] = 1\n                    elif styledef == 'sans':\n                        ndef[7] = 1\n                    elif styledef == 'mono':\n                        ndef[8] = 1\n                    else:\n                        ndef[0] = colorformat(styledef)\n\n        return obj\n\n    def style_for_token(cls, token):\n        t = cls._styles[token]\n        ansicolor = bgansicolor = None\n        color = t[0]\n        if color in _deprecated_ansicolors:\n            color = _deprecated_ansicolors[color]\n        if color in ansicolors:\n            ansicolor = color\n            color = _ansimap[color]\n        bgcolor = t[4]\n        if bgcolor in _deprecated_ansicolors:\n            bgcolor = _deprecated_ansicolors[bgcolor]\n        if bgcolor in ansicolors:\n            bgansicolor = bgcolor\n            bgcolor = _ansimap[bgcolor]\n\n        return {\n            'color':        color or None,\n            'bold':         bool(t[1]),\n            'italic':       bool(t[2]),\n            'underline':    bool(t[3]),\n            'bgcolor':      bgcolor or None,\n            'border':       t[5] or None,\n            'roman':        bool(t[6]) or None,\n            'sans':         bool(t[7]) or None,\n            'mono':         bool(t[8]) or None,\n            'ansicolor':    ansicolor,\n            'bgansicolor':  bgansicolor,\n        }\n\n    def list_styles(cls):\n        return list(cls)\n\n    def styles_token(cls, ttype):\n        return ttype in cls._styles\n\n    def __iter__(cls):\n        for token in cls._styles:\n            yield token, cls.style_for_token(token)\n\n    def __len__(cls):\n        return len(cls._styles)\n\n\nclass Style(metaclass=StyleMeta):\n\n    #: overall background color (``None`` means transparent)\n    background_color = '#ffffff'\n\n    #: highlight background color\n    highlight_color = '#ffffcc'\n\n    #: line number font color\n    line_number_color = 'inherit'\n\n    #: line number background color\n    line_number_background_color = 'transparent'\n\n    #: special line number font color\n    line_number_special_color = '#000000'\n\n    #: special line number background color\n    line_number_special_background_color = '#ffffc0'\n\n    #: Style definitions for individual token types.\n    styles = {}\n\n    # Attribute for lexers defined within Pygments. If set\n    # to True, the style is not shown in the style gallery\n    # on the website. This is intended for language-specific\n    # styles.\n    web_style_gallery_exclude = False\n"},"hash":"sQWlfWEeEc"}