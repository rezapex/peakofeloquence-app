{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:truststore:_ssl_constants.py","body":"import ssl\nimport sys\nimport typing\n\n# Hold on to the original class so we can create it consistently\n# even if we inject our own SSLContext into the ssl module.\n_original_SSLContext = ssl.SSLContext\n_original_super_SSLContext = super(_original_SSLContext, _original_SSLContext)\n\n# CPython is known to be good, but non-CPython implementations\n# may implement SSLContext differently so to be safe we don't\n# subclass the SSLContext.\n\n# This is returned by truststore.SSLContext.__class__()\n_truststore_SSLContext_dunder_class: typing.Optional[type]\n\n# This value is the superclass of truststore.SSLContext.\n_truststore_SSLContext_super_class: type\n\nif sys.implementation.name == \"cpython\":\n    _truststore_SSLContext_super_class = _original_SSLContext\n    _truststore_SSLContext_dunder_class = None\nelse:\n    _truststore_SSLContext_super_class = object\n    _truststore_SSLContext_dunder_class = _original_SSLContext\n\n\ndef _set_ssl_context_verify_mode(\n    ssl_context: ssl.SSLContext, verify_mode: ssl.VerifyMode\n) -> None:\n    _original_super_SSLContext.verify_mode.__set__(ssl_context, verify_mode)  # type: ignore[attr-defined]\n"},"hash":"AYGmJMxqcB"}