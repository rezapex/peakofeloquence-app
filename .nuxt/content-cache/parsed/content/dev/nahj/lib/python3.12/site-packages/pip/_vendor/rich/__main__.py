{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:rich:__main__.py","body":"import colorsys\nimport io\nfrom time import process_time\n\nfrom pip._vendor.rich import box\nfrom pip._vendor.rich.color import Color\nfrom pip._vendor.rich.console import Console, ConsoleOptions, Group, RenderableType, RenderResult\nfrom pip._vendor.rich.markdown import Markdown\nfrom pip._vendor.rich.measure import Measurement\nfrom pip._vendor.rich.pretty import Pretty\nfrom pip._vendor.rich.segment import Segment\nfrom pip._vendor.rich.style import Style\nfrom pip._vendor.rich.syntax import Syntax\nfrom pip._vendor.rich.table import Table\nfrom pip._vendor.rich.text import Text\n\n\nclass ColorBox:\n    def __rich_console__(\n        self, console: Console, options: ConsoleOptions\n    ) -> RenderResult:\n        for y in range(0, 5):\n            for x in range(options.max_width):\n                h = x / options.max_width\n                l = 0.1 + ((y / 5) * 0.7)\n                r1, g1, b1 = colorsys.hls_to_rgb(h, l, 1.0)\n                r2, g2, b2 = colorsys.hls_to_rgb(h, l + 0.7 / 10, 1.0)\n                bgcolor = Color.from_rgb(r1 * 255, g1 * 255, b1 * 255)\n                color = Color.from_rgb(r2 * 255, g2 * 255, b2 * 255)\n                yield Segment(\"▄\", Style(color=color, bgcolor=bgcolor))\n            yield Segment.line()\n\n    def __rich_measure__(\n        self, console: \"Console\", options: ConsoleOptions\n    ) -> Measurement:\n        return Measurement(1, options.max_width)\n\n\ndef make_test_card() -> Table:\n    \"\"\"Get a renderable that demonstrates a number of features.\"\"\"\n    table = Table.grid(padding=1, pad_edge=True)\n    table.title = \"Rich features\"\n    table.add_column(\"Feature\", no_wrap=True, justify=\"center\", style=\"bold red\")\n    table.add_column(\"Demonstration\")\n\n    color_table = Table(\n        box=None,\n        expand=False,\n        show_header=False,\n        show_edge=False,\n        pad_edge=False,\n    )\n    color_table.add_row(\n        (\n            \"✓ [bold green]4-bit color[/]\\n\"\n            \"✓ [bold blue]8-bit color[/]\\n\"\n            \"✓ [bold magenta]Truecolor (16.7 million)[/]\\n\"\n            \"✓ [bold yellow]Dumb terminals[/]\\n\"\n            \"✓ [bold cyan]Automatic color conversion\"\n        ),\n        ColorBox(),\n    )\n\n    table.add_row(\"Colors\", color_table)\n\n    table.add_row(\n        \"Styles\",\n        \"All ansi styles: [bold]bold[/], [dim]dim[/], [italic]italic[/italic], [underline]underline[/], [strike]strikethrough[/], [reverse]reverse[/], and even [blink]blink[/].\",\n    )\n\n    lorem = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque in metus sed sapien ultricies pretium a at justo. Maecenas luctus velit et auctor maximus.\"\n    lorem_table = Table.grid(padding=1, collapse_padding=True)\n    lorem_table.pad_edge = False\n    lorem_table.add_row(\n        Text(lorem, justify=\"left\", style=\"green\"),\n        Text(lorem, justify=\"center\", style=\"yellow\"),\n        Text(lorem, justify=\"right\", style=\"blue\"),\n        Text(lorem, justify=\"full\", style=\"red\"),\n    )\n    table.add_row(\n        \"Text\",\n        Group(\n            Text.from_markup(\n                \"\"\"Word wrap text. Justify [green]left[/], [yellow]center[/], [blue]right[/] or [red]full[/].\\n\"\"\"\n            ),\n            lorem_table,\n        ),\n    )\n\n    def comparison(renderable1: RenderableType, renderable2: RenderableType) -> Table:\n        table = Table(show_header=False, pad_edge=False, box=None, expand=True)\n        table.add_column(\"1\", ratio=1)\n        table.add_column(\"2\", ratio=1)\n        table.add_row(renderable1, renderable2)\n        return table\n\n    table.add_row(\n        \"Asian\\nlanguage\\nsupport\",\n        \":flag_for_china:  该库支持中文，日文和韩文文本！\\n:flag_for_japan:  ライブラリは中国語、日本語、韓国語のテキストをサポートしています\\n:flag_for_south_korea:  이 라이브러리는 중국어, 일본어 및 한국어 텍스트를 지원합니다\",\n    )\n\n    markup_example = (\n        \"[bold magenta]Rich[/] supports a simple [i]bbcode[/i]-like [b]markup[/b] for [yellow]color[/], [underline]style[/], and emoji! \"\n        \":+1: :apple: :ant: :bear: :baguette_bread: :bus: \"\n    )\n    table.add_row(\"Markup\", markup_example)\n\n    example_table = Table(\n        show_edge=False,\n        show_header=True,\n        expand=False,\n        row_styles=[\"none\", \"dim\"],\n        box=box.SIMPLE,\n    )\n    example_table.add_column(\"[green]Date\", style=\"green\", no_wrap=True)\n    example_table.add_column(\"[blue]Title\", style=\"blue\")\n    example_table.add_column(\n        \"[cyan]Production Budget\",\n        style=\"cyan\",\n        justify=\"right\",\n        no_wrap=True,\n    )\n    example_table.add_column(\n        \"[magenta]Box Office\",\n        style=\"magenta\",\n        justify=\"right\",\n        no_wrap=True,\n    )\n    example_table.add_row(\n        \"Dec 20, 2019\",\n        \"Star Wars: The Rise of Skywalker\",\n        \"$275,000,000\",\n        \"$375,126,118\",\n    )\n    example_table.add_row(\n        \"May 25, 2018\",\n        \"[b]Solo[/]: A Star Wars Story\",\n        \"$275,000,000\",\n        \"$393,151,347\",\n    )\n    example_table.add_row(\n        \"Dec 15, 2017\",\n        \"Star Wars Ep. VIII: The Last Jedi\",\n        \"$262,000,000\",\n        \"[bold]$1,332,539,889[/bold]\",\n    )\n    example_table.add_row(\n        \"May 19, 1999\",\n        \"Star Wars Ep. [b]I[/b]: [i]The phantom Menace\",\n        \"$115,000,000\",\n        \"$1,027,044,677\",\n    )\n\n    table.add_row(\"Tables\", example_table)\n\n    code = '''\\\ndef iter_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value'''\n\n    pretty_data = {\n        \"foo\": [\n            3.1427,\n            (\n                \"Paul Atreides\",\n                \"Vladimir Harkonnen\",\n                \"Thufir Hawat\",\n            ),\n        ],\n        \"atomic\": (False, True, None),\n    }\n    table.add_row(\n        \"Syntax\\nhighlighting\\n&\\npretty\\nprinting\",\n        comparison(\n            Syntax(code, \"python3\", line_numbers=True, indent_guides=True),\n            Pretty(pretty_data, indent_guides=True),\n        ),\n    )\n\n    markdown_example = \"\"\"\\\n# Markdown\n\nSupports much of the *markdown* __syntax__!\n\n- Headers\n- Basic formatting: **bold**, *italic*, `code`\n- Block quotes\n- Lists, and more...\n    \"\"\"\n    table.add_row(\n        \"Markdown\", comparison(\"[cyan]\" + markdown_example, Markdown(markdown_example))\n    )\n\n    table.add_row(\n        \"+more!\",\n        \"\"\"Progress bars, columns, styled logging handler, tracebacks, etc...\"\"\",\n    )\n    return table\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n\n    console = Console(\n        file=io.StringIO(),\n        force_terminal=True,\n    )\n    test_card = make_test_card()\n\n    # Print once to warm cache\n    start = process_time()\n    console.print(test_card)\n    pre_cache_taken = round((process_time() - start) * 1000.0, 1)\n\n    console.file = io.StringIO()\n\n    start = process_time()\n    console.print(test_card)\n    taken = round((process_time() - start) * 1000.0, 1)\n\n    c = Console(record=True)\n    c.print(test_card)\n\n    print(f\"rendered in {pre_cache_taken}ms (cold cache)\")\n    print(f\"rendered in {taken}ms (warm cache)\")\n\n    from pip._vendor.rich.panel import Panel\n\n    console = Console()\n\n    sponsor_message = Table.grid(padding=1)\n    sponsor_message.add_column(style=\"green\", justify=\"right\")\n    sponsor_message.add_column(no_wrap=True)\n\n    sponsor_message.add_row(\n        \"Textualize\",\n        \"[u blue link=https://github.com/textualize]https://github.com/textualize\",\n    )\n    sponsor_message.add_row(\n        \"Twitter\",\n        \"[u blue link=https://twitter.com/willmcgugan]https://twitter.com/willmcgugan\",\n    )\n\n    intro_message = Text.from_markup(\n        \"\"\"\\\nWe hope you enjoy using Rich!\n\nRich is maintained with [red]:heart:[/] by [link=https://www.textualize.io]Textualize.io[/]\n\n- Will McGugan\"\"\"\n    )\n\n    message = Table.grid(padding=2)\n    message.add_column()\n    message.add_column(no_wrap=True)\n    message.add_row(intro_message, sponsor_message)\n\n    console.print(\n        Panel.fit(\n            message,\n            box=box.ROUNDED,\n            padding=(1, 2),\n            title=\"[b red]Thanks for trying out Rich!\",\n            border_style=\"bright_blue\",\n        ),\n        justify=\"center\",\n    )\n"},"hash":"qiU9te54pX"}