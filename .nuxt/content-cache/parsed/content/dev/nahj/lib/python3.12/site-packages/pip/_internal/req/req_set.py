{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:req:req_set.py","body":"import logging\nfrom collections import OrderedDict\nfrom typing import Dict, List\n\nfrom pip._vendor.packaging.specifiers import LegacySpecifier\nfrom pip._vendor.packaging.utils import canonicalize_name\nfrom pip._vendor.packaging.version import LegacyVersion\n\nfrom pip._internal.req.req_install import InstallRequirement\nfrom pip._internal.utils.deprecation import deprecated\n\nlogger = logging.getLogger(__name__)\n\n\nclass RequirementSet:\n    def __init__(self, check_supported_wheels: bool = True) -> None:\n        \"\"\"Create a RequirementSet.\"\"\"\n\n        self.requirements: Dict[str, InstallRequirement] = OrderedDict()\n        self.check_supported_wheels = check_supported_wheels\n\n        self.unnamed_requirements: List[InstallRequirement] = []\n\n    def __str__(self) -> str:\n        requirements = sorted(\n            (req for req in self.requirements.values() if not req.comes_from),\n            key=lambda req: canonicalize_name(req.name or \"\"),\n        )\n        return \" \".join(str(req.req) for req in requirements)\n\n    def __repr__(self) -> str:\n        requirements = sorted(\n            self.requirements.values(),\n            key=lambda req: canonicalize_name(req.name or \"\"),\n        )\n\n        format_string = \"<{classname} object; {count} requirement(s): {reqs}>\"\n        return format_string.format(\n            classname=self.__class__.__name__,\n            count=len(requirements),\n            reqs=\", \".join(str(req.req) for req in requirements),\n        )\n\n    def add_unnamed_requirement(self, install_req: InstallRequirement) -> None:\n        assert not install_req.name\n        self.unnamed_requirements.append(install_req)\n\n    def add_named_requirement(self, install_req: InstallRequirement) -> None:\n        assert install_req.name\n\n        project_name = canonicalize_name(install_req.name)\n        self.requirements[project_name] = install_req\n\n    def has_requirement(self, name: str) -> bool:\n        project_name = canonicalize_name(name)\n\n        return (\n            project_name in self.requirements\n            and not self.requirements[project_name].constraint\n        )\n\n    def get_requirement(self, name: str) -> InstallRequirement:\n        project_name = canonicalize_name(name)\n\n        if project_name in self.requirements:\n            return self.requirements[project_name]\n\n        raise KeyError(f\"No project with the name {name!r}\")\n\n    @property\n    def all_requirements(self) -> List[InstallRequirement]:\n        return self.unnamed_requirements + list(self.requirements.values())\n\n    @property\n    def requirements_to_install(self) -> List[InstallRequirement]:\n        \"\"\"Return the list of requirements that need to be installed.\n\n        TODO remove this property together with the legacy resolver, since the new\n             resolver only returns requirements that need to be installed.\n        \"\"\"\n        return [\n            install_req\n            for install_req in self.all_requirements\n            if not install_req.constraint and not install_req.satisfied_by\n        ]\n\n    def warn_legacy_versions_and_specifiers(self) -> None:\n        for req in self.requirements_to_install:\n            version = req.get_dist().version\n            if isinstance(version, LegacyVersion):\n                deprecated(\n                    reason=(\n                        f\"pip has selected the non standard version {version} \"\n                        f\"of {req}. In the future this version will be \"\n                        f\"ignored as it isn't standard compliant.\"\n                    ),\n                    replacement=(\n                        \"set or update constraints to select another version \"\n                        \"or contact the package author to fix the version number\"\n                    ),\n                    issue=12063,\n                    gone_in=\"24.1\",\n                )\n            for dep in req.get_dist().iter_dependencies():\n                if any(isinstance(spec, LegacySpecifier) for spec in dep.specifier):\n                    deprecated(\n                        reason=(\n                            f\"pip has selected {req} {version} which has non \"\n                            f\"standard dependency specifier {dep}. \"\n                            f\"In the future this version of {req} will be \"\n                            f\"ignored as it isn't standard compliant.\"\n                        ),\n                        replacement=(\n                            \"set or update constraints to select another version \"\n                            \"or contact the package author to fix the version number\"\n                        ),\n                        issue=12063,\n                        gone_in=\"24.1\",\n                    )\n"},"hash":"UANuhTGVqJ"}