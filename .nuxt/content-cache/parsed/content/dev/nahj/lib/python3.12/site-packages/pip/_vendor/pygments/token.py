{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:token.py","body":"\"\"\"\n    pygments.token\n    ~~~~~~~~~~~~~~\n\n    Basic token types and the standard tokens.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\n\nclass _TokenType(tuple):\n    parent = None\n\n    def split(self):\n        buf = []\n        node = self\n        while node is not None:\n            buf.append(node)\n            node = node.parent\n        buf.reverse()\n        return buf\n\n    def __init__(self, *args):\n        # no need to call super.__init__\n        self.subtypes = set()\n\n    def __contains__(self, val):\n        return self is val or (\n            type(val) is self.__class__ and\n            val[:len(self)] == self\n        )\n\n    def __getattr__(self, val):\n        if not val or not val[0].isupper():\n            return tuple.__getattribute__(self, val)\n        new = _TokenType(self + (val,))\n        setattr(self, val, new)\n        self.subtypes.add(new)\n        new.parent = self\n        return new\n\n    def __repr__(self):\n        return 'Token' + (self and '.' or '') + '.'.join(self)\n\n    def __copy__(self):\n        # These instances are supposed to be singletons\n        return self\n\n    def __deepcopy__(self, memo):\n        # These instances are supposed to be singletons\n        return self\n\n\nToken = _TokenType()\n\n# Special token types\nText = Token.Text\nWhitespace = Text.Whitespace\nEscape = Token.Escape\nError = Token.Error\n# Text that doesn't belong to this lexer (e.g. HTML in PHP)\nOther = Token.Other\n\n# Common token types for source code\nKeyword = Token.Keyword\nName = Token.Name\nLiteral = Token.Literal\nString = Literal.String\nNumber = Literal.Number\nPunctuation = Token.Punctuation\nOperator = Token.Operator\nComment = Token.Comment\n\n# Generic types for non-source code\nGeneric = Token.Generic\n\n# String and some others are not direct children of Token.\n# alias them:\nToken.Token = Token\nToken.String = String\nToken.Number = Number\n\n\ndef is_token_subtype(ttype, other):\n    \"\"\"\n    Return True if ``ttype`` is a subtype of ``other``.\n\n    exists for backwards compatibility. use ``ttype in other`` now.\n    \"\"\"\n    return ttype in other\n\n\ndef string_to_tokentype(s):\n    \"\"\"\n    Convert a string into a token type::\n\n        >>> string_to_token('String.Double')\n        Token.Literal.String.Double\n        >>> string_to_token('Token.Literal.Number')\n        Token.Literal.Number\n        >>> string_to_token('')\n        Token\n\n    Tokens that are already tokens are returned unchanged:\n\n        >>> string_to_token(String)\n        Token.Literal.String\n    \"\"\"\n    if isinstance(s, _TokenType):\n        return s\n    if not s:\n        return Token\n    node = Token\n    for item in s.split('.'):\n        node = getattr(node, item)\n    return node\n\n\n# Map standard token types to short names, used in CSS class naming.\n# If you add a new item, please be sure to run this file to perform\n# a consistency check for duplicate values.\nSTANDARD_TYPES = {\n    Token:                         '',\n\n    Text:                          '',\n    Whitespace:                    'w',\n    Escape:                        'esc',\n    Error:                         'err',\n    Other:                         'x',\n\n    Keyword:                       'k',\n    Keyword.Constant:              'kc',\n    Keyword.Declaration:           'kd',\n    Keyword.Namespace:             'kn',\n    Keyword.Pseudo:                'kp',\n    Keyword.Reserved:              'kr',\n    Keyword.Type:                  'kt',\n\n    Name:                          'n',\n    Name.Attribute:                'na',\n    Name.Builtin:                  'nb',\n    Name.Builtin.Pseudo:           'bp',\n    Name.Class:                    'nc',\n    Name.Constant:                 'no',\n    Name.Decorator:                'nd',\n    Name.Entity:                   'ni',\n    Name.Exception:                'ne',\n    Name.Function:                 'nf',\n    Name.Function.Magic:           'fm',\n    Name.Property:                 'py',\n    Name.Label:                    'nl',\n    Name.Namespace:                'nn',\n    Name.Other:                    'nx',\n    Name.Tag:                      'nt',\n    Name.Variable:                 'nv',\n    Name.Variable.Class:           'vc',\n    Name.Variable.Global:          'vg',\n    Name.Variable.Instance:        'vi',\n    Name.Variable.Magic:           'vm',\n\n    Literal:                       'l',\n    Literal.Date:                  'ld',\n\n    String:                        's',\n    String.Affix:                  'sa',\n    String.Backtick:               'sb',\n    String.Char:                   'sc',\n    String.Delimiter:              'dl',\n    String.Doc:                    'sd',\n    String.Double:                 's2',\n    String.Escape:                 'se',\n    String.Heredoc:                'sh',\n    String.Interpol:               'si',\n    String.Other:                  'sx',\n    String.Regex:                  'sr',\n    String.Single:                 's1',\n    String.Symbol:                 'ss',\n\n    Number:                        'm',\n    Number.Bin:                    'mb',\n    Number.Float:                  'mf',\n    Number.Hex:                    'mh',\n    Number.Integer:                'mi',\n    Number.Integer.Long:           'il',\n    Number.Oct:                    'mo',\n\n    Operator:                      'o',\n    Operator.Word:                 'ow',\n\n    Punctuation:                   'p',\n    Punctuation.Marker:            'pm',\n\n    Comment:                       'c',\n    Comment.Hashbang:              'ch',\n    Comment.Multiline:             'cm',\n    Comment.Preproc:               'cp',\n    Comment.PreprocFile:           'cpf',\n    Comment.Single:                'c1',\n    Comment.Special:               'cs',\n\n    Generic:                       'g',\n    Generic.Deleted:               'gd',\n    Generic.Emph:                  'ge',\n    Generic.Error:                 'gr',\n    Generic.Heading:               'gh',\n    Generic.Inserted:              'gi',\n    Generic.Output:                'go',\n    Generic.Prompt:                'gp',\n    Generic.Strong:                'gs',\n    Generic.Subheading:            'gu',\n    Generic.Traceback:             'gt',\n}\n"},"hash":"eFXDTSdpf1"}