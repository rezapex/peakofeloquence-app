{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:req:req_install.py","body":"import functools\nimport logging\nimport os\nimport shutil\nimport sys\nimport uuid\nimport zipfile\nfrom optparse import Values\nfrom pathlib import Path\nfrom typing import Any, Collection, Dict, Iterable, List, Optional, Sequence, Union\n\nfrom pip._vendor.packaging.markers import Marker\nfrom pip._vendor.packaging.requirements import Requirement\nfrom pip._vendor.packaging.specifiers import SpecifierSet\nfrom pip._vendor.packaging.utils import canonicalize_name\nfrom pip._vendor.packaging.version import Version\nfrom pip._vendor.packaging.version import parse as parse_version\nfrom pip._vendor.pyproject_hooks import BuildBackendHookCaller\n\nfrom pip._internal.build_env import BuildEnvironment, NoOpBuildEnvironment\nfrom pip._internal.exceptions import InstallationError, PreviousBuildDirError\nfrom pip._internal.locations import get_scheme\nfrom pip._internal.metadata import (\n    BaseDistribution,\n    get_default_environment,\n    get_directory_distribution,\n    get_wheel_distribution,\n)\nfrom pip._internal.metadata.base import FilesystemWheel\nfrom pip._internal.models.direct_url import DirectUrl\nfrom pip._internal.models.link import Link\nfrom pip._internal.operations.build.metadata import generate_metadata\nfrom pip._internal.operations.build.metadata_editable import generate_editable_metadata\nfrom pip._internal.operations.build.metadata_legacy import (\n    generate_metadata as generate_metadata_legacy,\n)\nfrom pip._internal.operations.install.editable_legacy import (\n    install_editable as install_editable_legacy,\n)\nfrom pip._internal.operations.install.wheel import install_wheel\nfrom pip._internal.pyproject import load_pyproject_toml, make_pyproject_path\nfrom pip._internal.req.req_uninstall import UninstallPathSet\nfrom pip._internal.utils.deprecation import deprecated\nfrom pip._internal.utils.hashes import Hashes\nfrom pip._internal.utils.misc import (\n    ConfiguredBuildBackendHookCaller,\n    ask_path_exists,\n    backup_dir,\n    display_path,\n    hide_url,\n    is_installable_dir,\n    redact_auth_from_requirement,\n    redact_auth_from_url,\n)\nfrom pip._internal.utils.packaging import safe_extra\nfrom pip._internal.utils.subprocess import runner_with_spinner_message\nfrom pip._internal.utils.temp_dir import TempDirectory, tempdir_kinds\nfrom pip._internal.utils.unpacking import unpack_file\nfrom pip._internal.utils.virtualenv import running_under_virtualenv\nfrom pip._internal.vcs import vcs\n\nlogger = logging.getLogger(__name__)\n\n\nclass InstallRequirement:\n    \"\"\"\n    Represents something that may be installed later on, may have information\n    about where to fetch the relevant requirement and also contains logic for\n    installing the said requirement.\n    \"\"\"\n\n    def __init__(\n        self,\n        req: Optional[Requirement],\n        comes_from: Optional[Union[str, \"InstallRequirement\"]],\n        editable: bool = False,\n        link: Optional[Link] = None,\n        markers: Optional[Marker] = None,\n        use_pep517: Optional[bool] = None,\n        isolated: bool = False,\n        *,\n        global_options: Optional[List[str]] = None,\n        hash_options: Optional[Dict[str, List[str]]] = None,\n        config_settings: Optional[Dict[str, Union[str, List[str]]]] = None,\n        constraint: bool = False,\n        extras: Collection[str] = (),\n        user_supplied: bool = False,\n        permit_editable_wheels: bool = False,\n    ) -> None:\n        assert req is None or isinstance(req, Requirement), req\n        self.req = req\n        self.comes_from = comes_from\n        self.constraint = constraint\n        self.editable = editable\n        self.permit_editable_wheels = permit_editable_wheels\n\n        # source_dir is the local directory where the linked requirement is\n        # located, or unpacked. In case unpacking is needed, creating and\n        # populating source_dir is done by the RequirementPreparer. Note this\n        # is not necessarily the directory where pyproject.toml or setup.py is\n        # located - that one is obtained via unpacked_source_directory.\n        self.source_dir: Optional[str] = None\n        if self.editable:\n            assert link\n            if link.is_file:\n                self.source_dir = os.path.normpath(os.path.abspath(link.file_path))\n\n        # original_link is the direct URL that was provided by the user for the\n        # requirement, either directly or via a constraints file.\n        if link is None and req and req.url:\n            # PEP 508 URL requirement\n            link = Link(req.url)\n        self.link = self.original_link = link\n\n        # When this InstallRequirement is a wheel obtained from the cache of locally\n        # built wheels, this is the source link corresponding to the cache entry, which\n        # was used to download and build the cached wheel.\n        self.cached_wheel_source_link: Optional[Link] = None\n\n        # Information about the location of the artifact that was downloaded . This\n        # property is guaranteed to be set in resolver results.\n        self.download_info: Optional[DirectUrl] = None\n\n        # Path to any downloaded or already-existing package.\n        self.local_file_path: Optional[str] = None\n        if self.link and self.link.is_file:\n            self.local_file_path = self.link.file_path\n\n        if extras:\n            self.extras = extras\n        elif req:\n            self.extras = req.extras\n        else:\n            self.extras = set()\n        if markers is None and req:\n            markers = req.marker\n        self.markers = markers\n\n        # This holds the Distribution object if this requirement is already installed.\n        self.satisfied_by: Optional[BaseDistribution] = None\n        # Whether the installation process should try to uninstall an existing\n        # distribution before installing this requirement.\n        self.should_reinstall = False\n        # Temporary build location\n        self._temp_build_dir: Optional[TempDirectory] = None\n        # Set to True after successful installation\n        self.install_succeeded: Optional[bool] = None\n        # Supplied options\n        self.global_options = global_options if global_options else []\n        self.hash_options = hash_options if hash_options else {}\n        self.config_settings = config_settings\n        # Set to True after successful preparation of this requirement\n        self.prepared = False\n        # User supplied requirement are explicitly requested for installation\n        # by the user via CLI arguments or requirements files, as opposed to,\n        # e.g. dependencies, extras or constraints.\n        self.user_supplied = user_supplied\n\n        self.isolated = isolated\n        self.build_env: BuildEnvironment = NoOpBuildEnvironment()\n\n        # For PEP 517, the directory where we request the project metadata\n        # gets stored. We need this to pass to build_wheel, so the backend\n        # can ensure that the wheel matches the metadata (see the PEP for\n        # details).\n        self.metadata_directory: Optional[str] = None\n\n        # The static build requirements (from pyproject.toml)\n        self.pyproject_requires: Optional[List[str]] = None\n\n        # Build requirements that we will check are available\n        self.requirements_to_check: List[str] = []\n\n        # The PEP 517 backend we should use to build the project\n        self.pep517_backend: Optional[BuildBackendHookCaller] = None\n\n        # Are we using PEP 517 for this requirement?\n        # After pyproject.toml has been loaded, the only valid values are True\n        # and False. Before loading, None is valid (meaning \"use the default\").\n        # Setting an explicit value before loading pyproject.toml is supported,\n        # but after loading this flag should be treated as read only.\n        self.use_pep517 = use_pep517\n\n        # If config settings are provided, enforce PEP 517.\n        if self.config_settings:\n            if self.use_pep517 is False:\n                logger.warning(\n                    \"--no-use-pep517 ignored for %s \"\n                    \"because --config-settings are specified.\",\n                    self,\n                )\n            self.use_pep517 = True\n\n        # This requirement needs more preparation before it can be built\n        self.needs_more_preparation = False\n\n        # This requirement needs to be unpacked before it can be installed.\n        self._archive_source: Optional[Path] = None\n\n    def __str__(self) -> str:\n        if self.req:\n            s = redact_auth_from_requirement(self.req)\n            if self.link:\n                s += f\" from {redact_auth_from_url(self.link.url)}\"\n        elif self.link:\n            s = redact_auth_from_url(self.link.url)\n        else:\n            s = \"<InstallRequirement>\"\n        if self.satisfied_by is not None:\n            if self.satisfied_by.location is not None:\n                location = display_path(self.satisfied_by.location)\n            else:\n                location = \"<memory>\"\n            s += f\" in {location}\"\n        if self.comes_from:\n            if isinstance(self.comes_from, str):\n                comes_from: Optional[str] = self.comes_from\n            else:\n                comes_from = self.comes_from.from_path()\n            if comes_from:\n                s += f\" (from {comes_from})\"\n        return s\n\n    def __repr__(self) -> str:\n        return \"<{} object: {} editable={!r}>\".format(\n            self.__class__.__name__, str(self), self.editable\n        )\n\n    def format_debug(self) -> str:\n        \"\"\"An un-tested helper for getting state, for debugging.\"\"\"\n        attributes = vars(self)\n        names = sorted(attributes)\n\n        state = (f\"{attr}={attributes[attr]!r}\" for attr in sorted(names))\n        return \"<{name} object: {{{state}}}>\".format(\n            name=self.__class__.__name__,\n            state=\", \".join(state),\n        )\n\n    # Things that are valid for all kinds of requirements?\n    @property\n    def name(self) -> Optional[str]:\n        if self.req is None:\n            return None\n        return self.req.name\n\n    @functools.lru_cache()  # use cached_property in python 3.8+\n    def supports_pyproject_editable(self) -> bool:\n        if not self.use_pep517:\n            return False\n        assert self.pep517_backend\n        with self.build_env:\n            runner = runner_with_spinner_message(\n                \"Checking if build backend supports build_editable\"\n            )\n            with self.pep517_backend.subprocess_runner(runner):\n                return \"build_editable\" in self.pep517_backend._supported_features()\n\n    @property\n    def specifier(self) -> SpecifierSet:\n        assert self.req is not None\n        return self.req.specifier\n\n    @property\n    def is_direct(self) -> bool:\n        \"\"\"Whether this requirement was specified as a direct URL.\"\"\"\n        return self.original_link is not None\n\n    @property\n    def is_pinned(self) -> bool:\n        \"\"\"Return whether I am pinned to an exact version.\n\n        For example, some-package==1.2 is pinned; some-package>1.2 is not.\n        \"\"\"\n        assert self.req is not None\n        specifiers = self.req.specifier\n        return len(specifiers) == 1 and next(iter(specifiers)).operator in {\"==\", \"===\"}\n\n    def match_markers(self, extras_requested: Optional[Iterable[str]] = None) -> bool:\n        if not extras_requested:\n            # Provide an extra to safely evaluate the markers\n            # without matching any extra\n            extras_requested = (\"\",)\n        if self.markers is not None:\n            return any(\n                self.markers.evaluate({\"extra\": extra})\n                # TODO: Remove these two variants when packaging is upgraded to\n                # support the marker comparison logic specified in PEP 685.\n                or self.markers.evaluate({\"extra\": safe_extra(extra)})\n                or self.markers.evaluate({\"extra\": canonicalize_name(extra)})\n                for extra in extras_requested\n            )\n        else:\n            return True\n\n    @property\n    def has_hash_options(self) -> bool:\n        \"\"\"Return whether any known-good hashes are specified as options.\n\n        These activate --require-hashes mode; hashes specified as part of a\n        URL do not.\n\n        \"\"\"\n        return bool(self.hash_options)\n\n    def hashes(self, trust_internet: bool = True) -> Hashes:\n        \"\"\"Return a hash-comparer that considers my option- and URL-based\n        hashes to be known-good.\n\n        Hashes in URLs--ones embedded in the requirements file, not ones\n        downloaded from an index server--are almost peers with ones from\n        flags. They satisfy --require-hashes (whether it was implicitly or\n        explicitly activated) but do not activate it. md5 and sha224 are not\n        allowed in flags, which should nudge people toward good algos. We\n        always OR all hashes together, even ones from URLs.\n\n        :param trust_internet: Whether to trust URL-based (#md5=...) hashes\n            downloaded from the internet, as by populate_link()\n\n        \"\"\"\n        good_hashes = self.hash_options.copy()\n        if trust_internet:\n            link = self.link\n        elif self.is_direct and self.user_supplied:\n            link = self.original_link\n        else:\n            link = None\n        if link and link.hash:\n            assert link.hash_name is not None\n            good_hashes.setdefault(link.hash_name, []).append(link.hash)\n        return Hashes(good_hashes)\n\n    def from_path(self) -> Optional[str]:\n        \"\"\"Format a nice indicator to show where this \"comes from\" \"\"\"\n        if self.req is None:\n            return None\n        s = str(self.req)\n        if self.comes_from:\n            comes_from: Optional[str]\n            if isinstance(self.comes_from, str):\n                comes_from = self.comes_from\n            else:\n                comes_from = self.comes_from.from_path()\n            if comes_from:\n                s += \"->\" + comes_from\n        return s\n\n    def ensure_build_location(\n        self, build_dir: str, autodelete: bool, parallel_builds: bool\n    ) -> str:\n        assert build_dir is not None\n        if self._temp_build_dir is not None:\n            assert self._temp_build_dir.path\n            return self._temp_build_dir.path\n        if self.req is None:\n            # Some systems have /tmp as a symlink which confuses custom\n            # builds (such as numpy). Thus, we ensure that the real path\n            # is returned.\n            self._temp_build_dir = TempDirectory(\n                kind=tempdir_kinds.REQ_BUILD, globally_managed=True\n            )\n\n            return self._temp_build_dir.path\n\n        # This is the only remaining place where we manually determine the path\n        # for the temporary directory. It is only needed for editables where\n        # it is the value of the --src option.\n\n        # When parallel builds are enabled, add a UUID to the build directory\n        # name so multiple builds do not interfere with each other.\n        dir_name: str = canonicalize_name(self.req.name)\n        if parallel_builds:\n            dir_name = f\"{dir_name}_{uuid.uuid4().hex}\"\n\n        # FIXME: Is there a better place to create the build_dir? (hg and bzr\n        # need this)\n        if not os.path.exists(build_dir):\n            logger.debug(\"Creating directory %s\", build_dir)\n            os.makedirs(build_dir)\n        actual_build_dir = os.path.join(build_dir, dir_name)\n        # `None` indicates that we respect the globally-configured deletion\n        # settings, which is what we actually want when auto-deleting.\n        delete_arg = None if autodelete else False\n        return TempDirectory(\n            path=actual_build_dir,\n            delete=delete_arg,\n            kind=tempdir_kinds.REQ_BUILD,\n            globally_managed=True,\n        ).path\n\n    def _set_requirement(self) -> None:\n        \"\"\"Set requirement after generating metadata.\"\"\"\n        assert self.req is None\n        assert self.metadata is not None\n        assert self.source_dir is not None\n\n        # Construct a Requirement object from the generated metadata\n        if isinstance(parse_version(self.metadata[\"Version\"]), Version):\n            op = \"==\"\n        else:\n            op = \"===\"\n\n        self.req = Requirement(\n            \"\".join(\n                [\n                    self.metadata[\"Name\"],\n                    op,\n                    self.metadata[\"Version\"],\n                ]\n            )\n        )\n\n    def warn_on_mismatching_name(self) -> None:\n        assert self.req is not None\n        metadata_name = canonicalize_name(self.metadata[\"Name\"])\n        if canonicalize_name(self.req.name) == metadata_name:\n            # Everything is fine.\n            return\n\n        # If we're here, there's a mismatch. Log a warning about it.\n        logger.warning(\n            \"Generating metadata for package %s \"\n            \"produced metadata for project name %s. Fix your \"\n            \"#egg=%s fragments.\",\n            self.name,\n            metadata_name,\n            self.name,\n        )\n        self.req = Requirement(metadata_name)\n\n    def check_if_exists(self, use_user_site: bool) -> None:\n        \"\"\"Find an installed distribution that satisfies or conflicts\n        with this requirement, and set self.satisfied_by or\n        self.should_reinstall appropriately.\n        \"\"\"\n        if self.req is None:\n            return\n        existing_dist = get_default_environment().get_distribution(self.req.name)\n        if not existing_dist:\n            return\n\n        version_compatible = self.req.specifier.contains(\n            existing_dist.version,\n            prereleases=True,\n        )\n        if not version_compatible:\n            self.satisfied_by = None\n            if use_user_site:\n                if existing_dist.in_usersite:\n                    self.should_reinstall = True\n                elif running_under_virtualenv() and existing_dist.in_site_packages:\n                    raise InstallationError(\n                        f\"Will not install to the user site because it will \"\n                        f\"lack sys.path precedence to {existing_dist.raw_name} \"\n                        f\"in {existing_dist.location}\"\n                    )\n            else:\n                self.should_reinstall = True\n        else:\n            if self.editable:\n                self.should_reinstall = True\n                # when installing editables, nothing pre-existing should ever\n                # satisfy\n                self.satisfied_by = None\n            else:\n                self.satisfied_by = existing_dist\n\n    # Things valid for wheels\n    @property\n    def is_wheel(self) -> bool:\n        if not self.link:\n            return False\n        return self.link.is_wheel\n\n    @property\n    def is_wheel_from_cache(self) -> bool:\n        # When True, it means that this InstallRequirement is a local wheel file in the\n        # cache of locally built wheels.\n        return self.cached_wheel_source_link is not None\n\n    # Things valid for sdists\n    @property\n    def unpacked_source_directory(self) -> str:\n        assert self.source_dir, f\"No source dir for {self}\"\n        return os.path.join(\n            self.source_dir, self.link and self.link.subdirectory_fragment or \"\"\n        )\n\n    @property\n    def setup_py_path(self) -> str:\n        assert self.source_dir, f\"No source dir for {self}\"\n        setup_py = os.path.join(self.unpacked_source_directory, \"setup.py\")\n\n        return setup_py\n\n    @property\n    def setup_cfg_path(self) -> str:\n        assert self.source_dir, f\"No source dir for {self}\"\n        setup_cfg = os.path.join(self.unpacked_source_directory, \"setup.cfg\")\n\n        return setup_cfg\n\n    @property\n    def pyproject_toml_path(self) -> str:\n        assert self.source_dir, f\"No source dir for {self}\"\n        return make_pyproject_path(self.unpacked_source_directory)\n\n    def load_pyproject_toml(self) -> None:\n        \"\"\"Load the pyproject.toml file.\n\n        After calling this routine, all of the attributes related to PEP 517\n        processing for this requirement have been set. In particular, the\n        use_pep517 attribute can be used to determine whether we should\n        follow the PEP 517 or legacy (setup.py) code path.\n        \"\"\"\n        pyproject_toml_data = load_pyproject_toml(\n            self.use_pep517, self.pyproject_toml_path, self.setup_py_path, str(self)\n        )\n\n        if pyproject_toml_data is None:\n            assert not self.config_settings\n            self.use_pep517 = False\n            return\n\n        self.use_pep517 = True\n        requires, backend, check, backend_path = pyproject_toml_data\n        self.requirements_to_check = check\n        self.pyproject_requires = requires\n        self.pep517_backend = ConfiguredBuildBackendHookCaller(\n            self,\n            self.unpacked_source_directory,\n            backend,\n            backend_path=backend_path,\n        )\n\n    def isolated_editable_sanity_check(self) -> None:\n        \"\"\"Check that an editable requirement if valid for use with PEP 517/518.\n\n        This verifies that an editable that has a pyproject.toml either supports PEP 660\n        or as a setup.py or a setup.cfg\n        \"\"\"\n        if (\n            self.editable\n            and self.use_pep517\n            and not self.supports_pyproject_editable()\n            and not os.path.isfile(self.setup_py_path)\n            and not os.path.isfile(self.setup_cfg_path)\n        ):\n            raise InstallationError(\n                f\"Project {self} has a 'pyproject.toml' and its build \"\n                f\"backend is missing the 'build_editable' hook. Since it does not \"\n                f\"have a 'setup.py' nor a 'setup.cfg', \"\n                f\"it cannot be installed in editable mode. \"\n                f\"Consider using a build backend that supports PEP 660.\"\n            )\n\n    def prepare_metadata(self) -> None:\n        \"\"\"Ensure that project metadata is available.\n\n        Under PEP 517 and PEP 660, call the backend hook to prepare the metadata.\n        Under legacy processing, call setup.py egg-info.\n        \"\"\"\n        assert self.source_dir, f\"No source dir for {self}\"\n        details = self.name or f\"from {self.link}\"\n\n        if self.use_pep517:\n            assert self.pep517_backend is not None\n            if (\n                self.editable\n                and self.permit_editable_wheels\n                and self.supports_pyproject_editable()\n            ):\n                self.metadata_directory = generate_editable_metadata(\n                    build_env=self.build_env,\n                    backend=self.pep517_backend,\n                    details=details,\n                )\n            else:\n                self.metadata_directory = generate_metadata(\n                    build_env=self.build_env,\n                    backend=self.pep517_backend,\n                    details=details,\n                )\n        else:\n            self.metadata_directory = generate_metadata_legacy(\n                build_env=self.build_env,\n                setup_py_path=self.setup_py_path,\n                source_dir=self.unpacked_source_directory,\n                isolated=self.isolated,\n                details=details,\n            )\n\n        # Act on the newly generated metadata, based on the name and version.\n        if not self.name:\n            self._set_requirement()\n        else:\n            self.warn_on_mismatching_name()\n\n        self.assert_source_matches_version()\n\n    @property\n    def metadata(self) -> Any:\n        if not hasattr(self, \"_metadata\"):\n            self._metadata = self.get_dist().metadata\n\n        return self._metadata\n\n    def get_dist(self) -> BaseDistribution:\n        if self.metadata_directory:\n            return get_directory_distribution(self.metadata_directory)\n        elif self.local_file_path and self.is_wheel:\n            assert self.req is not None\n            return get_wheel_distribution(\n                FilesystemWheel(self.local_file_path),\n                canonicalize_name(self.req.name),\n            )\n        raise AssertionError(\n            f\"InstallRequirement {self} has no metadata directory and no wheel: \"\n            f\"can't make a distribution.\"\n        )\n\n    def assert_source_matches_version(self) -> None:\n        assert self.source_dir, f\"No source dir for {self}\"\n        version = self.metadata[\"version\"]\n        if self.req and self.req.specifier and version not in self.req.specifier:\n            logger.warning(\n                \"Requested %s, but installing version %s\",\n                self,\n                version,\n            )\n        else:\n            logger.debug(\n                \"Source in %s has version %s, which satisfies requirement %s\",\n                display_path(self.source_dir),\n                version,\n                self,\n            )\n\n    # For both source distributions and editables\n    def ensure_has_source_dir(\n        self,\n        parent_dir: str,\n        autodelete: bool = False,\n        parallel_builds: bool = False,\n    ) -> None:\n        \"\"\"Ensure that a source_dir is set.\n\n        This will create a temporary build dir if the name of the requirement\n        isn't known yet.\n\n        :param parent_dir: The ideal pip parent_dir for the source_dir.\n            Generally src_dir for editables and build_dir for sdists.\n        :return: self.source_dir\n        \"\"\"\n        if self.source_dir is None:\n            self.source_dir = self.ensure_build_location(\n                parent_dir,\n                autodelete=autodelete,\n                parallel_builds=parallel_builds,\n            )\n\n    def needs_unpacked_archive(self, archive_source: Path) -> None:\n        assert self._archive_source is None\n        self._archive_source = archive_source\n\n    def ensure_pristine_source_checkout(self) -> None:\n        \"\"\"Ensure the source directory has not yet been built in.\"\"\"\n        assert self.source_dir is not None\n        if self._archive_source is not None:\n            unpack_file(str(self._archive_source), self.source_dir)\n        elif is_installable_dir(self.source_dir):\n            # If a checkout exists, it's unwise to keep going.\n            # version inconsistencies are logged later, but do not fail\n            # the installation.\n            raise PreviousBuildDirError(\n                f\"pip can't proceed with requirements '{self}' due to a \"\n                f\"pre-existing build directory ({self.source_dir}). This is likely \"\n                \"due to a previous installation that failed . pip is \"\n                \"being responsible and not assuming it can delete this. \"\n                \"Please delete it and try again.\"\n            )\n\n    # For editable installations\n    def update_editable(self) -> None:\n        if not self.link:\n            logger.debug(\n                \"Cannot update repository at %s; repository location is unknown\",\n                self.source_dir,\n            )\n            return\n        assert self.editable\n        assert self.source_dir\n        if self.link.scheme == \"file\":\n            # Static paths don't get updated\n            return\n        vcs_backend = vcs.get_backend_for_scheme(self.link.scheme)\n        # Editable requirements are validated in Requirement constructors.\n        # So here, if it's neither a path nor a valid VCS URL, it's a bug.\n        assert vcs_backend, f\"Unsupported VCS URL {self.link.url}\"\n        hidden_url = hide_url(self.link.url)\n        vcs_backend.obtain(self.source_dir, url=hidden_url, verbosity=0)\n\n    # Top-level Actions\n    def uninstall(\n        self, auto_confirm: bool = False, verbose: bool = False\n    ) -> Optional[UninstallPathSet]:\n        \"\"\"\n        Uninstall the distribution currently satisfying this requirement.\n\n        Prompts before removing or modifying files unless\n        ``auto_confirm`` is True.\n\n        Refuses to delete or modify files outside of ``sys.prefix`` -\n        thus uninstallation within a virtual environment can only\n        modify that virtual environment, even if the virtualenv is\n        linked to global site-packages.\n\n        \"\"\"\n        assert self.req\n        dist = get_default_environment().get_distribution(self.req.name)\n        if not dist:\n            logger.warning(\"Skipping %s as it is not installed.\", self.name)\n            return None\n        logger.info(\"Found existing installation: %s\", dist)\n\n        uninstalled_pathset = UninstallPathSet.from_dist(dist)\n        uninstalled_pathset.remove(auto_confirm, verbose)\n        return uninstalled_pathset\n\n    def _get_archive_name(self, path: str, parentdir: str, rootdir: str) -> str:\n        def _clean_zip_name(name: str, prefix: str) -> str:\n            assert name.startswith(\n                prefix + os.path.sep\n            ), f\"name {name!r} doesn't start with prefix {prefix!r}\"\n            name = name[len(prefix) + 1 :]\n            name = name.replace(os.path.sep, \"/\")\n            return name\n\n        assert self.req is not None\n        path = os.path.join(parentdir, path)\n        name = _clean_zip_name(path, rootdir)\n        return self.req.name + \"/\" + name\n\n    def archive(self, build_dir: Optional[str]) -> None:\n        \"\"\"Saves archive to provided build_dir.\n\n        Used for saving downloaded VCS requirements as part of `pip download`.\n        \"\"\"\n        assert self.source_dir\n        if build_dir is None:\n            return\n\n        create_archive = True\n        archive_name = \"{}-{}.zip\".format(self.name, self.metadata[\"version\"])\n        archive_path = os.path.join(build_dir, archive_name)\n\n        if os.path.exists(archive_path):\n            response = ask_path_exists(\n                f\"The file {display_path(archive_path)} exists. (i)gnore, (w)ipe, \"\n                \"(b)ackup, (a)bort \",\n                (\"i\", \"w\", \"b\", \"a\"),\n            )\n            if response == \"i\":\n                create_archive = False\n            elif response == \"w\":\n                logger.warning(\"Deleting %s\", display_path(archive_path))\n                os.remove(archive_path)\n            elif response == \"b\":\n                dest_file = backup_dir(archive_path)\n                logger.warning(\n                    \"Backing up %s to %s\",\n                    display_path(archive_path),\n                    display_path(dest_file),\n                )\n                shutil.move(archive_path, dest_file)\n            elif response == \"a\":\n                sys.exit(-1)\n\n        if not create_archive:\n            return\n\n        zip_output = zipfile.ZipFile(\n            archive_path,\n            \"w\",\n            zipfile.ZIP_DEFLATED,\n            allowZip64=True,\n        )\n        with zip_output:\n            dir = os.path.normcase(os.path.abspath(self.unpacked_source_directory))\n            for dirpath, dirnames, filenames in os.walk(dir):\n                for dirname in dirnames:\n                    dir_arcname = self._get_archive_name(\n                        dirname,\n                        parentdir=dirpath,\n                        rootdir=dir,\n                    )\n                    zipdir = zipfile.ZipInfo(dir_arcname + \"/\")\n                    zipdir.external_attr = 0x1ED << 16  # 0o755\n                    zip_output.writestr(zipdir, \"\")\n                for filename in filenames:\n                    file_arcname = self._get_archive_name(\n                        filename,\n                        parentdir=dirpath,\n                        rootdir=dir,\n                    )\n                    filename = os.path.join(dirpath, filename)\n                    zip_output.write(filename, file_arcname)\n\n        logger.info(\"Saved %s\", display_path(archive_path))\n\n    def install(\n        self,\n        global_options: Optional[Sequence[str]] = None,\n        root: Optional[str] = None,\n        home: Optional[str] = None,\n        prefix: Optional[str] = None,\n        warn_script_location: bool = True,\n        use_user_site: bool = False,\n        pycompile: bool = True,\n    ) -> None:\n        assert self.req is not None\n        scheme = get_scheme(\n            self.req.name,\n            user=use_user_site,\n            home=home,\n            root=root,\n            isolated=self.isolated,\n            prefix=prefix,\n        )\n\n        if self.editable and not self.is_wheel:\n            if self.config_settings:\n                logger.warning(\n                    \"--config-settings ignored for legacy editable install of %s. \"\n                    \"Consider upgrading to a version of setuptools \"\n                    \"that supports PEP 660 (>= 64).\",\n                    self,\n                )\n            install_editable_legacy(\n                global_options=global_options if global_options is not None else [],\n                prefix=prefix,\n                home=home,\n                use_user_site=use_user_site,\n                name=self.req.name,\n                setup_py_path=self.setup_py_path,\n                isolated=self.isolated,\n                build_env=self.build_env,\n                unpacked_source_directory=self.unpacked_source_directory,\n            )\n            self.install_succeeded = True\n            return\n\n        assert self.is_wheel\n        assert self.local_file_path\n\n        install_wheel(\n            self.req.name,\n            self.local_file_path,\n            scheme=scheme,\n            req_description=str(self.req),\n            pycompile=pycompile,\n            warn_script_location=warn_script_location,\n            direct_url=self.download_info if self.is_direct else None,\n            requested=self.user_supplied,\n        )\n        self.install_succeeded = True\n\n\ndef check_invalid_constraint_type(req: InstallRequirement) -> str:\n    # Check for unsupported forms\n    problem = \"\"\n    if not req.name:\n        problem = \"Unnamed requirements are not allowed as constraints\"\n    elif req.editable:\n        problem = \"Editable requirements are not allowed as constraints\"\n    elif req.extras:\n        problem = \"Constraints cannot have extras\"\n\n    if problem:\n        deprecated(\n            reason=(\n                \"Constraints are only allowed to take the form of a package \"\n                \"name and a version specifier. Other forms were originally \"\n                \"permitted as an accident of the implementation, but were \"\n                \"undocumented. The new implementation of the resolver no \"\n                \"longer supports these forms.\"\n            ),\n            replacement=\"replacing the constraint with a requirement\",\n            # No plan yet for when the new resolver becomes default\n            gone_in=None,\n            issue=8210,\n        )\n\n    return problem\n\n\ndef _has_option(options: Values, reqs: List[InstallRequirement], option: str) -> bool:\n    if getattr(options, option, None):\n        return True\n    for req in reqs:\n        if getattr(req, option, None):\n            return True\n    return False\n\n\ndef check_legacy_setup_py_options(\n    options: Values,\n    reqs: List[InstallRequirement],\n) -> None:\n    has_build_options = _has_option(options, reqs, \"build_options\")\n    has_global_options = _has_option(options, reqs, \"global_options\")\n    if has_build_options or has_global_options:\n        deprecated(\n            reason=\"--build-option and --global-option are deprecated.\",\n            issue=11859,\n            replacement=\"to use --config-settings\",\n            gone_in=\"24.2\",\n        )\n        logger.warning(\n            \"Implying --no-binary=:all: due to the presence of \"\n            \"--build-option / --global-option. \"\n        )\n        options.format_control.disallow_binaries()\n"},"hash":"dgccbFo4MS"}