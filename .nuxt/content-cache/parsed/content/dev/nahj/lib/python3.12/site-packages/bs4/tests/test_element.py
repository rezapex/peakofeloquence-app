{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:bs4:tests:test_element.py","body":"\"\"\"Tests of classes in element.py.\n\nThe really big classes -- Tag, PageElement, and NavigableString --\nare tested in separate files.\n\"\"\"\n\nfrom bs4.element import (\n    CharsetMetaAttributeValue,\n    ContentMetaAttributeValue,\n    NamespacedAttribute,\n)\nfrom . import SoupTest\n\n\nclass TestNamedspacedAttribute(object):\n\n    def test_name_may_be_none_or_missing(self):\n        a = NamespacedAttribute(\"xmlns\", None)\n        assert a == \"xmlns\"\n\n        a = NamespacedAttribute(\"xmlns\", \"\")\n        assert a == \"xmlns\"\n\n        a = NamespacedAttribute(\"xmlns\")\n        assert a == \"xmlns\"\n        \n    def test_namespace_may_be_none_or_missing(self):\n        a = NamespacedAttribute(None, \"tag\")\n        assert a == \"tag\"\n        \n        a = NamespacedAttribute(\"\", \"tag\")\n        assert a == \"tag\"\n        \n    def test_attribute_is_equivalent_to_colon_separated_string(self):\n        a = NamespacedAttribute(\"a\", \"b\")\n        assert \"a:b\" == a\n\n    def test_attributes_are_equivalent_if_prefix_and_name_identical(self):\n        a = NamespacedAttribute(\"a\", \"b\", \"c\")\n        b = NamespacedAttribute(\"a\", \"b\", \"c\")\n        assert a == b\n\n        # The actual namespace is not considered.\n        c = NamespacedAttribute(\"a\", \"b\", None)\n        assert a == c\n\n        # But name and prefix are important.\n        d = NamespacedAttribute(\"a\", \"z\", \"c\")\n        assert a != d\n\n        e = NamespacedAttribute(\"z\", \"b\", \"c\")\n        assert a != e\n\n\nclass TestAttributeValueWithCharsetSubstitution(object):\n    \"\"\"Certain attributes are designed to have the charset of the\n    final document substituted into their value.\n    \"\"\"\n    \n    def test_content_meta_attribute_value(self):\n        # The value of a CharsetMetaAttributeValue is whatever\n        # encoding the string is in.\n        value = CharsetMetaAttributeValue(\"euc-jp\")\n        assert \"euc-jp\" == value\n        assert \"euc-jp\" == value.original_value\n        assert \"utf8\" == value.encode(\"utf8\")\n        assert \"ascii\" == value.encode(\"ascii\")\n\n    def test_content_meta_attribute_value(self):\n        value = ContentMetaAttributeValue(\"text/html; charset=euc-jp\")\n        assert \"text/html; charset=euc-jp\" == value\n        assert \"text/html; charset=euc-jp\" == value.original_value\n        assert \"text/html; charset=utf8\" == value.encode(\"utf8\")\n        assert \"text/html; charset=ascii\" == value.encode(\"ascii\")\n"},"hash":"gL3IzJLRa4"}