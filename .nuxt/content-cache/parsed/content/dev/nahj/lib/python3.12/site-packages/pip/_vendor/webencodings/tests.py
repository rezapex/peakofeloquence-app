{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:webencodings:tests.py","body":"# coding: utf-8\n\"\"\"\n\n    webencodings.tests\n    ~~~~~~~~~~~~~~~~~~\n\n    A basic test suite for Encoding.\n\n    :copyright: Copyright 2012 by Simon Sapin\n    :license: BSD, see LICENSE for details.\n\n\"\"\"\n\nfrom __future__ import unicode_literals\n\nfrom . import (lookup, LABELS, decode, encode, iter_decode, iter_encode,\n               IncrementalDecoder, IncrementalEncoder, UTF8)\n\n\ndef assert_raises(exception, function, *args, **kwargs):\n    try:\n        function(*args, **kwargs)\n    except exception:\n        return\n    else:  # pragma: no cover\n        raise AssertionError('Did not raise %s.' % exception)\n\n\ndef test_labels():\n    assert lookup('utf-8').name == 'utf-8'\n    assert lookup('Utf-8').name == 'utf-8'\n    assert lookup('UTF-8').name == 'utf-8'\n    assert lookup('utf8').name == 'utf-8'\n    assert lookup('utf8').name == 'utf-8'\n    assert lookup('utf8 ').name == 'utf-8'\n    assert lookup(' \\r\\nutf8\\t').name == 'utf-8'\n    assert lookup('u8') is None  # Python label.\n    assert lookup('utf-8 ') is None  # Non-ASCII white space.\n\n    assert lookup('US-ASCII').name == 'windows-1252'\n    assert lookup('iso-8859-1').name == 'windows-1252'\n    assert lookup('latin1').name == 'windows-1252'\n    assert lookup('LATIN1').name == 'windows-1252'\n    assert lookup('latin-1') is None\n    assert lookup('LATİN1') is None  # ASCII-only case insensitivity.\n\n\ndef test_all_labels():\n    for label in LABELS:\n        assert decode(b'', label) == ('', lookup(label))\n        assert encode('', label) == b''\n        for repeat in [0, 1, 12]:\n            output, _ = iter_decode([b''] * repeat, label)\n            assert list(output) == []\n            assert list(iter_encode([''] * repeat, label)) == []\n        decoder = IncrementalDecoder(label)\n        assert decoder.decode(b'') == ''\n        assert decoder.decode(b'', final=True) == ''\n        encoder = IncrementalEncoder(label)\n        assert encoder.encode('') == b''\n        assert encoder.encode('', final=True) == b''\n    # All encoding names are valid labels too:\n    for name in set(LABELS.values()):\n        assert lookup(name).name == name\n\n\ndef test_invalid_label():\n    assert_raises(LookupError, decode, b'\\xEF\\xBB\\xBF\\xc3\\xa9', 'invalid')\n    assert_raises(LookupError, encode, 'é', 'invalid')\n    assert_raises(LookupError, iter_decode, [], 'invalid')\n    assert_raises(LookupError, iter_encode, [], 'invalid')\n    assert_raises(LookupError, IncrementalDecoder, 'invalid')\n    assert_raises(LookupError, IncrementalEncoder, 'invalid')\n\n\ndef test_decode():\n    assert decode(b'\\x80', 'latin1') == ('€', lookup('latin1'))\n    assert decode(b'\\x80', lookup('latin1')) == ('€', lookup('latin1'))\n    assert decode(b'\\xc3\\xa9', 'utf8') == ('é', lookup('utf8'))\n    assert decode(b'\\xc3\\xa9', UTF8) == ('é', lookup('utf8'))\n    assert decode(b'\\xc3\\xa9', 'ascii') == ('Ã©', lookup('ascii'))\n    assert decode(b'\\xEF\\xBB\\xBF\\xc3\\xa9', 'ascii') == ('é', lookup('utf8'))  # UTF-8 with BOM\n\n    assert decode(b'\\xFE\\xFF\\x00\\xe9', 'ascii') == ('é', lookup('utf-16be'))  # UTF-16-BE with BOM\n    assert decode(b'\\xFF\\xFE\\xe9\\x00', 'ascii') == ('é', lookup('utf-16le'))  # UTF-16-LE with BOM\n    assert decode(b'\\xFE\\xFF\\xe9\\x00', 'ascii') == ('\\ue900', lookup('utf-16be'))\n    assert decode(b'\\xFF\\xFE\\x00\\xe9', 'ascii') == ('\\ue900', lookup('utf-16le'))\n\n    assert decode(b'\\x00\\xe9', 'UTF-16BE') == ('é', lookup('utf-16be'))\n    assert decode(b'\\xe9\\x00', 'UTF-16LE') == ('é', lookup('utf-16le'))\n    assert decode(b'\\xe9\\x00', 'UTF-16') == ('é', lookup('utf-16le'))\n\n    assert decode(b'\\xe9\\x00', 'UTF-16BE') == ('\\ue900', lookup('utf-16be'))\n    assert decode(b'\\x00\\xe9', 'UTF-16LE') == ('\\ue900', lookup('utf-16le'))\n    assert decode(b'\\x00\\xe9', 'UTF-16') == ('\\ue900', lookup('utf-16le'))\n\n\ndef test_encode():\n    assert encode('é', 'latin1') == b'\\xe9'\n    assert encode('é', 'utf8') == b'\\xc3\\xa9'\n    assert encode('é', 'utf8') == b'\\xc3\\xa9'\n    assert encode('é', 'utf-16') == b'\\xe9\\x00'\n    assert encode('é', 'utf-16le') == b'\\xe9\\x00'\n    assert encode('é', 'utf-16be') == b'\\x00\\xe9'\n\n\ndef test_iter_decode():\n    def iter_decode_to_string(input, fallback_encoding):\n        output, _encoding = iter_decode(input, fallback_encoding)\n        return ''.join(output)\n    assert iter_decode_to_string([], 'latin1') == ''\n    assert iter_decode_to_string([b''], 'latin1') == ''\n    assert iter_decode_to_string([b'\\xe9'], 'latin1') == 'é'\n    assert iter_decode_to_string([b'hello'], 'latin1') == 'hello'\n    assert iter_decode_to_string([b'he', b'llo'], 'latin1') == 'hello'\n    assert iter_decode_to_string([b'hell', b'o'], 'latin1') == 'hello'\n    assert iter_decode_to_string([b'\\xc3\\xa9'], 'latin1') == 'Ã©'\n    assert iter_decode_to_string([b'\\xEF\\xBB\\xBF\\xc3\\xa9'], 'latin1') == 'é'\n    assert iter_decode_to_string([\n        b'\\xEF\\xBB\\xBF', b'\\xc3', b'\\xa9'], 'latin1') == 'é'\n    assert iter_decode_to_string([\n        b'\\xEF\\xBB\\xBF', b'a', b'\\xc3'], 'latin1') == 'a\\uFFFD'\n    assert iter_decode_to_string([\n        b'', b'\\xEF', b'', b'', b'\\xBB\\xBF\\xc3', b'\\xa9'], 'latin1') == 'é'\n    assert iter_decode_to_string([b'\\xEF\\xBB\\xBF'], 'latin1') == ''\n    assert iter_decode_to_string([b'\\xEF\\xBB'], 'latin1') == 'ï»'\n    assert iter_decode_to_string([b'\\xFE\\xFF\\x00\\xe9'], 'latin1') == 'é'\n    assert iter_decode_to_string([b'\\xFF\\xFE\\xe9\\x00'], 'latin1') == 'é'\n    assert iter_decode_to_string([\n        b'', b'\\xFF', b'', b'', b'\\xFE\\xe9', b'\\x00'], 'latin1') == 'é'\n    assert iter_decode_to_string([\n        b'', b'h\\xe9', b'llo'], 'x-user-defined') == 'h\\uF7E9llo'\n\n\ndef test_iter_encode():\n    assert b''.join(iter_encode([], 'latin1')) == b''\n    assert b''.join(iter_encode([''], 'latin1')) == b''\n    assert b''.join(iter_encode(['é'], 'latin1')) == b'\\xe9'\n    assert b''.join(iter_encode(['', 'é', '', ''], 'latin1')) == b'\\xe9'\n    assert b''.join(iter_encode(['', 'é', '', ''], 'utf-16')) == b'\\xe9\\x00'\n    assert b''.join(iter_encode(['', 'é', '', ''], 'utf-16le')) == b'\\xe9\\x00'\n    assert b''.join(iter_encode(['', 'é', '', ''], 'utf-16be')) == b'\\x00\\xe9'\n    assert b''.join(iter_encode([\n        '', 'h\\uF7E9', '', 'llo'], 'x-user-defined')) == b'h\\xe9llo'\n\n\ndef test_x_user_defined():\n    encoded = b'2,\\x0c\\x0b\\x1aO\\xd9#\\xcb\\x0f\\xc9\\xbbt\\xcf\\xa8\\xca'\n    decoded = '2,\\x0c\\x0b\\x1aO\\uf7d9#\\uf7cb\\x0f\\uf7c9\\uf7bbt\\uf7cf\\uf7a8\\uf7ca'\n    encoded = b'aa'\n    decoded = 'aa'\n    assert decode(encoded, 'x-user-defined') == (decoded, lookup('x-user-defined'))\n    assert encode(decoded, 'x-user-defined') == encoded\n"},"hash":"3jNiRAIpKL"}