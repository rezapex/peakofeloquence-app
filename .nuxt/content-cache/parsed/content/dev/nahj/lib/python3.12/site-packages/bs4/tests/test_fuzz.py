{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:bs4:tests:test_fuzz.py","body":"\"\"\"This file contains test cases reported by third parties using\nfuzzing tools, primarily from Google's oss-fuzz project. Some of these\nrepresent real problems with Beautiful Soup, but many are problems in\nlibraries that Beautiful Soup depends on, and many of the test cases\nrepresent different ways of triggering the same problem.\n\nGrouping these test cases together makes it easy to see which test\ncases represent the same problem, and puts the test cases in close\nproximity to code that can trigger the problems.\n\"\"\"\nimport os\nimport pytest\nfrom bs4 import (\n    BeautifulSoup,\n    ParserRejectedMarkup,\n)\ntry:\n    from soupsieve.util import SelectorSyntaxError\n    import lxml\n    import html5lib\n    fully_fuzzable = True\nexcept ImportError:\n    fully_fuzzable = False\n    \n\n@pytest.mark.skipif(not fully_fuzzable, reason=\"Prerequisites for fuzz tests are not installed.\")\nclass TestFuzz(object):\n\n    # Test case markup files from fuzzers are given this extension so\n    # they can be included in builds.\n    TESTCASE_SUFFIX = \".testcase\"\n\n    # Copied 20230512 from\n    # https://github.com/google/oss-fuzz/blob/4ac6a645a197a695fe76532251feb5067076b3f3/projects/bs4/bs4_fuzzer.py\n    #\n    # Copying the code lets us precisely duplicate the behavior of\n    # oss-fuzz.  The downside is that this code changes over time, so\n    # multiple copies of the code must be kept around to run against\n    # older tests. I'm not sure what to do about this, but I may\n    # retire old tests after a time.\n    def fuzz_test_with_css(self, filename):\n        data = self.__markup(filename)\n        parsers = ['lxml-xml', 'html5lib', 'html.parser', 'lxml']\n        try:\n            idx = int(data[0]) % len(parsers)\n        except ValueError:\n            return\n\n        css_selector, data = data[1:10], data[10:]\n\n        try:\n            soup = BeautifulSoup(data[1:], features=parsers[idx])\n        except ParserRejectedMarkup:\n            return\n        except ValueError:\n            return\n\n        list(soup.find_all(True))\n        try:\n            soup.css.select(css_selector.decode('utf-8', 'replace'))\n        except SelectorSyntaxError:\n            return\n        soup.prettify()\n    \n    # This class of error has been fixed by catching a less helpful\n    # exception from html.parser and raising ParserRejectedMarkup\n    # instead.\n    @pytest.mark.parametrize(\n        \"filename\", [\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5703933063462912\",\n            \"crash-ffbdfa8a2b26f13537b68d3794b0478a4090ee4a\",\n        ]\n    )\n    def test_rejected_markup(self, filename):\n        markup = self.__markup(filename)\n        with pytest.raises(ParserRejectedMarkup):\n            BeautifulSoup(markup, 'html.parser')\n            \n    # This class of error has to do with very deeply nested documents\n    # which overflow the Python call stack when the tree is converted\n    # to a string. This is an issue with Beautiful Soup which was fixed\n    # as part of [bug=1471755].\n    #\n    # These test cases are in the older format that doesn't specify\n    # which parser to use or give a CSS selector.\n    @pytest.mark.parametrize(\n        \"filename\", [\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5984173902397440\",\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5167584867909632\",\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-6124268085182464\",\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-6450958476902400\",\n        ]\n    )\n    def test_deeply_nested_document_without_css(self, filename):\n        # Parsing the document and encoding it back to a string is\n        # sufficient to demonstrate that the overflow problem has\n        # been fixed.\n        markup = self.__markup(filename)\n        BeautifulSoup(markup, 'html.parser').encode()\n\n    # This class of error has to do with very deeply nested documents\n    # which overflow the Python call stack when the tree is converted\n    # to a string. This is an issue with Beautiful Soup which was fixed\n    # as part of [bug=1471755].\n    @pytest.mark.parametrize(\n        \"filename\", [\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5000587759190016\",\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5375146639360000\",\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5492400320282624\",\n        ]\n    )\n    def test_deeply_nested_document(self, filename): \n       self.fuzz_test_with_css(filename)\n        \n    @pytest.mark.parametrize(\n        \"filename\", [\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-4670634698080256\",\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5270998950477824\",\n        ]\n    )\n    def test_soupsieve_errors(self, filename):\n        self.fuzz_test_with_css(filename)\n        \n    # This class of error represents problems with html5lib's parser,\n    # not Beautiful Soup. I use\n    # https://github.com/html5lib/html5lib-python/issues/568 to notify\n    # the html5lib developers of these issues.\n    #\n    # These test cases are in the older format that doesn't specify\n    # which parser to use or give a CSS selector.\n    @pytest.mark.skip(reason=\"html5lib-specific problems\")\n    @pytest.mark.parametrize(\n        \"filename\", [\n            # b\"\"\"ÿ<!DOCTyPEV PUBLIC'''Ð'\"\"\"\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-4818336571064320\",\n\n            # b')<a><math><TR><a><mI><a><p><a>'\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-4999465949331456\",\n\n            # b'-<math><sElect><mi><sElect><sElect>'\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-5843991618256896\",\n           \n            # b'ñ<table><svg><html>'\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-6241471367348224\",\n\n            # <TABLE>, some ^@ characters, some <math> tags.\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-6600557255327744\",\n\n            # Nested table\n            \"crash-0d306a50c8ed8bcd0785b67000fcd5dea1d33f08\"\n        ]\n    )\n    def test_html5lib_parse_errors_without_css(self, filename):\n        markup = self.__markup(filename)\n        print(BeautifulSoup(markup, 'html5lib').encode())\n\n    # This class of error represents problems with html5lib's parser,\n    # not Beautiful Soup. I use\n    # https://github.com/html5lib/html5lib-python/issues/568 to notify\n    # the html5lib developers of these issues.\n    @pytest.mark.skip(reason=\"html5lib-specific problems\")\n    @pytest.mark.parametrize(\n        \"filename\", [\n            # b'-      \\xff\\xff  <math>\\x10<select><mi><select><select>t'\n            \"clusterfuzz-testcase-minimized-bs4_fuzzer-6306874195312640\",\n        ]\n    )\n    def test_html5lib_parse_errors(self, filename):\n        self.fuzz_test_with_css(filename)\n        \n    def __markup(self, filename):\n        if not filename.endswith(self.TESTCASE_SUFFIX):\n            filename += self.TESTCASE_SUFFIX\n        this_dir = os.path.split(__file__)[0]\n        path = os.path.join(this_dir, 'fuzz', filename)\n        return open(path, 'rb').read()\n"},"hash":"epnsU5ryTk"}