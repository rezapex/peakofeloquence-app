{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:cachecontrol:wrapper.py","body":"# SPDX-FileCopyrightText: 2015 Eric Larson\n#\n# SPDX-License-Identifier: Apache-2.0\nfrom __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Collection\n\nfrom pip._vendor.cachecontrol.adapter import CacheControlAdapter\nfrom pip._vendor.cachecontrol.cache import DictCache\n\nif TYPE_CHECKING:\n    from pip._vendor import requests\n\n    from pip._vendor.cachecontrol.cache import BaseCache\n    from pip._vendor.cachecontrol.controller import CacheController\n    from pip._vendor.cachecontrol.heuristics import BaseHeuristic\n    from pip._vendor.cachecontrol.serialize import Serializer\n\n\ndef CacheControl(\n    sess: requests.Session,\n    cache: BaseCache | None = None,\n    cache_etags: bool = True,\n    serializer: Serializer | None = None,\n    heuristic: BaseHeuristic | None = None,\n    controller_class: type[CacheController] | None = None,\n    adapter_class: type[CacheControlAdapter] | None = None,\n    cacheable_methods: Collection[str] | None = None,\n) -> requests.Session:\n    cache = DictCache() if cache is None else cache\n    adapter_class = adapter_class or CacheControlAdapter\n    adapter = adapter_class(\n        cache,\n        cache_etags=cache_etags,\n        serializer=serializer,\n        heuristic=heuristic,\n        controller_class=controller_class,\n        cacheable_methods=cacheable_methods,\n    )\n    sess.mount(\"http://\", adapter)\n    sess.mount(\"https://\", adapter)\n\n    return sess\n"},"hash":"NjquNo3aI6"}