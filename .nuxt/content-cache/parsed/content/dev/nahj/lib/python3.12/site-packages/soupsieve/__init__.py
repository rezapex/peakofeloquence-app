{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:soupsieve:__init__.py","body":"\"\"\"\nSoup Sieve.\n\nA CSS selector filter for BeautifulSoup4.\n\nMIT License\n\nCopyright (c) 2018 Isaac Muse\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\"\"\"\nfrom __future__ import annotations\nfrom .__meta__ import __version__, __version_info__  # noqa: F401\nfrom . import css_parser as cp\nfrom . import css_match as cm\nfrom . import css_types as ct\nfrom .util import DEBUG, SelectorSyntaxError  # noqa: F401\nimport bs4  # type: ignore[import]\nfrom typing import Any, Iterator, Iterable\n\n__all__ = (\n    'DEBUG', 'SelectorSyntaxError', 'SoupSieve',\n    'closest', 'compile', 'filter', 'iselect',\n    'match', 'select', 'select_one'\n)\n\nSoupSieve = cm.SoupSieve\n\n\ndef compile(  # noqa: A001\n    pattern: str,\n    namespaces: dict[str, str] | None = None,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> cm.SoupSieve:\n    \"\"\"Compile CSS pattern.\"\"\"\n\n    if isinstance(pattern, SoupSieve):\n        if flags:\n            raise ValueError(\"Cannot process 'flags' argument on a compiled selector list\")\n        elif namespaces is not None:\n            raise ValueError(\"Cannot process 'namespaces' argument on a compiled selector list\")\n        elif custom is not None:\n            raise ValueError(\"Cannot process 'custom' argument on a compiled selector list\")\n        return pattern\n\n    return cp._cached_css_compile(\n        pattern,\n        ct.Namespaces(namespaces) if namespaces is not None else namespaces,\n        ct.CustomSelectors(custom) if custom is not None else custom,\n        flags\n    )\n\n\ndef purge() -> None:\n    \"\"\"Purge cached patterns.\"\"\"\n\n    cp._purge_cache()\n\n\ndef closest(\n    select: str,\n    tag: bs4.Tag,\n    namespaces: dict[str, str] | None = None,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> bs4.Tag:\n    \"\"\"Match closest ancestor.\"\"\"\n\n    return compile(select, namespaces, flags, **kwargs).closest(tag)\n\n\ndef match(\n    select: str,\n    tag: bs4.Tag,\n    namespaces: dict[str, str] | None = None,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> bool:\n    \"\"\"Match node.\"\"\"\n\n    return compile(select, namespaces, flags, **kwargs).match(tag)\n\n\ndef filter(  # noqa: A001\n    select: str,\n    iterable: Iterable[bs4.Tag],\n    namespaces: dict[str, str] | None = None,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> list[bs4.Tag]:\n    \"\"\"Filter list of nodes.\"\"\"\n\n    return compile(select, namespaces, flags, **kwargs).filter(iterable)\n\n\ndef select_one(\n    select: str,\n    tag: bs4.Tag,\n    namespaces: dict[str, str] | None = None,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> bs4.Tag:\n    \"\"\"Select a single tag.\"\"\"\n\n    return compile(select, namespaces, flags, **kwargs).select_one(tag)\n\n\ndef select(\n    select: str,\n    tag: bs4.Tag,\n    namespaces: dict[str, str] | None = None,\n    limit: int = 0,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> list[bs4.Tag]:\n    \"\"\"Select the specified tags.\"\"\"\n\n    return compile(select, namespaces, flags, **kwargs).select(tag, limit)\n\n\ndef iselect(\n    select: str,\n    tag: bs4.Tag,\n    namespaces: dict[str, str] | None = None,\n    limit: int = 0,\n    flags: int = 0,\n    *,\n    custom: dict[str, str] | None = None,\n    **kwargs: Any\n) -> Iterator[bs4.Tag]:\n    \"\"\"Iterate the specified tags.\"\"\"\n\n    yield from compile(select, namespaces, flags, **kwargs).iselect(tag, limit)\n\n\ndef escape(ident: str) -> str:\n    \"\"\"Escape identifier.\"\"\"\n\n    return cp.escape(ident)\n"},"hash":"ayTk5f1vQg"}