{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:tests:test_conversions.py","body":"from markdownify import markdownify as md, ATX, ATX_CLOSED, BACKSLASH, UNDERSCORE\n\n\ndef inline_tests(tag, markup):\n    # test template for different inline tags\n    assert md(f'<{tag}>Hello</{tag}>') == f'{markup}Hello{markup}'\n    assert md(f'foo <{tag}>Hello</{tag}> bar') == f'foo {markup}Hello{markup} bar'\n    assert md(f'foo<{tag}> Hello</{tag}> bar') == f'foo {markup}Hello{markup} bar'\n    assert md(f'foo <{tag}>Hello </{tag}>bar') == f'foo {markup}Hello{markup} bar'\n    assert md(f'foo <{tag}></{tag}> bar') in ['foo  bar', 'foo bar']  # Either is OK\n\n\ndef test_a():\n    assert md('<a href=\"https://google.com\">Google</a>') == '[Google](https://google.com)'\n    assert md('<a href=\"https://google.com\">https://google.com</a>') == '<https://google.com>'\n    assert md('<a href=\"https://community.kde.org/Get_Involved\">https://community.kde.org/Get_Involved</a>') == '<https://community.kde.org/Get_Involved>'\n    assert md('<a href=\"https://community.kde.org/Get_Involved\">https://community.kde.org/Get_Involved</a>', autolinks=False) == '[https://community.kde.org/Get\\\\_Involved](https://community.kde.org/Get_Involved)'\n\n\ndef test_a_spaces():\n    assert md('foo <a href=\"http://google.com\">Google</a> bar') == 'foo [Google](http://google.com) bar'\n    assert md('foo<a href=\"http://google.com\"> Google</a> bar') == 'foo [Google](http://google.com) bar'\n    assert md('foo <a href=\"http://google.com\">Google </a>bar') == 'foo [Google](http://google.com) bar'\n    assert md('foo <a href=\"http://google.com\"></a> bar') == 'foo  bar'\n\n\ndef test_a_with_title():\n    text = md('<a href=\"http://google.com\" title=\"The &quot;Goog&quot;\">Google</a>')\n    assert text == r'[Google](http://google.com \"The \\\"Goog\\\"\")'\n    assert md('<a href=\"https://google.com\">https://google.com</a>', default_title=True) == '[https://google.com](https://google.com \"https://google.com\")'\n\n\ndef test_a_shortcut():\n    text = md('<a href=\"http://google.com\">http://google.com</a>')\n    assert text == '<http://google.com>'\n\n\ndef test_a_no_autolinks():\n    assert md('<a href=\"https://google.com\">https://google.com</a>', autolinks=False) == '[https://google.com](https://google.com)'\n\n\ndef test_b():\n    assert md('<b>Hello</b>') == '**Hello**'\n\n\ndef test_b_spaces():\n    assert md('foo <b>Hello</b> bar') == 'foo **Hello** bar'\n    assert md('foo<b> Hello</b> bar') == 'foo **Hello** bar'\n    assert md('foo <b>Hello </b>bar') == 'foo **Hello** bar'\n    assert md('foo <b></b> bar') == 'foo  bar'\n\n\ndef test_blockquote():\n    assert md('<blockquote>Hello</blockquote>') == '\\n> Hello\\n\\n'\n    assert md('<blockquote>\\nHello\\n</blockquote>') == '\\n> Hello\\n\\n'\n\n\ndef test_blockquote_with_nested_paragraph():\n    assert md('<blockquote><p>Hello</p></blockquote>') == '\\n> Hello\\n\\n'\n    assert md('<blockquote><p>Hello</p><p>Hello again</p></blockquote>') == '\\n> Hello\\n> \\n> Hello again\\n\\n'\n\n\ndef test_blockquote_with_paragraph():\n    assert md('<blockquote>Hello</blockquote><p>handsome</p>') == '\\n> Hello\\n\\nhandsome\\n\\n'\n\n\ndef test_blockquote_nested():\n    text = md('<blockquote>And she was like <blockquote>Hello</blockquote></blockquote>')\n    assert text == '\\n> And she was like \\n> > Hello\\n\\n'\n\n\ndef test_br():\n    assert md('a<br />b<br />c') == 'a  \\nb  \\nc'\n    assert md('a<br />b<br />c', newline_style=BACKSLASH) == 'a\\\\\\nb\\\\\\nc'\n\n\ndef test_caption():\n    assert md('TEXT<figure><figcaption>Caption</figcaption><span>SPAN</span></figure>') == 'TEXT\\n\\nCaption\\n\\nSPAN'\n    assert md('<figure><span>SPAN</span><figcaption>Caption</figcaption></figure>TEXT') == 'SPAN\\n\\nCaption\\n\\nTEXT'\n\n\ndef test_code():\n    inline_tests('code', '`')\n    assert md('<code>*this_should_not_escape*</code>') == '`*this_should_not_escape*`'\n    assert md('<kbd>*this_should_not_escape*</kbd>') == '`*this_should_not_escape*`'\n    assert md('<samp>*this_should_not_escape*</samp>') == '`*this_should_not_escape*`'\n    assert md('<code><span>*this_should_not_escape*</span></code>') == '`*this_should_not_escape*`'\n    assert md('<code>this  should\\t\\tnormalize</code>') == '`this should normalize`'\n    assert md('<code><span>this  should\\t\\tnormalize</span></code>') == '`this should normalize`'\n\n\ndef test_del():\n    inline_tests('del', '~~')\n\n\ndef test_div():\n    assert md('Hello</div> World') == 'Hello World'\n\n\ndef test_em():\n    inline_tests('em', '*')\n\n\ndef test_header_with_space():\n    assert md('<h3>\\n\\nHello</h3>') == '### Hello\\n\\n'\n    assert md('<h4>\\n\\nHello</h4>') == '#### Hello\\n\\n'\n    assert md('<h5>\\n\\nHello</h5>') == '##### Hello\\n\\n'\n    assert md('<h5>\\n\\nHello\\n\\n</h5>') == '##### Hello\\n\\n'\n    assert md('<h5>\\n\\nHello   \\n\\n</h5>') == '##### Hello\\n\\n'\n\n\ndef test_h1():\n    assert md('<h1>Hello</h1>') == 'Hello\\n=====\\n\\n'\n\n\ndef test_h2():\n    assert md('<h2>Hello</h2>') == 'Hello\\n-----\\n\\n'\n\n\ndef test_hn():\n    assert md('<h3>Hello</h3>') == '### Hello\\n\\n'\n    assert md('<h4>Hello</h4>') == '#### Hello\\n\\n'\n    assert md('<h5>Hello</h5>') == '##### Hello\\n\\n'\n    assert md('<h6>Hello</h6>') == '###### Hello\\n\\n'\n\n\ndef test_hn_chained():\n    assert md('<h1>First</h1>\\n<h2>Second</h2>\\n<h3>Third</h3>', heading_style=ATX) == '# First\\n\\n\\n## Second\\n\\n\\n### Third\\n\\n'\n    assert md('X<h1>First</h1>', heading_style=ATX) == 'X# First\\n\\n'\n\n\ndef test_hn_nested_tag_heading_style():\n    assert md('<h1>A <p>P</p> C </h1>', heading_style=ATX_CLOSED) == '# A P C #\\n\\n'\n    assert md('<h1>A <p>P</p> C </h1>', heading_style=ATX) == '# A P C\\n\\n'\n\n\ndef test_hn_nested_simple_tag():\n    tag_to_markdown = [\n        (\"strong\", \"**strong**\"),\n        (\"b\", \"**b**\"),\n        (\"em\", \"*em*\"),\n        (\"i\", \"*i*\"),\n        (\"p\", \"p\"),\n        (\"a\", \"a\"),\n        (\"div\", \"div\"),\n        (\"blockquote\", \"blockquote\"),\n    ]\n\n    for tag, markdown in tag_to_markdown:\n        assert md('<h3>A <' + tag + '>' + tag + '</' + tag + '> B</h3>') == '### A ' + markdown + ' B\\n\\n'\n\n    assert md('<h3>A <br>B</h3>', heading_style=ATX) == '### A B\\n\\n'\n\n    # Nested lists not supported\n    # assert md('<h3>A <ul><li>li1</i><li>l2</li></ul></h3>', heading_style=ATX) == '### A li1 li2 B\\n\\n'\n\n\ndef test_hn_nested_img():\n    image_attributes_to_markdown = [\n        (\"\", \"\", \"\"),\n        (\"alt='Alt Text'\", \"Alt Text\", \"\"),\n        (\"alt='Alt Text' title='Optional title'\", \"Alt Text\", \" \\\"Optional title\\\"\"),\n    ]\n    for image_attributes, markdown, title in image_attributes_to_markdown:\n        assert md('<h3>A <img src=\"/path/to/img.jpg\" ' + image_attributes + '/> B</h3>') == '### A ' + markdown + ' B\\n\\n'\n        assert md('<h3>A <img src=\"/path/to/img.jpg\" ' + image_attributes + '/> B</h3>', keep_inline_images_in=['h3']) == '### A ![' + markdown + '](/path/to/img.jpg' + title + ') B\\n\\n'\n\n\ndef test_hn_atx_headings():\n    assert md('<h1>Hello</h1>', heading_style=ATX) == '# Hello\\n\\n'\n    assert md('<h2>Hello</h2>', heading_style=ATX) == '## Hello\\n\\n'\n\n\ndef test_hn_atx_closed_headings():\n    assert md('<h1>Hello</h1>', heading_style=ATX_CLOSED) == '# Hello #\\n\\n'\n    assert md('<h2>Hello</h2>', heading_style=ATX_CLOSED) == '## Hello ##\\n\\n'\n\n\ndef test_head():\n    assert md('<head>head</head>') == 'head'\n\n\ndef test_hr():\n    assert md('Hello<hr>World') == 'Hello\\n\\n---\\n\\nWorld'\n    assert md('Hello<hr />World') == 'Hello\\n\\n---\\n\\nWorld'\n    assert md('<p>Hello</p>\\n<hr>\\n<p>World</p>') == 'Hello\\n\\n\\n\\n\\n---\\n\\n\\nWorld\\n\\n'\n\n\ndef test_i():\n    assert md('<i>Hello</i>') == '*Hello*'\n\n\ndef test_img():\n    assert md('<img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"Optional title\" />') == '![Alt text](/path/to/img.jpg \"Optional title\")'\n    assert md('<img src=\"/path/to/img.jpg\" alt=\"Alt text\" />') == '![Alt text](/path/to/img.jpg)'\n\n\ndef test_kbd():\n    inline_tests('kbd', '`')\n\n\ndef test_p():\n    assert md('<p>hello</p>') == 'hello\\n\\n'\n    assert md('<p>123456789 123456789</p>') == '123456789 123456789\\n\\n'\n    assert md('<p>123456789 123456789</p>', wrap=True, wrap_width=10) == '123456789\\n123456789\\n\\n'\n    assert md('<p><a href=\"https://example.com\">Some long link</a></p>', wrap=True, wrap_width=10) == '[Some long\\nlink](https://example.com)\\n\\n'\n    assert md('<p>12345<br />67890</p>', wrap=True, wrap_width=10, newline_style=BACKSLASH) == '12345\\\\\\n67890\\n\\n'\n    assert md('<p>12345678901<br />12345</p>', wrap=True, wrap_width=10, newline_style=BACKSLASH) == '12345678901\\\\\\n12345\\n\\n'\n\n\ndef test_pre():\n    assert md('<pre>test\\n    foo\\nbar</pre>') == '\\n```\\ntest\\n    foo\\nbar\\n```\\n'\n    assert md('<pre><code>test\\n    foo\\nbar</code></pre>') == '\\n```\\ntest\\n    foo\\nbar\\n```\\n'\n    assert md('<pre>*this_should_not_escape*</pre>') == '\\n```\\n*this_should_not_escape*\\n```\\n'\n    assert md('<pre><span>*this_should_not_escape*</span></pre>') == '\\n```\\n*this_should_not_escape*\\n```\\n'\n    assert md('<pre>\\t\\tthis  should\\t\\tnot  normalize</pre>') == '\\n```\\n\\t\\tthis  should\\t\\tnot  normalize\\n```\\n'\n    assert md('<pre><span>\\t\\tthis  should\\t\\tnot  normalize</span></pre>') == '\\n```\\n\\t\\tthis  should\\t\\tnot  normalize\\n```\\n'\n\n\ndef test_script():\n    assert md('foo <script>var foo=42;</script> bar') == 'foo  bar'\n\n\ndef test_style():\n    assert md('foo <style>h1 { font-size: larger }</style> bar') == 'foo  bar'\n\n\ndef test_s():\n    inline_tests('s', '~~')\n\n\ndef test_samp():\n    inline_tests('samp', '`')\n\n\ndef test_strong():\n    assert md('<strong>Hello</strong>') == '**Hello**'\n\n\ndef test_strong_em_symbol():\n    assert md('<strong>Hello</strong>', strong_em_symbol=UNDERSCORE) == '__Hello__'\n    assert md('<b>Hello</b>', strong_em_symbol=UNDERSCORE) == '__Hello__'\n    assert md('<em>Hello</em>', strong_em_symbol=UNDERSCORE) == '_Hello_'\n    assert md('<i>Hello</i>', strong_em_symbol=UNDERSCORE) == '_Hello_'\n\n\ndef test_sub():\n    assert md('<sub>foo</sub>') == 'foo'\n    assert md('<sub>foo</sub>', sub_symbol='~') == '~foo~'\n\n\ndef test_sup():\n    assert md('<sup>foo</sup>') == 'foo'\n    assert md('<sup>foo</sup>', sup_symbol='^') == '^foo^'\n\n\ndef test_lang():\n    assert md('<pre>test\\n    foo\\nbar</pre>', code_language='python') == '\\n```python\\ntest\\n    foo\\nbar\\n```\\n'\n    assert md('<pre><code>test\\n    foo\\nbar</code></pre>', code_language='javascript') == '\\n```javascript\\ntest\\n    foo\\nbar\\n```\\n'\n\n\ndef test_lang_callback():\n    def callback(el):\n        return el['class'][0] if el.has_attr('class') else None\n\n    assert md('<pre class=\"python\">test\\n    foo\\nbar</pre>', code_language_callback=callback) == '\\n```python\\ntest\\n    foo\\nbar\\n```\\n'\n    assert md('<pre class=\"javascript\"><code>test\\n    foo\\nbar</code></pre>', code_language_callback=callback) == '\\n```javascript\\ntest\\n    foo\\nbar\\n```\\n'\n    assert md('<pre class=\"javascript\"><code class=\"javascript\">test\\n    foo\\nbar</code></pre>', code_language_callback=callback) == '\\n```javascript\\ntest\\n    foo\\nbar\\n```\\n'\n"},"hash":"v9aRkP0kmY"}