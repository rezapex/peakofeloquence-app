{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:cachecontrol:caches:redis_cache.py","body":"# SPDX-FileCopyrightText: 2015 Eric Larson\n#\n# SPDX-License-Identifier: Apache-2.0\nfrom __future__ import annotations\n\n\nfrom datetime import datetime, timezone\nfrom typing import TYPE_CHECKING\n\nfrom pip._vendor.cachecontrol.cache import BaseCache\n\nif TYPE_CHECKING:\n    from redis import Redis\n\n\nclass RedisCache(BaseCache):\n    def __init__(self, conn: Redis[bytes]) -> None:\n        self.conn = conn\n\n    def get(self, key: str) -> bytes | None:\n        return self.conn.get(key)\n\n    def set(\n        self, key: str, value: bytes, expires: int | datetime | None = None\n    ) -> None:\n        if not expires:\n            self.conn.set(key, value)\n        elif isinstance(expires, datetime):\n            now_utc = datetime.now(timezone.utc)\n            if expires.tzinfo is None:\n                now_utc = now_utc.replace(tzinfo=None)\n            delta = expires - now_utc\n            self.conn.setex(key, int(delta.total_seconds()), value)\n        else:\n            self.conn.setex(key, expires, value)\n\n    def delete(self, key: str) -> None:\n        self.conn.delete(key)\n\n    def clear(self) -> None:\n        \"\"\"Helper for clearing all the keys in a database. Use with\n        caution!\"\"\"\n        for key in self.conn.keys():\n            self.conn.delete(key)\n\n    def close(self) -> None:\n        \"\"\"Redis uses connection pooling, no need to close the connection.\"\"\"\n        pass\n"},"hash":"YkCKvX26gc"}