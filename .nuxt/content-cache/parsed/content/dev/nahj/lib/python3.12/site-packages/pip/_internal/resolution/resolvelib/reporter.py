{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:resolution:resolvelib:reporter.py","body":"from collections import defaultdict\nfrom logging import getLogger\nfrom typing import Any, DefaultDict\n\nfrom pip._vendor.resolvelib.reporters import BaseReporter\n\nfrom .base import Candidate, Requirement\n\nlogger = getLogger(__name__)\n\n\nclass PipReporter(BaseReporter):\n    def __init__(self) -> None:\n        self.reject_count_by_package: DefaultDict[str, int] = defaultdict(int)\n\n        self._messages_at_reject_count = {\n            1: (\n                \"pip is looking at multiple versions of {package_name} to \"\n                \"determine which version is compatible with other \"\n                \"requirements. This could take a while.\"\n            ),\n            8: (\n                \"pip is still looking at multiple versions of {package_name} to \"\n                \"determine which version is compatible with other \"\n                \"requirements. This could take a while.\"\n            ),\n            13: (\n                \"This is taking longer than usual. You might need to provide \"\n                \"the dependency resolver with stricter constraints to reduce \"\n                \"runtime. See https://pip.pypa.io/warnings/backtracking for \"\n                \"guidance. If you want to abort this run, press Ctrl + C.\"\n            ),\n        }\n\n    def rejecting_candidate(self, criterion: Any, candidate: Candidate) -> None:\n        self.reject_count_by_package[candidate.name] += 1\n\n        count = self.reject_count_by_package[candidate.name]\n        if count not in self._messages_at_reject_count:\n            return\n\n        message = self._messages_at_reject_count[count]\n        logger.info(\"INFO: %s\", message.format(package_name=candidate.name))\n\n        msg = \"Will try a different candidate, due to conflict:\"\n        for req_info in criterion.information:\n            req, parent = req_info.requirement, req_info.parent\n            # Inspired by Factory.get_installation_error\n            msg += \"\\n    \"\n            if parent:\n                msg += f\"{parent.name} {parent.version} depends on \"\n            else:\n                msg += \"The user requested \"\n            msg += req.format_for_error()\n        logger.debug(msg)\n\n\nclass PipDebuggingReporter(BaseReporter):\n    \"\"\"A reporter that does an info log for every event it sees.\"\"\"\n\n    def starting(self) -> None:\n        logger.info(\"Reporter.starting()\")\n\n    def starting_round(self, index: int) -> None:\n        logger.info(\"Reporter.starting_round(%r)\", index)\n\n    def ending_round(self, index: int, state: Any) -> None:\n        logger.info(\"Reporter.ending_round(%r, state)\", index)\n\n    def ending(self, state: Any) -> None:\n        logger.info(\"Reporter.ending(%r)\", state)\n\n    def adding_requirement(self, requirement: Requirement, parent: Candidate) -> None:\n        logger.info(\"Reporter.adding_requirement(%r, %r)\", requirement, parent)\n\n    def rejecting_candidate(self, criterion: Any, candidate: Candidate) -> None:\n        logger.info(\"Reporter.rejecting_candidate(%r, %r)\", criterion, candidate)\n\n    def pinning(self, candidate: Candidate) -> None:\n        logger.info(\"Reporter.pinning(%r)\", candidate)\n"},"hash":"eLXMkVmWmC"}