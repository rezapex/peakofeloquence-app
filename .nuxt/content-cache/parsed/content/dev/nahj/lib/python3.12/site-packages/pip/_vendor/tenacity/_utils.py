{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:tenacity:_utils.py","body":"# Copyright 2016 Julien Danjou\n# Copyright 2016 Joshua Harlow\n# Copyright 2013-2014 Ray Holder\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport sys\nimport typing\nfrom datetime import timedelta\n\n\n# sys.maxsize:\n# An integer giving the maximum value a variable of type Py_ssize_t can take.\nMAX_WAIT = sys.maxsize / 2\n\n\ndef find_ordinal(pos_num: int) -> str:\n    # See: https://en.wikipedia.org/wiki/English_numerals#Ordinal_numbers\n    if pos_num == 0:\n        return \"th\"\n    elif pos_num == 1:\n        return \"st\"\n    elif pos_num == 2:\n        return \"nd\"\n    elif pos_num == 3:\n        return \"rd\"\n    elif 4 <= pos_num <= 20:\n        return \"th\"\n    else:\n        return find_ordinal(pos_num % 10)\n\n\ndef to_ordinal(pos_num: int) -> str:\n    return f\"{pos_num}{find_ordinal(pos_num)}\"\n\n\ndef get_callback_name(cb: typing.Callable[..., typing.Any]) -> str:\n    \"\"\"Get a callback fully-qualified name.\n\n    If no name can be produced ``repr(cb)`` is called and returned.\n    \"\"\"\n    segments = []\n    try:\n        segments.append(cb.__qualname__)\n    except AttributeError:\n        try:\n            segments.append(cb.__name__)\n        except AttributeError:\n            pass\n    if not segments:\n        return repr(cb)\n    else:\n        try:\n            # When running under sphinx it appears this can be none?\n            if cb.__module__:\n                segments.insert(0, cb.__module__)\n        except AttributeError:\n            pass\n        return \".\".join(segments)\n\n\ntime_unit_type = typing.Union[int, float, timedelta]\n\n\ndef to_seconds(time_unit: time_unit_type) -> float:\n    return float(time_unit.total_seconds() if isinstance(time_unit, timedelta) else time_unit)\n"},"hash":"QZfpI5bhgH"}