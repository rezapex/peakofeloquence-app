{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:colorama:tests:ansi_test.py","body":"# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.\nimport sys\nfrom unittest import TestCase, main\n\nfrom ..ansi import Back, Fore, Style\nfrom ..ansitowin32 import AnsiToWin32\n\nstdout_orig = sys.stdout\nstderr_orig = sys.stderr\n\n\nclass AnsiTest(TestCase):\n\n    def setUp(self):\n        # sanity check: stdout should be a file or StringIO object.\n        # It will only be AnsiToWin32 if init() has previously wrapped it\n        self.assertNotEqual(type(sys.stdout), AnsiToWin32)\n        self.assertNotEqual(type(sys.stderr), AnsiToWin32)\n\n    def tearDown(self):\n        sys.stdout = stdout_orig\n        sys.stderr = stderr_orig\n\n\n    def testForeAttributes(self):\n        self.assertEqual(Fore.BLACK, '\\033[30m')\n        self.assertEqual(Fore.RED, '\\033[31m')\n        self.assertEqual(Fore.GREEN, '\\033[32m')\n        self.assertEqual(Fore.YELLOW, '\\033[33m')\n        self.assertEqual(Fore.BLUE, '\\033[34m')\n        self.assertEqual(Fore.MAGENTA, '\\033[35m')\n        self.assertEqual(Fore.CYAN, '\\033[36m')\n        self.assertEqual(Fore.WHITE, '\\033[37m')\n        self.assertEqual(Fore.RESET, '\\033[39m')\n\n        # Check the light, extended versions.\n        self.assertEqual(Fore.LIGHTBLACK_EX, '\\033[90m')\n        self.assertEqual(Fore.LIGHTRED_EX, '\\033[91m')\n        self.assertEqual(Fore.LIGHTGREEN_EX, '\\033[92m')\n        self.assertEqual(Fore.LIGHTYELLOW_EX, '\\033[93m')\n        self.assertEqual(Fore.LIGHTBLUE_EX, '\\033[94m')\n        self.assertEqual(Fore.LIGHTMAGENTA_EX, '\\033[95m')\n        self.assertEqual(Fore.LIGHTCYAN_EX, '\\033[96m')\n        self.assertEqual(Fore.LIGHTWHITE_EX, '\\033[97m')\n\n\n    def testBackAttributes(self):\n        self.assertEqual(Back.BLACK, '\\033[40m')\n        self.assertEqual(Back.RED, '\\033[41m')\n        self.assertEqual(Back.GREEN, '\\033[42m')\n        self.assertEqual(Back.YELLOW, '\\033[43m')\n        self.assertEqual(Back.BLUE, '\\033[44m')\n        self.assertEqual(Back.MAGENTA, '\\033[45m')\n        self.assertEqual(Back.CYAN, '\\033[46m')\n        self.assertEqual(Back.WHITE, '\\033[47m')\n        self.assertEqual(Back.RESET, '\\033[49m')\n\n        # Check the light, extended versions.\n        self.assertEqual(Back.LIGHTBLACK_EX, '\\033[100m')\n        self.assertEqual(Back.LIGHTRED_EX, '\\033[101m')\n        self.assertEqual(Back.LIGHTGREEN_EX, '\\033[102m')\n        self.assertEqual(Back.LIGHTYELLOW_EX, '\\033[103m')\n        self.assertEqual(Back.LIGHTBLUE_EX, '\\033[104m')\n        self.assertEqual(Back.LIGHTMAGENTA_EX, '\\033[105m')\n        self.assertEqual(Back.LIGHTCYAN_EX, '\\033[106m')\n        self.assertEqual(Back.LIGHTWHITE_EX, '\\033[107m')\n\n\n    def testStyleAttributes(self):\n        self.assertEqual(Style.DIM, '\\033[2m')\n        self.assertEqual(Style.NORMAL, '\\033[22m')\n        self.assertEqual(Style.BRIGHT, '\\033[1m')\n\n\nif __name__ == '__main__':\n    main()\n"},"hash":"VNYmy5xyLi"}