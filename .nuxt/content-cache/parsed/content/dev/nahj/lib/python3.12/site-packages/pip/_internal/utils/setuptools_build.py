{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:utils:setuptools_build.py","body":"import sys\nimport textwrap\nfrom typing import List, Optional, Sequence\n\n# Shim to wrap setup.py invocation with setuptools\n# Note that __file__ is handled via two {!r} *and* %r, to ensure that paths on\n# Windows are correctly handled (it should be \"C:\\\\Users\" not \"C:\\Users\").\n_SETUPTOOLS_SHIM = textwrap.dedent(\n    \"\"\"\n    exec(compile('''\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly\n    #   import from `distutils.core` to work with newer packaging standards.\n    # - It provides a clear error message when setuptools is not installed.\n    # - It sets `sys.argv[0]` to the underlying `setup.py`, when invoking `setup.py` so\n    #   setuptools doesn't think the script is `-c`. This avoids the following warning:\n    #     manifest_maker: standard file '-c' not found\".\n    # - It generates a shim setup.py, for handling setup.cfg-only projects.\n    import os, sys, tokenize\n\n    try:\n        import setuptools\n    except ImportError as error:\n        print(\n            \"ERROR: Can not execute `setup.py` since setuptools is not available in \"\n            \"the build environment.\",\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n    __file__ = %r\n    sys.argv[0] = __file__\n\n    if os.path.exists(__file__):\n        filename = __file__\n        with tokenize.open(__file__) as f:\n            setup_py_code = f.read()\n    else:\n        filename = \"<auto-generated setuptools caller>\"\n        setup_py_code = \"from setuptools import setup; setup()\"\n\n    exec(compile(setup_py_code, filename, \"exec\"))\n    ''' % ({!r},), \"<pip-setuptools-caller>\", \"exec\"))\n    \"\"\"\n).rstrip()\n\n\ndef make_setuptools_shim_args(\n    setup_py_path: str,\n    global_options: Optional[Sequence[str]] = None,\n    no_user_config: bool = False,\n    unbuffered_output: bool = False,\n) -> List[str]:\n    \"\"\"\n    Get setuptools command arguments with shim wrapped setup file invocation.\n\n    :param setup_py_path: The path to setup.py to be wrapped.\n    :param global_options: Additional global options.\n    :param no_user_config: If True, disables personal user configuration.\n    :param unbuffered_output: If True, adds the unbuffered switch to the\n     argument list.\n    \"\"\"\n    args = [sys.executable]\n    if unbuffered_output:\n        args += [\"-u\"]\n    args += [\"-c\", _SETUPTOOLS_SHIM.format(setup_py_path)]\n    if global_options:\n        args += global_options\n    if no_user_config:\n        args += [\"--no-user-cfg\"]\n    return args\n\n\ndef make_setuptools_bdist_wheel_args(\n    setup_py_path: str,\n    global_options: Sequence[str],\n    build_options: Sequence[str],\n    destination_dir: str,\n) -> List[str]:\n    # NOTE: Eventually, we'd want to also -S to the flags here, when we're\n    # isolating. Currently, it breaks Python in virtualenvs, because it\n    # relies on site.py to find parts of the standard library outside the\n    # virtualenv.\n    args = make_setuptools_shim_args(\n        setup_py_path, global_options=global_options, unbuffered_output=True\n    )\n    args += [\"bdist_wheel\", \"-d\", destination_dir]\n    args += build_options\n    return args\n\n\ndef make_setuptools_clean_args(\n    setup_py_path: str,\n    global_options: Sequence[str],\n) -> List[str]:\n    args = make_setuptools_shim_args(\n        setup_py_path, global_options=global_options, unbuffered_output=True\n    )\n    args += [\"clean\", \"--all\"]\n    return args\n\n\ndef make_setuptools_develop_args(\n    setup_py_path: str,\n    *,\n    global_options: Sequence[str],\n    no_user_config: bool,\n    prefix: Optional[str],\n    home: Optional[str],\n    use_user_site: bool,\n) -> List[str]:\n    assert not (use_user_site and prefix)\n\n    args = make_setuptools_shim_args(\n        setup_py_path,\n        global_options=global_options,\n        no_user_config=no_user_config,\n    )\n\n    args += [\"develop\", \"--no-deps\"]\n\n    if prefix:\n        args += [\"--prefix\", prefix]\n    if home is not None:\n        args += [\"--install-dir\", home]\n\n    if use_user_site:\n        args += [\"--user\", \"--prefix=\"]\n\n    return args\n\n\ndef make_setuptools_egg_info_args(\n    setup_py_path: str,\n    egg_info_dir: Optional[str],\n    no_user_config: bool,\n) -> List[str]:\n    args = make_setuptools_shim_args(setup_py_path, no_user_config=no_user_config)\n\n    args += [\"egg_info\"]\n\n    if egg_info_dir:\n        args += [\"--egg-base\", egg_info_dir]\n\n    return args\n"},"hash":"Fa3gbx9MqV"}