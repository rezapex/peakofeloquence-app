{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:models:link.py","body":"import functools\nimport itertools\nimport logging\nimport os\nimport posixpath\nimport re\nimport urllib.parse\nfrom dataclasses import dataclass\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    List,\n    Mapping,\n    NamedTuple,\n    Optional,\n    Tuple,\n    Union,\n)\n\nfrom pip._internal.utils.deprecation import deprecated\nfrom pip._internal.utils.filetypes import WHEEL_EXTENSION\nfrom pip._internal.utils.hashes import Hashes\nfrom pip._internal.utils.misc import (\n    pairwise,\n    redact_auth_from_url,\n    split_auth_from_netloc,\n    splitext,\n)\nfrom pip._internal.utils.models import KeyBasedCompareMixin\nfrom pip._internal.utils.urls import path_to_url, url_to_path\n\nif TYPE_CHECKING:\n    from pip._internal.index.collector import IndexContent\n\nlogger = logging.getLogger(__name__)\n\n\n# Order matters, earlier hashes have a precedence over later hashes for what\n# we will pick to use.\n_SUPPORTED_HASHES = (\"sha512\", \"sha384\", \"sha256\", \"sha224\", \"sha1\", \"md5\")\n\n\n@dataclass(frozen=True)\nclass LinkHash:\n    \"\"\"Links to content may have embedded hash values. This class parses those.\n\n    `name` must be any member of `_SUPPORTED_HASHES`.\n\n    This class can be converted to and from `ArchiveInfo`. While ArchiveInfo intends to\n    be JSON-serializable to conform to PEP 610, this class contains the logic for\n    parsing a hash name and value for correctness, and then checking whether that hash\n    conforms to a schema with `.is_hash_allowed()`.\"\"\"\n\n    name: str\n    value: str\n\n    _hash_url_fragment_re = re.compile(\n        # NB: we do not validate that the second group (.*) is a valid hex\n        # digest. Instead, we simply keep that string in this class, and then check it\n        # against Hashes when hash-checking is needed. This is easier to debug than\n        # proactively discarding an invalid hex digest, as we handle incorrect hashes\n        # and malformed hashes in the same place.\n        r\"[#&]({choices})=([^&]*)\".format(\n            choices=\"|\".join(re.escape(hash_name) for hash_name in _SUPPORTED_HASHES)\n        ),\n    )\n\n    def __post_init__(self) -> None:\n        assert self.name in _SUPPORTED_HASHES\n\n    @classmethod\n    @functools.lru_cache(maxsize=None)\n    def find_hash_url_fragment(cls, url: str) -> Optional[\"LinkHash\"]:\n        \"\"\"Search a string for a checksum algorithm name and encoded output value.\"\"\"\n        match = cls._hash_url_fragment_re.search(url)\n        if match is None:\n            return None\n        name, value = match.groups()\n        return cls(name=name, value=value)\n\n    def as_dict(self) -> Dict[str, str]:\n        return {self.name: self.value}\n\n    def as_hashes(self) -> Hashes:\n        \"\"\"Return a Hashes instance which checks only for the current hash.\"\"\"\n        return Hashes({self.name: [self.value]})\n\n    def is_hash_allowed(self, hashes: Optional[Hashes]) -> bool:\n        \"\"\"\n        Return True if the current hash is allowed by `hashes`.\n        \"\"\"\n        if hashes is None:\n            return False\n        return hashes.is_hash_allowed(self.name, hex_digest=self.value)\n\n\n@dataclass(frozen=True)\nclass MetadataFile:\n    \"\"\"Information about a core metadata file associated with a distribution.\"\"\"\n\n    hashes: Optional[Dict[str, str]]\n\n    def __post_init__(self) -> None:\n        if self.hashes is not None:\n            assert all(name in _SUPPORTED_HASHES for name in self.hashes)\n\n\ndef supported_hashes(hashes: Optional[Dict[str, str]]) -> Optional[Dict[str, str]]:\n    # Remove any unsupported hash types from the mapping. If this leaves no\n    # supported hashes, return None\n    if hashes is None:\n        return None\n    hashes = {n: v for n, v in hashes.items() if n in _SUPPORTED_HASHES}\n    if not hashes:\n        return None\n    return hashes\n\n\ndef _clean_url_path_part(part: str) -> str:\n    \"\"\"\n    Clean a \"part\" of a URL path (i.e. after splitting on \"@\" characters).\n    \"\"\"\n    # We unquote prior to quoting to make sure nothing is double quoted.\n    return urllib.parse.quote(urllib.parse.unquote(part))\n\n\ndef _clean_file_url_path(part: str) -> str:\n    \"\"\"\n    Clean the first part of a URL path that corresponds to a local\n    filesystem path (i.e. the first part after splitting on \"@\" characters).\n    \"\"\"\n    # We unquote prior to quoting to make sure nothing is double quoted.\n    # Also, on Windows the path part might contain a drive letter which\n    # should not be quoted. On Linux where drive letters do not\n    # exist, the colon should be quoted. We rely on urllib.request\n    # to do the right thing here.\n    return urllib.request.pathname2url(urllib.request.url2pathname(part))\n\n\n# percent-encoded:                   /\n_reserved_chars_re = re.compile(\"(@|%2F)\", re.IGNORECASE)\n\n\ndef _clean_url_path(path: str, is_local_path: bool) -> str:\n    \"\"\"\n    Clean the path portion of a URL.\n    \"\"\"\n    if is_local_path:\n        clean_func = _clean_file_url_path\n    else:\n        clean_func = _clean_url_path_part\n\n    # Split on the reserved characters prior to cleaning so that\n    # revision strings in VCS URLs are properly preserved.\n    parts = _reserved_chars_re.split(path)\n\n    cleaned_parts = []\n    for to_clean, reserved in pairwise(itertools.chain(parts, [\"\"])):\n        cleaned_parts.append(clean_func(to_clean))\n        # Normalize %xx escapes (e.g. %2f -> %2F)\n        cleaned_parts.append(reserved.upper())\n\n    return \"\".join(cleaned_parts)\n\n\ndef _ensure_quoted_url(url: str) -> str:\n    \"\"\"\n    Make sure a link is fully quoted.\n    For example, if ' ' occurs in the URL, it will be replaced with \"%20\",\n    and without double-quoting other characters.\n    \"\"\"\n    # Split the URL into parts according to the general structure\n    # `scheme://netloc/path;parameters?query#fragment`.\n    result = urllib.parse.urlparse(url)\n    # If the netloc is empty, then the URL refers to a local filesystem path.\n    is_local_path = not result.netloc\n    path = _clean_url_path(result.path, is_local_path=is_local_path)\n    return urllib.parse.urlunparse(result._replace(path=path))\n\n\nclass Link(KeyBasedCompareMixin):\n    \"\"\"Represents a parsed link from a Package Index's simple URL\"\"\"\n\n    __slots__ = [\n        \"_parsed_url\",\n        \"_url\",\n        \"_hashes\",\n        \"comes_from\",\n        \"requires_python\",\n        \"yanked_reason\",\n        \"metadata_file_data\",\n        \"cache_link_parsing\",\n        \"egg_fragment\",\n    ]\n\n    def __init__(\n        self,\n        url: str,\n        comes_from: Optional[Union[str, \"IndexContent\"]] = None,\n        requires_python: Optional[str] = None,\n        yanked_reason: Optional[str] = None,\n        metadata_file_data: Optional[MetadataFile] = None,\n        cache_link_parsing: bool = True,\n        hashes: Optional[Mapping[str, str]] = None,\n    ) -> None:\n        \"\"\"\n        :param url: url of the resource pointed to (href of the link)\n        :param comes_from: instance of IndexContent where the link was found,\n            or string.\n        :param requires_python: String containing the `Requires-Python`\n            metadata field, specified in PEP 345. This may be specified by\n            a data-requires-python attribute in the HTML link tag, as\n            described in PEP 503.\n        :param yanked_reason: the reason the file has been yanked, if the\n            file has been yanked, or None if the file hasn't been yanked.\n            This is the value of the \"data-yanked\" attribute, if present, in\n            a simple repository HTML link. If the file has been yanked but\n            no reason was provided, this should be the empty string. See\n            PEP 592 for more information and the specification.\n        :param metadata_file_data: the metadata attached to the file, or None if\n            no such metadata is provided. This argument, if not None, indicates\n            that a separate metadata file exists, and also optionally supplies\n            hashes for that file.\n        :param cache_link_parsing: A flag that is used elsewhere to determine\n            whether resources retrieved from this link should be cached. PyPI\n            URLs should generally have this set to False, for example.\n        :param hashes: A mapping of hash names to digests to allow us to\n            determine the validity of a download.\n        \"\"\"\n\n        # The comes_from, requires_python, and metadata_file_data arguments are\n        # only used by classmethods of this class, and are not used in client\n        # code directly.\n\n        # url can be a UNC windows share\n        if url.startswith(\"\\\\\\\\\"):\n            url = path_to_url(url)\n\n        self._parsed_url = urllib.parse.urlsplit(url)\n        # Store the url as a private attribute to prevent accidentally\n        # trying to set a new value.\n        self._url = url\n\n        link_hash = LinkHash.find_hash_url_fragment(url)\n        hashes_from_link = {} if link_hash is None else link_hash.as_dict()\n        if hashes is None:\n            self._hashes = hashes_from_link\n        else:\n            self._hashes = {**hashes, **hashes_from_link}\n\n        self.comes_from = comes_from\n        self.requires_python = requires_python if requires_python else None\n        self.yanked_reason = yanked_reason\n        self.metadata_file_data = metadata_file_data\n\n        super().__init__(key=url, defining_class=Link)\n\n        self.cache_link_parsing = cache_link_parsing\n        self.egg_fragment = self._egg_fragment()\n\n    @classmethod\n    def from_json(\n        cls,\n        file_data: Dict[str, Any],\n        page_url: str,\n    ) -> Optional[\"Link\"]:\n        \"\"\"\n        Convert an pypi json document from a simple repository page into a Link.\n        \"\"\"\n        file_url = file_data.get(\"url\")\n        if file_url is None:\n            return None\n\n        url = _ensure_quoted_url(urllib.parse.urljoin(page_url, file_url))\n        pyrequire = file_data.get(\"requires-python\")\n        yanked_reason = file_data.get(\"yanked\")\n        hashes = file_data.get(\"hashes\", {})\n\n        # PEP 714: Indexes must use the name core-metadata, but\n        # clients should support the old name as a fallback for compatibility.\n        metadata_info = file_data.get(\"core-metadata\")\n        if metadata_info is None:\n            metadata_info = file_data.get(\"dist-info-metadata\")\n\n        # The metadata info value may be a boolean, or a dict of hashes.\n        if isinstance(metadata_info, dict):\n            # The file exists, and hashes have been supplied\n            metadata_file_data = MetadataFile(supported_hashes(metadata_info))\n        elif metadata_info:\n            # The file exists, but there are no hashes\n            metadata_file_data = MetadataFile(None)\n        else:\n            # False or not present: the file does not exist\n            metadata_file_data = None\n\n        # The Link.yanked_reason expects an empty string instead of a boolean.\n        if yanked_reason and not isinstance(yanked_reason, str):\n            yanked_reason = \"\"\n        # The Link.yanked_reason expects None instead of False.\n        elif not yanked_reason:\n            yanked_reason = None\n\n        return cls(\n            url,\n            comes_from=page_url,\n            requires_python=pyrequire,\n            yanked_reason=yanked_reason,\n            hashes=hashes,\n            metadata_file_data=metadata_file_data,\n        )\n\n    @classmethod\n    def from_element(\n        cls,\n        anchor_attribs: Dict[str, Optional[str]],\n        page_url: str,\n        base_url: str,\n    ) -> Optional[\"Link\"]:\n        \"\"\"\n        Convert an anchor element's attributes in a simple repository page to a Link.\n        \"\"\"\n        href = anchor_attribs.get(\"href\")\n        if not href:\n            return None\n\n        url = _ensure_quoted_url(urllib.parse.urljoin(base_url, href))\n        pyrequire = anchor_attribs.get(\"data-requires-python\")\n        yanked_reason = anchor_attribs.get(\"data-yanked\")\n\n        # PEP 714: Indexes must use the name data-core-metadata, but\n        # clients should support the old name as a fallback for compatibility.\n        metadata_info = anchor_attribs.get(\"data-core-metadata\")\n        if metadata_info is None:\n            metadata_info = anchor_attribs.get(\"data-dist-info-metadata\")\n        # The metadata info value may be the string \"true\", or a string of\n        # the form \"hashname=hashval\"\n        if metadata_info == \"true\":\n            # The file exists, but there are no hashes\n            metadata_file_data = MetadataFile(None)\n        elif metadata_info is None:\n            # The file does not exist\n            metadata_file_data = None\n        else:\n            # The file exists, and hashes have been supplied\n            hashname, sep, hashval = metadata_info.partition(\"=\")\n            if sep == \"=\":\n                metadata_file_data = MetadataFile(supported_hashes({hashname: hashval}))\n            else:\n                # Error - data is wrong. Treat as no hashes supplied.\n                logger.debug(\n                    \"Index returned invalid data-dist-info-metadata value: %s\",\n                    metadata_info,\n                )\n                metadata_file_data = MetadataFile(None)\n\n        return cls(\n            url,\n            comes_from=page_url,\n            requires_python=pyrequire,\n            yanked_reason=yanked_reason,\n            metadata_file_data=metadata_file_data,\n        )\n\n    def __str__(self) -> str:\n        if self.requires_python:\n            rp = f\" (requires-python:{self.requires_python})\"\n        else:\n            rp = \"\"\n        if self.comes_from:\n            return f\"{redact_auth_from_url(self._url)} (from {self.comes_from}){rp}\"\n        else:\n            return redact_auth_from_url(str(self._url))\n\n    def __repr__(self) -> str:\n        return f\"<Link {self}>\"\n\n    @property\n    def url(self) -> str:\n        return self._url\n\n    @property\n    def filename(self) -> str:\n        path = self.path.rstrip(\"/\")\n        name = posixpath.basename(path)\n        if not name:\n            # Make sure we don't leak auth information if the netloc\n            # includes a username and password.\n            netloc, user_pass = split_auth_from_netloc(self.netloc)\n            return netloc\n\n        name = urllib.parse.unquote(name)\n        assert name, f\"URL {self._url!r} produced no filename\"\n        return name\n\n    @property\n    def file_path(self) -> str:\n        return url_to_path(self.url)\n\n    @property\n    def scheme(self) -> str:\n        return self._parsed_url.scheme\n\n    @property\n    def netloc(self) -> str:\n        \"\"\"\n        This can contain auth information.\n        \"\"\"\n        return self._parsed_url.netloc\n\n    @property\n    def path(self) -> str:\n        return urllib.parse.unquote(self._parsed_url.path)\n\n    def splitext(self) -> Tuple[str, str]:\n        return splitext(posixpath.basename(self.path.rstrip(\"/\")))\n\n    @property\n    def ext(self) -> str:\n        return self.splitext()[1]\n\n    @property\n    def url_without_fragment(self) -> str:\n        scheme, netloc, path, query, fragment = self._parsed_url\n        return urllib.parse.urlunsplit((scheme, netloc, path, query, \"\"))\n\n    _egg_fragment_re = re.compile(r\"[#&]egg=([^&]*)\")\n\n    # Per PEP 508.\n    _project_name_re = re.compile(\n        r\"^([A-Z0-9]|[A-Z0-9][A-Z0-9._-]*[A-Z0-9])$\", re.IGNORECASE\n    )\n\n    def _egg_fragment(self) -> Optional[str]:\n        match = self._egg_fragment_re.search(self._url)\n        if not match:\n            return None\n\n        # An egg fragment looks like a PEP 508 project name, along with\n        # an optional extras specifier. Anything else is invalid.\n        project_name = match.group(1)\n        if not self._project_name_re.match(project_name):\n            deprecated(\n                reason=f\"{self} contains an egg fragment with a non-PEP 508 name\",\n                replacement=\"to use the req @ url syntax, and remove the egg fragment\",\n                gone_in=\"25.0\",\n                issue=11617,\n            )\n\n        return project_name\n\n    _subdirectory_fragment_re = re.compile(r\"[#&]subdirectory=([^&]*)\")\n\n    @property\n    def subdirectory_fragment(self) -> Optional[str]:\n        match = self._subdirectory_fragment_re.search(self._url)\n        if not match:\n            return None\n        return match.group(1)\n\n    def metadata_link(self) -> Optional[\"Link\"]:\n        \"\"\"Return a link to the associated core metadata file (if any).\"\"\"\n        if self.metadata_file_data is None:\n            return None\n        metadata_url = f\"{self.url_without_fragment}.metadata\"\n        if self.metadata_file_data.hashes is None:\n            return Link(metadata_url)\n        return Link(metadata_url, hashes=self.metadata_file_data.hashes)\n\n    def as_hashes(self) -> Hashes:\n        return Hashes({k: [v] for k, v in self._hashes.items()})\n\n    @property\n    def hash(self) -> Optional[str]:\n        return next(iter(self._hashes.values()), None)\n\n    @property\n    def hash_name(self) -> Optional[str]:\n        return next(iter(self._hashes), None)\n\n    @property\n    def show_url(self) -> str:\n        return posixpath.basename(self._url.split(\"#\", 1)[0].split(\"?\", 1)[0])\n\n    @property\n    def is_file(self) -> bool:\n        return self.scheme == \"file\"\n\n    def is_existing_dir(self) -> bool:\n        return self.is_file and os.path.isdir(self.file_path)\n\n    @property\n    def is_wheel(self) -> bool:\n        return self.ext == WHEEL_EXTENSION\n\n    @property\n    def is_vcs(self) -> bool:\n        from pip._internal.vcs import vcs\n\n        return self.scheme in vcs.all_schemes\n\n    @property\n    def is_yanked(self) -> bool:\n        return self.yanked_reason is not None\n\n    @property\n    def has_hash(self) -> bool:\n        return bool(self._hashes)\n\n    def is_hash_allowed(self, hashes: Optional[Hashes]) -> bool:\n        \"\"\"\n        Return True if the link has a hash and it is allowed by `hashes`.\n        \"\"\"\n        if hashes is None:\n            return False\n        return any(hashes.is_hash_allowed(k, v) for k, v in self._hashes.items())\n\n\nclass _CleanResult(NamedTuple):\n    \"\"\"Convert link for equivalency check.\n\n    This is used in the resolver to check whether two URL-specified requirements\n    likely point to the same distribution and can be considered equivalent. This\n    equivalency logic avoids comparing URLs literally, which can be too strict\n    (e.g. \"a=1&b=2\" vs \"b=2&a=1\") and produce conflicts unexpecting to users.\n\n    Currently this does three things:\n\n    1. Drop the basic auth part. This is technically wrong since a server can\n       serve different content based on auth, but if it does that, it is even\n       impossible to guarantee two URLs without auth are equivalent, since\n       the user can input different auth information when prompted. So the\n       practical solution is to assume the auth doesn't affect the response.\n    2. Parse the query to avoid the ordering issue. Note that ordering under the\n       same key in the query are NOT cleaned; i.e. \"a=1&a=2\" and \"a=2&a=1\" are\n       still considered different.\n    3. Explicitly drop most of the fragment part, except ``subdirectory=`` and\n       hash values, since it should have no impact the downloaded content. Note\n       that this drops the \"egg=\" part historically used to denote the requested\n       project (and extras), which is wrong in the strictest sense, but too many\n       people are supplying it inconsistently to cause superfluous resolution\n       conflicts, so we choose to also ignore them.\n    \"\"\"\n\n    parsed: urllib.parse.SplitResult\n    query: Dict[str, List[str]]\n    subdirectory: str\n    hashes: Dict[str, str]\n\n\ndef _clean_link(link: Link) -> _CleanResult:\n    parsed = link._parsed_url\n    netloc = parsed.netloc.rsplit(\"@\", 1)[-1]\n    # According to RFC 8089, an empty host in file: means localhost.\n    if parsed.scheme == \"file\" and not netloc:\n        netloc = \"localhost\"\n    fragment = urllib.parse.parse_qs(parsed.fragment)\n    if \"egg\" in fragment:\n        logger.debug(\"Ignoring egg= fragment in %s\", link)\n    try:\n        # If there are multiple subdirectory values, use the first one.\n        # This matches the behavior of Link.subdirectory_fragment.\n        subdirectory = fragment[\"subdirectory\"][0]\n    except (IndexError, KeyError):\n        subdirectory = \"\"\n    # If there are multiple hash values under the same algorithm, use the\n    # first one. This matches the behavior of Link.hash_value.\n    hashes = {k: fragment[k][0] for k in _SUPPORTED_HASHES if k in fragment}\n    return _CleanResult(\n        parsed=parsed._replace(netloc=netloc, query=\"\", fragment=\"\"),\n        query=urllib.parse.parse_qs(parsed.query),\n        subdirectory=subdirectory,\n        hashes=hashes,\n    )\n\n\n@functools.lru_cache(maxsize=None)\ndef links_equivalent(link1: Link, link2: Link) -> bool:\n    return _clean_link(link1) == _clean_link(link2)\n"},"hash":"CJXQzKacDP"}