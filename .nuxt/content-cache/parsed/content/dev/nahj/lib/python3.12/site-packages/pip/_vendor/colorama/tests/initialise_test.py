{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:colorama:tests:initialise_test.py","body":"# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.\nimport sys\nfrom unittest import TestCase, main, skipUnless\n\ntry:\n    from unittest.mock import patch, Mock\nexcept ImportError:\n    from mock import patch, Mock\n\nfrom ..ansitowin32 import StreamWrapper\nfrom ..initialise import init, just_fix_windows_console, _wipe_internal_state_for_tests\nfrom .utils import osname, replace_by\n\norig_stdout = sys.stdout\norig_stderr = sys.stderr\n\n\nclass InitTest(TestCase):\n\n    @skipUnless(sys.stdout.isatty(), \"sys.stdout is not a tty\")\n    def setUp(self):\n        # sanity check\n        self.assertNotWrapped()\n\n    def tearDown(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr\n\n    def assertWrapped(self):\n        self.assertIsNot(sys.stdout, orig_stdout, 'stdout should be wrapped')\n        self.assertIsNot(sys.stderr, orig_stderr, 'stderr should be wrapped')\n        self.assertTrue(isinstance(sys.stdout, StreamWrapper),\n            'bad stdout wrapper')\n        self.assertTrue(isinstance(sys.stderr, StreamWrapper),\n            'bad stderr wrapper')\n\n    def assertNotWrapped(self):\n        self.assertIs(sys.stdout, orig_stdout, 'stdout should not be wrapped')\n        self.assertIs(sys.stderr, orig_stderr, 'stderr should not be wrapped')\n\n    @patch('colorama.initialise.reset_all')\n    @patch('colorama.ansitowin32.winapi_test', lambda *_: True)\n    @patch('colorama.ansitowin32.enable_vt_processing', lambda *_: False)\n    def testInitWrapsOnWindows(self, _):\n        with osname(\"nt\"):\n            init()\n            self.assertWrapped()\n\n    @patch('colorama.initialise.reset_all')\n    @patch('colorama.ansitowin32.winapi_test', lambda *_: False)\n    def testInitDoesntWrapOnEmulatedWindows(self, _):\n        with osname(\"nt\"):\n            init()\n            self.assertNotWrapped()\n\n    def testInitDoesntWrapOnNonWindows(self):\n        with osname(\"posix\"):\n            init()\n            self.assertNotWrapped()\n\n    def testInitDoesntWrapIfNone(self):\n        with replace_by(None):\n            init()\n            # We can't use assertNotWrapped here because replace_by(None)\n            # changes stdout/stderr already.\n            self.assertIsNone(sys.stdout)\n            self.assertIsNone(sys.stderr)\n\n    def testInitAutoresetOnWrapsOnAllPlatforms(self):\n        with osname(\"posix\"):\n            init(autoreset=True)\n            self.assertWrapped()\n\n    def testInitWrapOffDoesntWrapOnWindows(self):\n        with osname(\"nt\"):\n            init(wrap=False)\n            self.assertNotWrapped()\n\n    def testInitWrapOffIncompatibleWithAutoresetOn(self):\n        self.assertRaises(ValueError, lambda: init(autoreset=True, wrap=False))\n\n    @patch('colorama.win32.SetConsoleTextAttribute')\n    @patch('colorama.initialise.AnsiToWin32')\n    def testAutoResetPassedOn(self, mockATW32, _):\n        with osname(\"nt\"):\n            init(autoreset=True)\n            self.assertEqual(len(mockATW32.call_args_list), 2)\n            self.assertEqual(mockATW32.call_args_list[1][1]['autoreset'], True)\n            self.assertEqual(mockATW32.call_args_list[0][1]['autoreset'], True)\n\n    @patch('colorama.initialise.AnsiToWin32')\n    def testAutoResetChangeable(self, mockATW32):\n        with osname(\"nt\"):\n            init()\n\n            init(autoreset=True)\n            self.assertEqual(len(mockATW32.call_args_list), 4)\n            self.assertEqual(mockATW32.call_args_list[2][1]['autoreset'], True)\n            self.assertEqual(mockATW32.call_args_list[3][1]['autoreset'], True)\n\n            init()\n            self.assertEqual(len(mockATW32.call_args_list), 6)\n            self.assertEqual(\n                mockATW32.call_args_list[4][1]['autoreset'], False)\n            self.assertEqual(\n                mockATW32.call_args_list[5][1]['autoreset'], False)\n\n\n    @patch('colorama.initialise.atexit.register')\n    def testAtexitRegisteredOnlyOnce(self, mockRegister):\n        init()\n        self.assertTrue(mockRegister.called)\n        mockRegister.reset_mock()\n        init()\n        self.assertFalse(mockRegister.called)\n\n\nclass JustFixWindowsConsoleTest(TestCase):\n    def _reset(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr\n\n    def tearDown(self):\n        self._reset()\n\n    @patch(\"colorama.ansitowin32.winapi_test\", lambda: True)\n    def testJustFixWindowsConsole(self):\n        if sys.platform != \"win32\":\n            # just_fix_windows_console should be a no-op\n            just_fix_windows_console()\n            self.assertIs(sys.stdout, orig_stdout)\n            self.assertIs(sys.stderr, orig_stderr)\n        else:\n            def fake_std():\n                # Emulate stdout=not a tty, stderr=tty\n                # to check that we handle both cases correctly\n                stdout = Mock()\n                stdout.closed = False\n                stdout.isatty.return_value = False\n                stdout.fileno.return_value = 1\n                sys.stdout = stdout\n\n                stderr = Mock()\n                stderr.closed = False\n                stderr.isatty.return_value = True\n                stderr.fileno.return_value = 2\n                sys.stderr = stderr\n\n            for native_ansi in [False, True]:\n                with patch(\n                    'colorama.ansitowin32.enable_vt_processing',\n                    lambda *_: native_ansi\n                ):\n                    self._reset()\n                    fake_std()\n\n                    # Regular single-call test\n                    prev_stdout = sys.stdout\n                    prev_stderr = sys.stderr\n                    just_fix_windows_console()\n                    self.assertIs(sys.stdout, prev_stdout)\n                    if native_ansi:\n                        self.assertIs(sys.stderr, prev_stderr)\n                    else:\n                        self.assertIsNot(sys.stderr, prev_stderr)\n\n                    # second call without resetting is always a no-op\n                    prev_stdout = sys.stdout\n                    prev_stderr = sys.stderr\n                    just_fix_windows_console()\n                    self.assertIs(sys.stdout, prev_stdout)\n                    self.assertIs(sys.stderr, prev_stderr)\n\n                    self._reset()\n                    fake_std()\n\n                    # If init() runs first, just_fix_windows_console should be a no-op\n                    init()\n                    prev_stdout = sys.stdout\n                    prev_stderr = sys.stderr\n                    just_fix_windows_console()\n                    self.assertIs(prev_stdout, sys.stdout)\n                    self.assertIs(prev_stderr, sys.stderr)\n\n\nif __name__ == '__main__':\n    main()\n"},"hash":"HCOgrcpbIG"}