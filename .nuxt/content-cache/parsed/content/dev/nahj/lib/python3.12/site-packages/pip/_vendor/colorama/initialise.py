{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:colorama:initialise.py","body":"# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.\nimport atexit\nimport contextlib\nimport sys\n\nfrom .ansitowin32 import AnsiToWin32\n\n\ndef _wipe_internal_state_for_tests():\n    global orig_stdout, orig_stderr\n    orig_stdout = None\n    orig_stderr = None\n\n    global wrapped_stdout, wrapped_stderr\n    wrapped_stdout = None\n    wrapped_stderr = None\n\n    global atexit_done\n    atexit_done = False\n\n    global fixed_windows_console\n    fixed_windows_console = False\n\n    try:\n        # no-op if it wasn't registered\n        atexit.unregister(reset_all)\n    except AttributeError:\n        # python 2: no atexit.unregister. Oh well, we did our best.\n        pass\n\n\ndef reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\n\n\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError('wrap=False conflicts with any other arg=True')\n\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n\n    if sys.stdout is None:\n        wrapped_stdout = None\n    else:\n        sys.stdout = wrapped_stdout = \\\n            wrap_stream(orig_stdout, convert, strip, autoreset, wrap)\n    if sys.stderr is None:\n        wrapped_stderr = None\n    else:\n        sys.stderr = wrapped_stderr = \\\n            wrap_stream(orig_stderr, convert, strip, autoreset, wrap)\n\n    global atexit_done\n    if not atexit_done:\n        atexit.register(reset_all)\n        atexit_done = True\n\n\ndef deinit():\n    if orig_stdout is not None:\n        sys.stdout = orig_stdout\n    if orig_stderr is not None:\n        sys.stderr = orig_stderr\n\n\ndef just_fix_windows_console():\n    global fixed_windows_console\n\n    if sys.platform != \"win32\":\n        return\n    if fixed_windows_console:\n        return\n    if wrapped_stdout is not None or wrapped_stderr is not None:\n        # Someone already ran init() and it did stuff, so we won't second-guess them\n        return\n\n    # On newer versions of Windows, AnsiToWin32.__init__ will implicitly enable the\n    # native ANSI support in the console as a side-effect. We only need to actually\n    # replace sys.stdout/stderr if we're in the old-style conversion mode.\n    new_stdout = AnsiToWin32(sys.stdout, convert=None, strip=None, autoreset=False)\n    if new_stdout.convert:\n        sys.stdout = new_stdout\n    new_stderr = AnsiToWin32(sys.stderr, convert=None, strip=None, autoreset=False)\n    if new_stderr.convert:\n        sys.stderr = new_stderr\n\n    fixed_windows_console = True\n\n@contextlib.contextmanager\ndef colorama_text(*args, **kwargs):\n    init(*args, **kwargs)\n    try:\n        yield\n    finally:\n        deinit()\n\n\ndef reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:\n        sys.stderr = wrapped_stderr\n\n\ndef wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream,\n            convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():\n            stream = wrapper.stream\n    return stream\n\n\n# Use this for initial setup as well, to reduce code duplication\n_wipe_internal_state_for_tests()\n"},"hash":"YiXoWK5Jk3"}