{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:markdownify:main.py","body":"#!/usr/bin/env python\n\nimport argparse\nimport sys\n\nfrom markdownify import markdownify, ATX, ATX_CLOSED, UNDERLINED, \\\n    SPACES, BACKSLASH, ASTERISK, UNDERSCORE\n\n\ndef main(argv=sys.argv[1:]):\n    parser = argparse.ArgumentParser(\n        prog='markdownify',\n        description='Converts html to markdown.',\n    )\n\n    parser.add_argument('html', nargs='?', type=argparse.FileType('r'),\n                        default=sys.stdin,\n                        help=\"The html file to convert. Defaults to STDIN if not \"\n                        \"provided.\")\n    parser.add_argument('-s', '--strip', nargs='*',\n                        help=\"A list of tags to strip. This option can't be used with \"\n                        \"the --convert option.\")\n    parser.add_argument('-c', '--convert', nargs='*',\n                        help=\"A list of tags to convert. This option can't be used with \"\n                        \"the --strip option.\")\n    parser.add_argument('-a', '--autolinks', action='store_true',\n                        help=\"A boolean indicating whether the 'automatic link' style \"\n                        \"should be used when a 'a' tag's contents match its href.\")\n    parser.add_argument('--default-title', action='store_false',\n                        help=\"A boolean to enable setting the title of a link to its \"\n                        \"href, if no title is given.\")\n    parser.add_argument('--heading-style', default=UNDERLINED,\n                        choices=(ATX, ATX_CLOSED, UNDERLINED),\n                        help=\"Defines how headings should be converted.\")\n    parser.add_argument('-b', '--bullets', default='*+-',\n                        help=\"A string of bullet styles to use; the bullet will \"\n                        \"alternate based on nesting level.\")\n    parser.add_argument('--strong-em-symbol', default=ASTERISK,\n                        choices=(ASTERISK, UNDERSCORE),\n                        help=\"Use * or _ to convert strong and italics text\"),\n    parser.add_argument('--sub-symbol', default='',\n                        help=\"Define the chars that surround '<sub>'.\")\n    parser.add_argument('--sup-symbol', default='',\n                        help=\"Define the chars that surround '<sup>'.\")\n    parser.add_argument('--newline-style', default=SPACES,\n                        choices=(SPACES, BACKSLASH),\n                        help=\"Defines the style of <br> conversions: two spaces \"\n                        \"or backslash at the and of the line thet should break.\")\n    parser.add_argument('--code-language', default='',\n                        help=\"Defines the language that should be assumed for all \"\n                        \"'<pre>' sections.\")\n    parser.add_argument('--no-escape-asterisks', dest='escape_asterisks',\n                        action='store_false',\n                        help=\"Do not escape '*' to '\\\\*' in text.\")\n    parser.add_argument('--no-escape-underscores', dest='escape_underscores',\n                        action='store_false',\n                        help=\"Do not escape '_' to '\\\\_' in text.\")\n    parser.add_argument('-i', '--keep-inline-images-in', nargs='*',\n                        help=\"Images are converted to their alt-text when the images are \"\n                        \"located inside headlines or table cells. If some inline images \"\n                        \"should be converted to markdown images instead, this option can \"\n                        \"be set to a list of parent tags that should be allowed to \"\n                        \"contain inline images.\")\n    parser.add_argument('-w', '--wrap', action='store_true',\n                        help=\"Wrap all text paragraphs at --wrap-width characters.\")\n    parser.add_argument('--wrap-width', type=int, default=80)\n\n    args = parser.parse_args(argv)\n    print(markdownify(**vars(args)))\n\n\nif __name__ == '__main__':\n    main()\n"},"hash":"YqtSJl6Q6m"}