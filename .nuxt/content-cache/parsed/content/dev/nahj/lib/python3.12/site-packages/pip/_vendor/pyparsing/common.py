{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pyparsing:common.py","body":"# common.py\nfrom .core import *\nfrom .helpers import DelimitedList, any_open_tag, any_close_tag\nfrom datetime import datetime\n\n\n# some other useful expressions - using lower-case class name since we are really using this as a namespace\nclass pyparsing_common:\n    \"\"\"Here are some common low-level expressions that may be useful in\n    jump-starting parser development:\n\n    - numeric forms (:class:`integers<integer>`, :class:`reals<real>`,\n      :class:`scientific notation<sci_real>`)\n    - common :class:`programming identifiers<identifier>`\n    - network addresses (:class:`MAC<mac_address>`,\n      :class:`IPv4<ipv4_address>`, :class:`IPv6<ipv6_address>`)\n    - ISO8601 :class:`dates<iso8601_date>` and\n      :class:`datetime<iso8601_datetime>`\n    - :class:`UUID<uuid>`\n    - :class:`comma-separated list<comma_separated_list>`\n    - :class:`url`\n\n    Parse actions:\n\n    - :class:`convert_to_integer`\n    - :class:`convert_to_float`\n    - :class:`convert_to_date`\n    - :class:`convert_to_datetime`\n    - :class:`strip_html_tags`\n    - :class:`upcase_tokens`\n    - :class:`downcase_tokens`\n\n    Example::\n\n        pyparsing_common.number.run_tests('''\n            # any int or real number, returned as the appropriate type\n            100\n            -100\n            +100\n            3.14159\n            6.02e23\n            1e-12\n            ''')\n\n        pyparsing_common.fnumber.run_tests('''\n            # any int or real number, returned as float\n            100\n            -100\n            +100\n            3.14159\n            6.02e23\n            1e-12\n            ''')\n\n        pyparsing_common.hex_integer.run_tests('''\n            # hex numbers\n            100\n            FF\n            ''')\n\n        pyparsing_common.fraction.run_tests('''\n            # fractions\n            1/2\n            -3/4\n            ''')\n\n        pyparsing_common.mixed_integer.run_tests('''\n            # mixed fractions\n            1\n            1/2\n            -3/4\n            1-3/4\n            ''')\n\n        import uuid\n        pyparsing_common.uuid.set_parse_action(token_map(uuid.UUID))\n        pyparsing_common.uuid.run_tests('''\n            # uuid\n            12345678-1234-5678-1234-567812345678\n            ''')\n\n    prints::\n\n        # any int or real number, returned as the appropriate type\n        100\n        [100]\n\n        -100\n        [-100]\n\n        +100\n        [100]\n\n        3.14159\n        [3.14159]\n\n        6.02e23\n        [6.02e+23]\n\n        1e-12\n        [1e-12]\n\n        # any int or real number, returned as float\n        100\n        [100.0]\n\n        -100\n        [-100.0]\n\n        +100\n        [100.0]\n\n        3.14159\n        [3.14159]\n\n        6.02e23\n        [6.02e+23]\n\n        1e-12\n        [1e-12]\n\n        # hex numbers\n        100\n        [256]\n\n        FF\n        [255]\n\n        # fractions\n        1/2\n        [0.5]\n\n        -3/4\n        [-0.75]\n\n        # mixed fractions\n        1\n        [1]\n\n        1/2\n        [0.5]\n\n        -3/4\n        [-0.75]\n\n        1-3/4\n        [1.75]\n\n        # uuid\n        12345678-1234-5678-1234-567812345678\n        [UUID('12345678-1234-5678-1234-567812345678')]\n    \"\"\"\n\n    convert_to_integer = token_map(int)\n    \"\"\"\n    Parse action for converting parsed integers to Python int\n    \"\"\"\n\n    convert_to_float = token_map(float)\n    \"\"\"\n    Parse action for converting parsed numbers to Python float\n    \"\"\"\n\n    integer = Word(nums).set_name(\"integer\").set_parse_action(convert_to_integer)\n    \"\"\"expression that parses an unsigned integer, returns an int\"\"\"\n\n    hex_integer = (\n        Word(hexnums).set_name(\"hex integer\").set_parse_action(token_map(int, 16))\n    )\n    \"\"\"expression that parses a hexadecimal integer, returns an int\"\"\"\n\n    signed_integer = (\n        Regex(r\"[+-]?\\d+\")\n        .set_name(\"signed integer\")\n        .set_parse_action(convert_to_integer)\n    )\n    \"\"\"expression that parses an integer with optional leading sign, returns an int\"\"\"\n\n    fraction = (\n        signed_integer().set_parse_action(convert_to_float)\n        + \"/\"\n        + signed_integer().set_parse_action(convert_to_float)\n    ).set_name(\"fraction\")\n    \"\"\"fractional expression of an integer divided by an integer, returns a float\"\"\"\n    fraction.add_parse_action(lambda tt: tt[0] / tt[-1])\n\n    mixed_integer = (\n        fraction | signed_integer + Opt(Opt(\"-\").suppress() + fraction)\n    ).set_name(\"fraction or mixed integer-fraction\")\n    \"\"\"mixed integer of the form 'integer - fraction', with optional leading integer, returns float\"\"\"\n    mixed_integer.add_parse_action(sum)\n\n    real = (\n        Regex(r\"[+-]?(?:\\d+\\.\\d*|\\.\\d+)\")\n        .set_name(\"real number\")\n        .set_parse_action(convert_to_float)\n    )\n    \"\"\"expression that parses a floating point number and returns a float\"\"\"\n\n    sci_real = (\n        Regex(r\"[+-]?(?:\\d+(?:[eE][+-]?\\d+)|(?:\\d+\\.\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?)\")\n        .set_name(\"real number with scientific notation\")\n        .set_parse_action(convert_to_float)\n    )\n    \"\"\"expression that parses a floating point number with optional\n    scientific notation and returns a float\"\"\"\n\n    # streamlining this expression makes the docs nicer-looking\n    number = (sci_real | real | signed_integer).setName(\"number\").streamline()\n    \"\"\"any numeric expression, returns the corresponding Python type\"\"\"\n\n    fnumber = (\n        Regex(r\"[+-]?\\d+\\.?\\d*([eE][+-]?\\d+)?\")\n        .set_name(\"fnumber\")\n        .set_parse_action(convert_to_float)\n    )\n    \"\"\"any int or real number, returned as float\"\"\"\n\n    identifier = Word(identchars, identbodychars).set_name(\"identifier\")\n    \"\"\"typical code identifier (leading alpha or '_', followed by 0 or more alphas, nums, or '_')\"\"\"\n\n    ipv4_address = Regex(\n        r\"(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})(\\.(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})){3}\"\n    ).set_name(\"IPv4 address\")\n    \"IPv4 address (``0.0.0.0 - 255.255.255.255``)\"\n\n    _ipv6_part = Regex(r\"[0-9a-fA-F]{1,4}\").set_name(\"hex_integer\")\n    _full_ipv6_address = (_ipv6_part + (\":\" + _ipv6_part) * 7).set_name(\n        \"full IPv6 address\"\n    )\n    _short_ipv6_address = (\n        Opt(_ipv6_part + (\":\" + _ipv6_part) * (0, 6))\n        + \"::\"\n        + Opt(_ipv6_part + (\":\" + _ipv6_part) * (0, 6))\n    ).set_name(\"short IPv6 address\")\n    _short_ipv6_address.add_condition(\n        lambda t: sum(1 for tt in t if pyparsing_common._ipv6_part.matches(tt)) < 8\n    )\n    _mixed_ipv6_address = (\"::ffff:\" + ipv4_address).set_name(\"mixed IPv6 address\")\n    ipv6_address = Combine(\n        (_full_ipv6_address | _mixed_ipv6_address | _short_ipv6_address).set_name(\n            \"IPv6 address\"\n        )\n    ).set_name(\"IPv6 address\")\n    \"IPv6 address (long, short, or mixed form)\"\n\n    mac_address = Regex(\n        r\"[0-9a-fA-F]{2}([:.-])[0-9a-fA-F]{2}(?:\\1[0-9a-fA-F]{2}){4}\"\n    ).set_name(\"MAC address\")\n    \"MAC address xx:xx:xx:xx:xx (may also have '-' or '.' delimiters)\"\n\n    @staticmethod\n    def convert_to_date(fmt: str = \"%Y-%m-%d\"):\n        \"\"\"\n        Helper to create a parse action for converting parsed date string to Python datetime.date\n\n        Params -\n        - fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%d\"``)\n\n        Example::\n\n            date_expr = pyparsing_common.iso8601_date.copy()\n            date_expr.set_parse_action(pyparsing_common.convert_to_date())\n            print(date_expr.parse_string(\"1999-12-31\"))\n\n        prints::\n\n            [datetime.date(1999, 12, 31)]\n        \"\"\"\n\n        def cvt_fn(ss, ll, tt):\n            try:\n                return datetime.strptime(tt[0], fmt).date()\n            except ValueError as ve:\n                raise ParseException(ss, ll, str(ve))\n\n        return cvt_fn\n\n    @staticmethod\n    def convert_to_datetime(fmt: str = \"%Y-%m-%dT%H:%M:%S.%f\"):\n        \"\"\"Helper to create a parse action for converting parsed\n        datetime string to Python datetime.datetime\n\n        Params -\n        - fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%dT%H:%M:%S.%f\"``)\n\n        Example::\n\n            dt_expr = pyparsing_common.iso8601_datetime.copy()\n            dt_expr.set_parse_action(pyparsing_common.convert_to_datetime())\n            print(dt_expr.parse_string(\"1999-12-31T23:59:59.999\"))\n\n        prints::\n\n            [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]\n        \"\"\"\n\n        def cvt_fn(s, l, t):\n            try:\n                return datetime.strptime(t[0], fmt)\n            except ValueError as ve:\n                raise ParseException(s, l, str(ve))\n\n        return cvt_fn\n\n    iso8601_date = Regex(\n        r\"(?P<year>\\d{4})(?:-(?P<month>\\d\\d)(?:-(?P<day>\\d\\d))?)?\"\n    ).set_name(\"ISO8601 date\")\n    \"ISO8601 date (``yyyy-mm-dd``)\"\n\n    iso8601_datetime = Regex(\n        r\"(?P<year>\\d{4})-(?P<month>\\d\\d)-(?P<day>\\d\\d)[T ](?P<hour>\\d\\d):(?P<minute>\\d\\d)(:(?P<second>\\d\\d(\\.\\d*)?)?)?(?P<tz>Z|[+-]\\d\\d:?\\d\\d)?\"\n    ).set_name(\"ISO8601 datetime\")\n    \"ISO8601 datetime (``yyyy-mm-ddThh:mm:ss.s(Z|+-00:00)``) - trailing seconds, milliseconds, and timezone optional; accepts separating ``'T'`` or ``' '``\"\n\n    uuid = Regex(r\"[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}\").set_name(\"UUID\")\n    \"UUID (``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx``)\"\n\n    _html_stripper = any_open_tag.suppress() | any_close_tag.suppress()\n\n    @staticmethod\n    def strip_html_tags(s: str, l: int, tokens: ParseResults):\n        \"\"\"Parse action to remove HTML tags from web page HTML source\n\n        Example::\n\n            # strip HTML links from normal text\n            text = '<td>More info at the <a href=\"https://github.com/pyparsing/pyparsing/wiki\">pyparsing</a> wiki page</td>'\n            td, td_end = make_html_tags(\"TD\")\n            table_text = td + SkipTo(td_end).set_parse_action(pyparsing_common.strip_html_tags)(\"body\") + td_end\n            print(table_text.parse_string(text).body)\n\n        Prints::\n\n            More info at the pyparsing wiki page\n        \"\"\"\n        return pyparsing_common._html_stripper.transform_string(tokens[0])\n\n    _commasepitem = (\n        Combine(\n            OneOrMore(\n                ~Literal(\",\")\n                + ~LineEnd()\n                + Word(printables, exclude_chars=\",\")\n                + Opt(White(\" \\t\") + ~FollowedBy(LineEnd() | \",\"))\n            )\n        )\n        .streamline()\n        .set_name(\"commaItem\")\n    )\n    comma_separated_list = DelimitedList(\n        Opt(quoted_string.copy() | _commasepitem, default=\"\")\n    ).set_name(\"comma separated list\")\n    \"\"\"Predefined expression of 1 or more printable words or quoted strings, separated by commas.\"\"\"\n\n    upcase_tokens = staticmethod(token_map(lambda t: t.upper()))\n    \"\"\"Parse action to convert tokens to upper case.\"\"\"\n\n    downcase_tokens = staticmethod(token_map(lambda t: t.lower()))\n    \"\"\"Parse action to convert tokens to lower case.\"\"\"\n\n    # fmt: off\n    url = Regex(\n        # https://mathiasbynens.be/demo/url-regex\n        # https://gist.github.com/dperini/729294\n        r\"(?P<url>\" +\n        # protocol identifier (optional)\n        # short syntax // still required\n        r\"(?:(?:(?P<scheme>https?|ftp):)?\\/\\/)\" +\n        # user:pass BasicAuth (optional)\n        r\"(?:(?P<auth>\\S+(?::\\S*)?)@)?\" +\n        r\"(?P<host>\" +\n        # IP address exclusion\n        # private & local networks\n        r\"(?!(?:10|127)(?:\\.\\d{1,3}){3})\" +\n        r\"(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})\" +\n        r\"(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})\" +\n        # IP address dotted notation octets\n        # excludes loopback network 0.0.0.0\n        # excludes reserved space >= 224.0.0.0\n        # excludes network & broadcast addresses\n        # (first & last IP address of each class)\n        r\"(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])\" +\n        r\"(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}\" +\n        r\"(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))\" +\n        r\"|\" +\n        # host & domain names, may end with dot\n        # can be replaced by a shortest alternative\n        # (?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.)+\n        r\"(?:\" +\n        r\"(?:\" +\n        r\"[a-z0-9\\u00a1-\\uffff]\" +\n        r\"[a-z0-9\\u00a1-\\uffff_-]{0,62}\" +\n        r\")?\" +\n        r\"[a-z0-9\\u00a1-\\uffff]\\.\" +\n        r\")+\" +\n        # TLD identifier name, may end with dot\n        r\"(?:[a-z\\u00a1-\\uffff]{2,}\\.?)\" +\n        r\")\" +\n        # port number (optional)\n        r\"(:(?P<port>\\d{2,5}))?\" +\n        # resource path (optional)\n        r\"(?P<path>\\/[^?# ]*)?\" +\n        # query string (optional)\n        r\"(\\?(?P<query>[^#]*))?\" +\n        # fragment (optional)\n        r\"(#(?P<fragment>\\S*))?\" +\n        r\")\"\n    ).set_name(\"url\")\n    \"\"\"URL (http/https/ftp scheme)\"\"\"\n    # fmt: on\n\n    # pre-PEP8 compatibility names\n    convertToInteger = convert_to_integer\n    \"\"\"Deprecated - use :class:`convert_to_integer`\"\"\"\n    convertToFloat = convert_to_float\n    \"\"\"Deprecated - use :class:`convert_to_float`\"\"\"\n    convertToDate = convert_to_date\n    \"\"\"Deprecated - use :class:`convert_to_date`\"\"\"\n    convertToDatetime = convert_to_datetime\n    \"\"\"Deprecated - use :class:`convert_to_datetime`\"\"\"\n    stripHTMLTags = strip_html_tags\n    \"\"\"Deprecated - use :class:`strip_html_tags`\"\"\"\n    upcaseTokens = upcase_tokens\n    \"\"\"Deprecated - use :class:`upcase_tokens`\"\"\"\n    downcaseTokens = downcase_tokens\n    \"\"\"Deprecated - use :class:`downcase_tokens`\"\"\"\n\n\n_builtin_exprs = [\n    v for v in vars(pyparsing_common).values() if isinstance(v, ParserElement)\n]\n"},"hash":"UfSDAmNINC"}