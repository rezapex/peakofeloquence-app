{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pyparsing:core.py","body":"#\n# core.py\n#\n\nfrom collections import deque\nimport os\nimport typing\nfrom typing import (\n    Any,\n    Callable,\n    Generator,\n    List,\n    NamedTuple,\n    Sequence,\n    Set,\n    TextIO,\n    Tuple,\n    Union,\n    cast,\n)\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nimport string\nimport copy\nimport warnings\nimport re\nimport sys\nfrom collections.abc import Iterable\nimport traceback\nimport types\nfrom operator import itemgetter\nfrom functools import wraps\nfrom threading import RLock\nfrom pathlib import Path\n\nfrom .util import (\n    _FifoCache,\n    _UnboundedCache,\n    __config_flags,\n    _collapse_string_to_ranges,\n    _escape_regex_range_chars,\n    _bslash,\n    _flatten,\n    LRUMemo as _LRUMemo,\n    UnboundedMemo as _UnboundedMemo,\n    replaced_by_pep8,\n)\nfrom .exceptions import *\nfrom .actions import *\nfrom .results import ParseResults, _ParseResultsWithOffset\nfrom .unicode import pyparsing_unicode\n\n_MAX_INT = sys.maxsize\nstr_type: Tuple[type, ...] = (str, bytes)\n\n#\n# Copyright (c) 2003-2022  Paul T. McGuire\n#\n# Permission is hereby granted, free of charge, to any person obtaining\n# a copy of this software and associated documentation files (the\n# \"Software\"), to deal in the Software without restriction, including\n# without limitation the rights to use, copy, modify, merge, publish,\n# distribute, sublicense, and/or sell copies of the Software, and to\n# permit persons to whom the Software is furnished to do so, subject to\n# the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n\nif sys.version_info >= (3, 8):\n    from functools import cached_property\nelse:\n\n    class cached_property:\n        def __init__(self, func):\n            self._func = func\n\n        def __get__(self, instance, owner=None):\n            ret = instance.__dict__[self._func.__name__] = self._func(instance)\n            return ret\n\n\nclass __compat__(__config_flags):\n    \"\"\"\n    A cross-version compatibility configuration for pyparsing features that will be\n    released in a future version. By setting values in this configuration to True,\n    those features can be enabled in prior versions for compatibility development\n    and testing.\n\n    - ``collect_all_And_tokens`` - flag to enable fix for Issue #63 that fixes erroneous grouping\n      of results names when an :class:`And` expression is nested within an :class:`Or` or :class:`MatchFirst`;\n      maintained for compatibility, but setting to ``False`` no longer restores pre-2.3.1\n      behavior\n    \"\"\"\n\n    _type_desc = \"compatibility\"\n\n    collect_all_And_tokens = True\n\n    _all_names = [__ for __ in locals() if not __.startswith(\"_\")]\n    _fixed_names = \"\"\"\n        collect_all_And_tokens\n        \"\"\".split()\n\n\nclass __diag__(__config_flags):\n    _type_desc = \"diagnostic\"\n\n    warn_multiple_tokens_in_named_alternation = False\n    warn_ungrouped_named_tokens_in_collection = False\n    warn_name_set_on_empty_Forward = False\n    warn_on_parse_using_empty_Forward = False\n    warn_on_assignment_to_Forward = False\n    warn_on_multiple_string_args_to_oneof = False\n    warn_on_match_first_with_lshift_operator = False\n    enable_debug_on_named_expressions = False\n\n    _all_names = [__ for __ in locals() if not __.startswith(\"_\")]\n    _warning_names = [name for name in _all_names if name.startswith(\"warn\")]\n    _debug_names = [name for name in _all_names if name.startswith(\"enable_debug\")]\n\n    @classmethod\n    def enable_all_warnings(cls) -> None:\n        for name in cls._warning_names:\n            cls.enable(name)\n\n\nclass Diagnostics(Enum):\n    \"\"\"\n    Diagnostic configuration (all default to disabled)\n\n    - ``warn_multiple_tokens_in_named_alternation`` - flag to enable warnings when a results\n      name is defined on a :class:`MatchFirst` or :class:`Or` expression with one or more :class:`And` subexpressions\n    - ``warn_ungrouped_named_tokens_in_collection`` - flag to enable warnings when a results\n      name is defined on a containing expression with ungrouped subexpressions that also\n      have results names\n    - ``warn_name_set_on_empty_Forward`` - flag to enable warnings when a :class:`Forward` is defined\n      with a results name, but has no contents defined\n    - ``warn_on_parse_using_empty_Forward`` - flag to enable warnings when a :class:`Forward` is\n      defined in a grammar but has never had an expression attached to it\n    - ``warn_on_assignment_to_Forward`` - flag to enable warnings when a :class:`Forward` is defined\n      but is overwritten by assigning using ``'='`` instead of ``'<<='`` or ``'<<'``\n    - ``warn_on_multiple_string_args_to_oneof`` - flag to enable warnings when :class:`one_of` is\n      incorrectly called with multiple str arguments\n    - ``enable_debug_on_named_expressions`` - flag to auto-enable debug on all subsequent\n      calls to :class:`ParserElement.set_name`\n\n    Diagnostics are enabled/disabled by calling :class:`enable_diag` and :class:`disable_diag`.\n    All warnings can be enabled by calling :class:`enable_all_warnings`.\n    \"\"\"\n\n    warn_multiple_tokens_in_named_alternation = 0\n    warn_ungrouped_named_tokens_in_collection = 1\n    warn_name_set_on_empty_Forward = 2\n    warn_on_parse_using_empty_Forward = 3\n    warn_on_assignment_to_Forward = 4\n    warn_on_multiple_string_args_to_oneof = 5\n    warn_on_match_first_with_lshift_operator = 6\n    enable_debug_on_named_expressions = 7\n\n\ndef enable_diag(diag_enum: Diagnostics) -> None:\n    \"\"\"\n    Enable a global pyparsing diagnostic flag (see :class:`Diagnostics`).\n    \"\"\"\n    __diag__.enable(diag_enum.name)\n\n\ndef disable_diag(diag_enum: Diagnostics) -> None:\n    \"\"\"\n    Disable a global pyparsing diagnostic flag (see :class:`Diagnostics`).\n    \"\"\"\n    __diag__.disable(diag_enum.name)\n\n\ndef enable_all_warnings() -> None:\n    \"\"\"\n    Enable all global pyparsing diagnostic warnings (see :class:`Diagnostics`).\n    \"\"\"\n    __diag__.enable_all_warnings()\n\n\n# hide abstract class\ndel __config_flags\n\n\ndef _should_enable_warnings(\n    cmd_line_warn_options: typing.Iterable[str], warn_env_var: typing.Optional[str]\n) -> bool:\n    enable = bool(warn_env_var)\n    for warn_opt in cmd_line_warn_options:\n        w_action, w_message, w_category, w_module, w_line = (warn_opt + \"::::\").split(\n            \":\"\n        )[:5]\n        if not w_action.lower().startswith(\"i\") and (\n            not (w_message or w_category or w_module) or w_module == \"pyparsing\"\n        ):\n            enable = True\n        elif w_action.lower().startswith(\"i\") and w_module in (\"pyparsing\", \"\"):\n            enable = False\n    return enable\n\n\nif _should_enable_warnings(\n    sys.warnoptions, os.environ.get(\"PYPARSINGENABLEALLWARNINGS\")\n):\n    enable_all_warnings()\n\n\n# build list of single arg builtins, that can be used as parse actions\n_single_arg_builtins = {\n    sum,\n    len,\n    sorted,\n    reversed,\n    list,\n    tuple,\n    set,\n    any,\n    all,\n    min,\n    max,\n}\n\n_generatorType = types.GeneratorType\nParseImplReturnType = Tuple[int, Any]\nPostParseReturnType = Union[ParseResults, Sequence[ParseResults]]\nParseAction = Union[\n    Callable[[], Any],\n    Callable[[ParseResults], Any],\n    Callable[[int, ParseResults], Any],\n    Callable[[str, int, ParseResults], Any],\n]\nParseCondition = Union[\n    Callable[[], bool],\n    Callable[[ParseResults], bool],\n    Callable[[int, ParseResults], bool],\n    Callable[[str, int, ParseResults], bool],\n]\nParseFailAction = Callable[[str, int, \"ParserElement\", Exception], None]\nDebugStartAction = Callable[[str, int, \"ParserElement\", bool], None]\nDebugSuccessAction = Callable[\n    [str, int, int, \"ParserElement\", ParseResults, bool], None\n]\nDebugExceptionAction = Callable[[str, int, \"ParserElement\", Exception, bool], None]\n\n\nalphas = string.ascii_uppercase + string.ascii_lowercase\nidentchars = pyparsing_unicode.Latin1.identchars\nidentbodychars = pyparsing_unicode.Latin1.identbodychars\nnums = \"0123456789\"\nhexnums = nums + \"ABCDEFabcdef\"\nalphanums = alphas + nums\nprintables = \"\".join([c for c in string.printable if c not in string.whitespace])\n\n_trim_arity_call_line: traceback.StackSummary = None  # type: ignore[assignment]\n\n\ndef _trim_arity(func, max_limit=3):\n    \"\"\"decorator to trim function calls to match the arity of the target\"\"\"\n    global _trim_arity_call_line\n\n    if func in _single_arg_builtins:\n        return lambda s, l, t: func(t)\n\n    limit = 0\n    found_arity = False\n\n    # synthesize what would be returned by traceback.extract_stack at the call to\n    # user's parse action 'func', so that we don't incur call penalty at parse time\n\n    # fmt: off\n    LINE_DIFF = 7\n    # IF ANY CODE CHANGES, EVEN JUST COMMENTS OR BLANK LINES, BETWEEN THE NEXT LINE AND\n    # THE CALL TO FUNC INSIDE WRAPPER, LINE_DIFF MUST BE MODIFIED!!!!\n    _trim_arity_call_line = (_trim_arity_call_line or traceback.extract_stack(limit=2)[-1])\n    pa_call_line_synth = (_trim_arity_call_line[0], _trim_arity_call_line[1] + LINE_DIFF)\n\n    def wrapper(*args):\n        nonlocal found_arity, limit\n        while 1:\n            try:\n                ret = func(*args[limit:])\n                found_arity = True\n                return ret\n            except TypeError as te:\n                # re-raise TypeErrors if they did not come from our arity testing\n                if found_arity:\n                    raise\n                else:\n                    tb = te.__traceback__\n                    frames = traceback.extract_tb(tb, limit=2)\n                    frame_summary = frames[-1]\n                    trim_arity_type_error = (\n                        [frame_summary[:2]][-1][:2] == pa_call_line_synth\n                    )\n                    del tb\n\n                    if trim_arity_type_error:\n                        if limit < max_limit:\n                            limit += 1\n                            continue\n\n                    raise\n    # fmt: on\n\n    # copy func name to wrapper for sensible debug output\n    # (can't use functools.wraps, since that messes with function signature)\n    func_name = getattr(func, \"__name__\", getattr(func, \"__class__\").__name__)\n    wrapper.__name__ = func_name\n    wrapper.__doc__ = func.__doc__\n\n    return wrapper\n\n\ndef condition_as_parse_action(\n    fn: ParseCondition, message: typing.Optional[str] = None, fatal: bool = False\n) -> ParseAction:\n    \"\"\"\n    Function to convert a simple predicate function that returns ``True`` or ``False``\n    into a parse action. Can be used in places when a parse action is required\n    and :class:`ParserElement.add_condition` cannot be used (such as when adding a condition\n    to an operator level in :class:`infix_notation`).\n\n    Optional keyword arguments:\n\n    - ``message`` - define a custom message to be used in the raised exception\n    - ``fatal`` - if True, will raise :class:`ParseFatalException` to stop parsing immediately;\n      otherwise will raise :class:`ParseException`\n\n    \"\"\"\n    msg = message if message is not None else \"failed user-defined condition\"\n    exc_type = ParseFatalException if fatal else ParseException\n    fn = _trim_arity(fn)\n\n    @wraps(fn)\n    def pa(s, l, t):\n        if not bool(fn(s, l, t)):\n            raise exc_type(s, l, msg)\n\n    return pa\n\n\ndef _default_start_debug_action(\n    instring: str, loc: int, expr: \"ParserElement\", cache_hit: bool = False\n):\n    cache_hit_str = \"*\" if cache_hit else \"\"\n    print(\n        (\n            f\"{cache_hit_str}Match {expr} at loc {loc}({lineno(loc, instring)},{col(loc, instring)})\\n\"\n            f\"  {line(loc, instring)}\\n\"\n            f\"  {' ' * (col(loc, instring) - 1)}^\"\n        )\n    )\n\n\ndef _default_success_debug_action(\n    instring: str,\n    startloc: int,\n    endloc: int,\n    expr: \"ParserElement\",\n    toks: ParseResults,\n    cache_hit: bool = False,\n):\n    cache_hit_str = \"*\" if cache_hit else \"\"\n    print(f\"{cache_hit_str}Matched {expr} -> {toks.as_list()}\")\n\n\ndef _default_exception_debug_action(\n    instring: str,\n    loc: int,\n    expr: \"ParserElement\",\n    exc: Exception,\n    cache_hit: bool = False,\n):\n    cache_hit_str = \"*\" if cache_hit else \"\"\n    print(f\"{cache_hit_str}Match {expr} failed, {type(exc).__name__} raised: {exc}\")\n\n\ndef null_debug_action(*args):\n    \"\"\"'Do-nothing' debug action, to suppress debugging output during parsing.\"\"\"\n\n\nclass ParserElement(ABC):\n    \"\"\"Abstract base level parser element class.\"\"\"\n\n    DEFAULT_WHITE_CHARS: str = \" \\n\\t\\r\"\n    verbose_stacktrace: bool = False\n    _literalStringClass: type = None  # type: ignore[assignment]\n\n    @staticmethod\n    def set_default_whitespace_chars(chars: str) -> None:\n        r\"\"\"\n        Overrides the default whitespace chars\n\n        Example::\n\n            # default whitespace chars are space, <TAB> and newline\n            Word(alphas)[1, ...].parse_string(\"abc def\\nghi jkl\")  # -> ['abc', 'def', 'ghi', 'jkl']\n\n            # change to just treat newline as significant\n            ParserElement.set_default_whitespace_chars(\" \\t\")\n            Word(alphas)[1, ...].parse_string(\"abc def\\nghi jkl\")  # -> ['abc', 'def']\n        \"\"\"\n        ParserElement.DEFAULT_WHITE_CHARS = chars\n\n        # update whitespace all parse expressions defined in this module\n        for expr in _builtin_exprs:\n            if expr.copyDefaultWhiteChars:\n                expr.whiteChars = set(chars)\n\n    @staticmethod\n    def inline_literals_using(cls: type) -> None:\n        \"\"\"\n        Set class to be used for inclusion of string literals into a parser.\n\n        Example::\n\n            # default literal class used is Literal\n            integer = Word(nums)\n            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")\n\n            date_str.parse_string(\"1999/12/31\")  # -> ['1999', '/', '12', '/', '31']\n\n\n            # change to Suppress\n            ParserElement.inline_literals_using(Suppress)\n            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")\n\n            date_str.parse_string(\"1999/12/31\")  # -> ['1999', '12', '31']\n        \"\"\"\n        ParserElement._literalStringClass = cls\n\n    @classmethod\n    def using_each(cls, seq, **class_kwargs):\n        \"\"\"\n        Yields a sequence of class(obj, **class_kwargs) for obj in seq.\n\n        Example::\n\n            LPAR, RPAR, LBRACE, RBRACE, SEMI = Suppress.using_each(\"(){};\")\n\n        \"\"\"\n        yield from (cls(obj, **class_kwargs) for obj in seq)\n\n    class DebugActions(NamedTuple):\n        debug_try: typing.Optional[DebugStartAction]\n        debug_match: typing.Optional[DebugSuccessAction]\n        debug_fail: typing.Optional[DebugExceptionAction]\n\n    def __init__(self, savelist: bool = False):\n        self.parseAction: List[ParseAction] = list()\n        self.failAction: typing.Optional[ParseFailAction] = None\n        self.customName: str = None  # type: ignore[assignment]\n        self._defaultName: typing.Optional[str] = None\n        self.resultsName: str = None  # type: ignore[assignment]\n        self.saveAsList = savelist\n        self.skipWhitespace = True\n        self.whiteChars = set(ParserElement.DEFAULT_WHITE_CHARS)\n        self.copyDefaultWhiteChars = True\n        # used when checking for left-recursion\n        self.mayReturnEmpty = False\n        self.keepTabs = False\n        self.ignoreExprs: List[\"ParserElement\"] = list()\n        self.debug = False\n        self.streamlined = False\n        # optimize exception handling for subclasses that don't advance parse index\n        self.mayIndexError = True\n        self.errmsg = \"\"\n        # mark results names as modal (report only last) or cumulative (list all)\n        self.modalResults = True\n        # custom debug actions\n        self.debugActions = self.DebugActions(None, None, None)\n        # avoid redundant calls to preParse\n        self.callPreparse = True\n        self.callDuringTry = False\n        self.suppress_warnings_: List[Diagnostics] = []\n\n    def suppress_warning(self, warning_type: Diagnostics) -> \"ParserElement\":\n        \"\"\"\n        Suppress warnings emitted for a particular diagnostic on this expression.\n\n        Example::\n\n            base = pp.Forward()\n            base.suppress_warning(Diagnostics.warn_on_parse_using_empty_Forward)\n\n            # statement would normally raise a warning, but is now suppressed\n            print(base.parse_string(\"x\"))\n\n        \"\"\"\n        self.suppress_warnings_.append(warning_type)\n        return self\n\n    def visit_all(self):\n        \"\"\"General-purpose method to yield all expressions and sub-expressions\n        in a grammar. Typically just for internal use.\n        \"\"\"\n        to_visit = deque([self])\n        seen = set()\n        while to_visit:\n            cur = to_visit.popleft()\n\n            # guard against looping forever through recursive grammars\n            if cur in seen:\n                continue\n            seen.add(cur)\n\n            to_visit.extend(cur.recurse())\n            yield cur\n\n    def copy(self) -> \"ParserElement\":\n        \"\"\"\n        Make a copy of this :class:`ParserElement`.  Useful for defining\n        different parse actions for the same parsing pattern, using copies of\n        the original parse element.\n\n        Example::\n\n            integer = Word(nums).set_parse_action(lambda toks: int(toks[0]))\n            integerK = integer.copy().add_parse_action(lambda toks: toks[0] * 1024) + Suppress(\"K\")\n            integerM = integer.copy().add_parse_action(lambda toks: toks[0] * 1024 * 1024) + Suppress(\"M\")\n\n            print((integerK | integerM | integer)[1, ...].parse_string(\"5K 100 640K 256M\"))\n\n        prints::\n\n            [5120, 100, 655360, 268435456]\n\n        Equivalent form of ``expr.copy()`` is just ``expr()``::\n\n            integerM = integer().add_parse_action(lambda toks: toks[0] * 1024 * 1024) + Suppress(\"M\")\n        \"\"\"\n        cpy = copy.copy(self)\n        cpy.parseAction = self.parseAction[:]\n        cpy.ignoreExprs = self.ignoreExprs[:]\n        if self.copyDefaultWhiteChars:\n            cpy.whiteChars = set(ParserElement.DEFAULT_WHITE_CHARS)\n        return cpy\n\n    def set_results_name(\n        self, name: str, list_all_matches: bool = False, *, listAllMatches: bool = False\n    ) -> \"ParserElement\":\n        \"\"\"\n        Define name for referencing matching tokens as a nested attribute\n        of the returned parse results.\n\n        Normally, results names are assigned as you would assign keys in a dict:\n        any existing value is overwritten by later values. If it is necessary to\n        keep all values captured for a particular results name, call ``set_results_name``\n        with ``list_all_matches`` = True.\n\n        NOTE: ``set_results_name`` returns a *copy* of the original :class:`ParserElement` object;\n        this is so that the client can define a basic element, such as an\n        integer, and reference it in multiple places with different names.\n\n        You can also set results names using the abbreviated syntax,\n        ``expr(\"name\")`` in place of ``expr.set_results_name(\"name\")``\n        - see :class:`__call__`. If ``list_all_matches`` is required, use\n        ``expr(\"name*\")``.\n\n        Example::\n\n            date_str = (integer.set_results_name(\"year\") + '/'\n                        + integer.set_results_name(\"month\") + '/'\n                        + integer.set_results_name(\"day\"))\n\n            # equivalent form:\n            date_str = integer(\"year\") + '/' + integer(\"month\") + '/' + integer(\"day\")\n        \"\"\"\n        listAllMatches = listAllMatches or list_all_matches\n        return self._setResultsName(name, listAllMatches)\n\n    def _setResultsName(self, name, listAllMatches=False):\n        if name is None:\n            return self\n        newself = self.copy()\n        if name.endswith(\"*\"):\n            name = name[:-1]\n            listAllMatches = True\n        newself.resultsName = name\n        newself.modalResults = not listAllMatches\n        return newself\n\n    def set_break(self, break_flag: bool = True) -> \"ParserElement\":\n        \"\"\"\n        Method to invoke the Python pdb debugger when this element is\n        about to be parsed. Set ``break_flag`` to ``True`` to enable, ``False`` to\n        disable.\n        \"\"\"\n        if break_flag:\n            _parseMethod = self._parse\n\n            def breaker(instring, loc, doActions=True, callPreParse=True):\n                import pdb\n\n                # this call to pdb.set_trace() is intentional, not a checkin error\n                pdb.set_trace()\n                return _parseMethod(instring, loc, doActions, callPreParse)\n\n            breaker._originalParseMethod = _parseMethod  # type: ignore [attr-defined]\n            self._parse = breaker  # type: ignore [assignment]\n        else:\n            if hasattr(self._parse, \"_originalParseMethod\"):\n                self._parse = self._parse._originalParseMethod  # type: ignore [attr-defined, assignment]\n        return self\n\n    def set_parse_action(self, *fns: ParseAction, **kwargs) -> \"ParserElement\":\n        \"\"\"\n        Define one or more actions to perform when successfully matching parse element definition.\n\n        Parse actions can be called to perform data conversions, do extra validation,\n        update external data structures, or enhance or replace the parsed tokens.\n        Each parse action ``fn`` is a callable method with 0-3 arguments, called as\n        ``fn(s, loc, toks)`` , ``fn(loc, toks)`` , ``fn(toks)`` , or just ``fn()`` , where:\n\n        - ``s``    = the original string being parsed (see note below)\n        - ``loc``  = the location of the matching substring\n        - ``toks`` = a list of the matched tokens, packaged as a :class:`ParseResults` object\n\n        The parsed tokens are passed to the parse action as ParseResults. They can be\n        modified in place using list-style append, extend, and pop operations to update\n        the parsed list elements; and with dictionary-style item set and del operations\n        to add, update, or remove any named results. If the tokens are modified in place,\n        it is not necessary to return them with a return statement.\n\n        Parse actions can also completely replace the given tokens, with another ``ParseResults``\n        object, or with some entirely different object (common for parse actions that perform data\n        conversions). A convenient way to build a new parse result is to define the values\n        using a dict, and then create the return value using :class:`ParseResults.from_dict`.\n\n        If None is passed as the ``fn`` parse action, all previously added parse actions for this\n        expression are cleared.\n\n        Optional keyword arguments:\n\n        - ``call_during_try`` = (default= ``False``) indicate if parse action should be run during\n          lookaheads and alternate testing. For parse actions that have side effects, it is\n          important to only call the parse action once it is determined that it is being\n          called as part of a successful parse. For parse actions that perform additional\n          validation, then call_during_try should be passed as True, so that the validation\n          code is included in the preliminary \"try\" parses.\n\n        Note: the default parsing behavior is to expand tabs in the input string\n        before starting the parsing process.  See :class:`parse_string` for more\n        information on parsing strings containing ``<TAB>`` s, and suggested\n        methods to maintain a consistent view of the parsed string, the parse\n        location, and line and column positions within the parsed string.\n\n        Example::\n\n            # parse dates in the form YYYY/MM/DD\n\n            # use parse action to convert toks from str to int at parse time\n            def convert_to_int(toks):\n                return int(toks[0])\n\n            # use a parse action to verify that the date is a valid date\n            def is_valid_date(instring, loc, toks):\n                from datetime import date\n                year, month, day = toks[::2]\n                try:\n                    date(year, month, day)\n                except ValueError:\n                    raise ParseException(instring, loc, \"invalid date given\")\n\n            integer = Word(nums)\n            date_str = integer + '/' + integer + '/' + integer\n\n            # add parse actions\n            integer.set_parse_action(convert_to_int)\n            date_str.set_parse_action(is_valid_date)\n\n            # note that integer fields are now ints, not strings\n            date_str.run_tests('''\n                # successful parse - note that integer fields were converted to ints\n                1999/12/31\n\n                # fail - invalid date\n                1999/13/31\n                ''')\n        \"\"\"\n        if list(fns) == [None]:\n            self.parseAction = []\n        else:\n            if not all(callable(fn) for fn in fns):\n                raise TypeError(\"parse actions must be callable\")\n            self.parseAction = [_trim_arity(fn) for fn in fns]\n            self.callDuringTry = kwargs.get(\n                \"call_during_try\", kwargs.get(\"callDuringTry\", False)\n            )\n        return self\n\n    def add_parse_action(self, *fns: ParseAction, **kwargs) -> \"ParserElement\":\n        \"\"\"\n        Add one or more parse actions to expression's list of parse actions. See :class:`set_parse_action`.\n\n        See examples in :class:`copy`.\n        \"\"\"\n        self.parseAction += [_trim_arity(fn) for fn in fns]\n        self.callDuringTry = self.callDuringTry or kwargs.get(\n            \"call_during_try\", kwargs.get(\"callDuringTry\", False)\n        )\n        return self\n\n    def add_condition(self, *fns: ParseCondition, **kwargs) -> \"ParserElement\":\n        \"\"\"Add a boolean predicate function to expression's list of parse actions. See\n        :class:`set_parse_action` for function call signatures. Unlike ``set_parse_action``,\n        functions passed to ``add_condition`` need to return boolean success/fail of the condition.\n\n        Optional keyword arguments:\n\n        - ``message`` = define a custom message to be used in the raised exception\n        - ``fatal`` = if True, will raise ParseFatalException to stop parsing immediately; otherwise will raise\n          ParseException\n        - ``call_during_try`` = boolean to indicate if this method should be called during internal tryParse calls,\n          default=False\n\n        Example::\n\n            integer = Word(nums).set_parse_action(lambda toks: int(toks[0]))\n            year_int = integer.copy()\n            year_int.add_condition(lambda toks: toks[0] >= 2000, message=\"Only support years 2000 and later\")\n            date_str = year_int + '/' + integer + '/' + integer\n\n            result = date_str.parse_string(\"1999/12/31\")  # -> Exception: Only support years 2000 and later (at char 0),\n                                                                         (line:1, col:1)\n        \"\"\"\n        for fn in fns:\n            self.parseAction.append(\n                condition_as_parse_action(\n                    fn,\n                    message=str(kwargs.get(\"message\")),\n                    fatal=bool(kwargs.get(\"fatal\", False)),\n                )\n            )\n\n        self.callDuringTry = self.callDuringTry or kwargs.get(\n            \"call_during_try\", kwargs.get(\"callDuringTry\", False)\n        )\n        return self\n\n    def set_fail_action(self, fn: ParseFailAction) -> \"ParserElement\":\n        \"\"\"\n        Define action to perform if parsing fails at this expression.\n        Fail acton fn is a callable function that takes the arguments\n        ``fn(s, loc, expr, err)`` where:\n\n        - ``s`` = string being parsed\n        - ``loc`` = location where expression match was attempted and failed\n        - ``expr`` = the parse expression that failed\n        - ``err`` = the exception thrown\n\n        The function returns no value.  It may throw :class:`ParseFatalException`\n        if it is desired to stop parsing immediately.\"\"\"\n        self.failAction = fn\n        return self\n\n    def _skipIgnorables(self, instring: str, loc: int) -> int:\n        if not self.ignoreExprs:\n            return loc\n        exprsFound = True\n        ignore_expr_fns = [e._parse for e in self.ignoreExprs]\n        while exprsFound:\n            exprsFound = False\n            for ignore_fn in ignore_expr_fns:\n                try:\n                    while 1:\n                        loc, dummy = ignore_fn(instring, loc)\n                        exprsFound = True\n                except ParseException:\n                    pass\n        return loc\n\n    def preParse(self, instring: str, loc: int) -> int:\n        if self.ignoreExprs:\n            loc = self._skipIgnorables(instring, loc)\n\n        if self.skipWhitespace:\n            instrlen = len(instring)\n            white_chars = self.whiteChars\n            while loc < instrlen and instring[loc] in white_chars:\n                loc += 1\n\n        return loc\n\n    def parseImpl(self, instring, loc, doActions=True):\n        return loc, []\n\n    def postParse(self, instring, loc, tokenlist):\n        return tokenlist\n\n    # @profile\n    def _parseNoCache(\n        self, instring, loc, doActions=True, callPreParse=True\n    ) -> Tuple[int, ParseResults]:\n        TRY, MATCH, FAIL = 0, 1, 2\n        debugging = self.debug  # and doActions)\n        len_instring = len(instring)\n\n        if debugging or self.failAction:\n            # print(\"Match {} at loc {}({}, {})\".format(self, loc, lineno(loc, instring), col(loc, instring)))\n            try:\n                if callPreParse and self.callPreparse:\n                    pre_loc = self.preParse(instring, loc)\n                else:\n                    pre_loc = loc\n                tokens_start = pre_loc\n                if self.debugActions.debug_try:\n                    self.debugActions.debug_try(instring, tokens_start, self, False)\n                if self.mayIndexError or pre_loc >= len_instring:\n                    try:\n                        loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n                    except IndexError:\n                        raise ParseException(instring, len_instring, self.errmsg, self)\n                else:\n                    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n            except Exception as err:\n                # print(\"Exception raised:\", err)\n                if self.debugActions.debug_fail:\n                    self.debugActions.debug_fail(\n                        instring, tokens_start, self, err, False\n                    )\n                if self.failAction:\n                    self.failAction(instring, tokens_start, self, err)\n                raise\n        else:\n            if callPreParse and self.callPreparse:\n                pre_loc = self.preParse(instring, loc)\n            else:\n                pre_loc = loc\n            tokens_start = pre_loc\n            if self.mayIndexError or pre_loc >= len_instring:\n                try:\n                    loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n                except IndexError:\n                    raise ParseException(instring, len_instring, self.errmsg, self)\n            else:\n                loc, tokens = self.parseImpl(instring, pre_loc, doActions)\n\n        tokens = self.postParse(instring, loc, tokens)\n\n        ret_tokens = ParseResults(\n            tokens, self.resultsName, asList=self.saveAsList, modal=self.modalResults\n        )\n        if self.parseAction and (doActions or self.callDuringTry):\n            if debugging:\n                try:\n                    for fn in self.parseAction:\n                        try:\n                            tokens = fn(instring, tokens_start, ret_tokens)  # type: ignore [call-arg, arg-type]\n                        except IndexError as parse_action_exc:\n                            exc = ParseException(\"exception raised in parse action\")\n                            raise exc from parse_action_exc\n\n                        if tokens is not None and tokens is not ret_tokens:\n                            ret_tokens = ParseResults(\n                                tokens,\n                                self.resultsName,\n                                asList=self.saveAsList\n                                and isinstance(tokens, (ParseResults, list)),\n                                modal=self.modalResults,\n                            )\n                except Exception as err:\n                    # print \"Exception raised in user parse action:\", err\n                    if self.debugActions.debug_fail:\n                        self.debugActions.debug_fail(\n                            instring, tokens_start, self, err, False\n                        )\n                    raise\n            else:\n                for fn in self.parseAction:\n                    try:\n                        tokens = fn(instring, tokens_start, ret_tokens)  # type: ignore [call-arg, arg-type]\n                    except IndexError as parse_action_exc:\n                        exc = ParseException(\"exception raised in parse action\")\n                        raise exc from parse_action_exc\n\n                    if tokens is not None and tokens is not ret_tokens:\n                        ret_tokens = ParseResults(\n                            tokens,\n                            self.resultsName,\n                            asList=self.saveAsList\n                            and isinstance(tokens, (ParseResults, list)),\n                            modal=self.modalResults,\n                        )\n        if debugging:\n            # print(\"Matched\", self, \"->\", ret_tokens.as_list())\n            if self.debugActions.debug_match:\n                self.debugActions.debug_match(\n                    instring, tokens_start, loc, self, ret_tokens, False\n                )\n\n        return loc, ret_tokens\n\n    def try_parse(\n        self,\n        instring: str,\n        loc: int,\n        *,\n        raise_fatal: bool = False,\n        do_actions: bool = False,\n    ) -> int:\n        try:\n            return self._parse(instring, loc, doActions=do_actions)[0]\n        except ParseFatalException:\n            if raise_fatal:\n                raise\n            raise ParseException(instring, loc, self.errmsg, self)\n\n    def can_parse_next(self, instring: str, loc: int, do_actions: bool = False) -> bool:\n        try:\n            self.try_parse(instring, loc, do_actions=do_actions)\n        except (ParseException, IndexError):\n            return False\n        else:\n            return True\n\n    # cache for left-recursion in Forward references\n    recursion_lock = RLock()\n    recursion_memos: typing.Dict[\n        Tuple[int, \"Forward\", bool], Tuple[int, Union[ParseResults, Exception]]\n    ] = {}\n\n    class _CacheType(dict):\n        \"\"\"\n        class to help type checking\n        \"\"\"\n\n        not_in_cache: bool\n\n        def get(self, *args):\n            ...\n\n        def set(self, *args):\n            ...\n\n    # argument cache for optimizing repeated calls when backtracking through recursive expressions\n    packrat_cache = (\n        _CacheType()\n    )  # set later by enable_packrat(); this is here so that reset_cache() doesn't fail\n    packrat_cache_lock = RLock()\n    packrat_cache_stats = [0, 0]\n\n    # this method gets repeatedly called during backtracking with the same arguments -\n    # we can cache these arguments and save ourselves the trouble of re-parsing the contained expression\n    def _parseCache(\n        self, instring, loc, doActions=True, callPreParse=True\n    ) -> Tuple[int, ParseResults]:\n        HIT, MISS = 0, 1\n        TRY, MATCH, FAIL = 0, 1, 2\n        lookup = (self, instring, loc, callPreParse, doActions)\n        with ParserElement.packrat_cache_lock:\n            cache = ParserElement.packrat_cache\n            value = cache.get(lookup)\n            if value is cache.not_in_cache:\n                ParserElement.packrat_cache_stats[MISS] += 1\n                try:\n                    value = self._parseNoCache(instring, loc, doActions, callPreParse)\n                except ParseBaseException as pe:\n                    # cache a copy of the exception, without the traceback\n                    cache.set(lookup, pe.__class__(*pe.args))\n                    raise\n                else:\n                    cache.set(lookup, (value[0], value[1].copy(), loc))\n                    return value\n            else:\n                ParserElement.packrat_cache_stats[HIT] += 1\n                if self.debug and self.debugActions.debug_try:\n                    try:\n                        self.debugActions.debug_try(instring, loc, self, cache_hit=True)  # type: ignore [call-arg]\n                    except TypeError:\n                        pass\n                if isinstance(value, Exception):\n                    if self.debug and self.debugActions.debug_fail:\n                        try:\n                            self.debugActions.debug_fail(\n                                instring, loc, self, value, cache_hit=True  # type: ignore [call-arg]\n                            )\n                        except TypeError:\n                            pass\n                    raise value\n\n                value = cast(Tuple[int, ParseResults, int], value)\n                loc_, result, endloc = value[0], value[1].copy(), value[2]\n                if self.debug and self.debugActions.debug_match:\n                    try:\n                        self.debugActions.debug_match(\n                            instring, loc_, endloc, self, result, cache_hit=True  # type: ignore [call-arg]\n                        )\n                    except TypeError:\n                        pass\n\n                return loc_, result\n\n    _parse = _parseNoCache\n\n    @staticmethod\n    def reset_cache() -> None:\n        ParserElement.packrat_cache.clear()\n        ParserElement.packrat_cache_stats[:] = [0] * len(\n            ParserElement.packrat_cache_stats\n        )\n        ParserElement.recursion_memos.clear()\n\n    _packratEnabled = False\n    _left_recursion_enabled = False\n\n    @staticmethod\n    def disable_memoization() -> None:\n        \"\"\"\n        Disables active Packrat or Left Recursion parsing and their memoization\n\n        This method also works if neither Packrat nor Left Recursion are enabled.\n        This makes it safe to call before activating Packrat nor Left Recursion\n        to clear any previous settings.\n        \"\"\"\n        ParserElement.reset_cache()\n        ParserElement._left_recursion_enabled = False\n        ParserElement._packratEnabled = False\n        ParserElement._parse = ParserElement._parseNoCache\n\n    @staticmethod\n    def enable_left_recursion(\n        cache_size_limit: typing.Optional[int] = None, *, force=False\n    ) -> None:\n        \"\"\"\n        Enables \"bounded recursion\" parsing, which allows for both direct and indirect\n        left-recursion. During parsing, left-recursive :class:`Forward` elements are\n        repeatedly matched with a fixed recursion depth that is gradually increased\n        until finding the longest match.\n\n        Example::\n\n            from pip._vendor import pyparsing as pp\n            pp.ParserElement.enable_left_recursion()\n\n            E = pp.Forward(\"E\")\n            num = pp.Word(pp.nums)\n            # match `num`, or `num '+' num`, or `num '+' num '+' num`, ...\n            E <<= E + '+' - num | num\n\n            print(E.parse_string(\"1+2+3\"))\n\n        Recursion search naturally memoizes matches of ``Forward`` elements and may\n        thus skip reevaluation of parse actions during backtracking. This may break\n        programs with parse actions which rely on strict ordering of side-effects.\n\n        Parameters:\n\n        - ``cache_size_limit`` - (default=``None``) - memoize at most this many\n          ``Forward`` elements during matching; if ``None`` (the default),\n          memoize all ``Forward`` elements.\n\n        Bounded Recursion parsing works similar but not identical to Packrat parsing,\n        thus the two cannot be used together. Use ``force=True`` to disable any\n        previous, conflicting settings.\n        \"\"\"\n        if force:\n            ParserElement.disable_memoization()\n        elif ParserElement._packratEnabled:\n            raise RuntimeError(\"Packrat and Bounded Recursion are not compatible\")\n        if cache_size_limit is None:\n            ParserElement.recursion_memos = _UnboundedMemo()  # type: ignore[assignment]\n        elif cache_size_limit > 0:\n            ParserElement.recursion_memos = _LRUMemo(capacity=cache_size_limit)  # type: ignore[assignment]\n        else:\n            raise NotImplementedError(\"Memo size of %s\" % cache_size_limit)\n        ParserElement._left_recursion_enabled = True\n\n    @staticmethod\n    def enable_packrat(cache_size_limit: int = 128, *, force: bool = False) -> None:\n        \"\"\"\n        Enables \"packrat\" parsing, which adds memoizing to the parsing logic.\n        Repeated parse attempts at the same string location (which happens\n        often in many complex grammars) can immediately return a cached value,\n        instead of re-executing parsing/validating code.  Memoizing is done of\n        both valid results and parsing exceptions.\n\n        Parameters:\n\n        - ``cache_size_limit`` - (default= ``128``) - if an integer value is provided\n          will limit the size of the packrat cache; if None is passed, then\n          the cache size will be unbounded; if 0 is passed, the cache will\n          be effectively disabled.\n\n        This speedup may break existing programs that use parse actions that\n        have side-effects.  For this reason, packrat parsing is disabled when\n        you first import pyparsing.  To activate the packrat feature, your\n        program must call the class method :class:`ParserElement.enable_packrat`.\n        For best results, call ``enable_packrat()`` immediately after\n        importing pyparsing.\n\n        Example::\n\n            from pip._vendor import pyparsing\n            pyparsing.ParserElement.enable_packrat()\n\n        Packrat parsing works similar but not identical to Bounded Recursion parsing,\n        thus the two cannot be used together. Use ``force=True`` to disable any\n        previous, conflicting settings.\n        \"\"\"\n        if force:\n            ParserElement.disable_memoization()\n        elif ParserElement._left_recursion_enabled:\n            raise RuntimeError(\"Packrat and Bounded Recursion are not compatible\")\n        if not ParserElement._packratEnabled:\n            ParserElement._packratEnabled = True\n            if cache_size_limit is None:\n                ParserElement.packrat_cache = _UnboundedCache()\n            else:\n                ParserElement.packrat_cache = _FifoCache(cache_size_limit)  # type: ignore[assignment]\n            ParserElement._parse = ParserElement._parseCache\n\n    def parse_string(\n        self, instring: str, parse_all: bool = False, *, parseAll: bool = False\n    ) -> ParseResults:\n        \"\"\"\n        Parse a string with respect to the parser definition. This function is intended as the primary interface to the\n        client code.\n\n        :param instring: The input string to be parsed.\n        :param parse_all: If set, the entire input string must match the grammar.\n        :param parseAll: retained for pre-PEP8 compatibility, will be removed in a future release.\n        :raises ParseException: Raised if ``parse_all`` is set and the input string does not match the whole grammar.\n        :returns: the parsed data as a :class:`ParseResults` object, which may be accessed as a `list`, a `dict`, or\n          an object with attributes if the given parser includes results names.\n\n        If the input string is required to match the entire grammar, ``parse_all`` flag must be set to ``True``. This\n        is also equivalent to ending the grammar with :class:`StringEnd`\\\\ ().\n\n        To report proper column numbers, ``parse_string`` operates on a copy of the input string where all tabs are\n        converted to spaces (8 spaces per tab, as per the default in ``string.expandtabs``). If the input string\n        contains tabs and the grammar uses parse actions that use the ``loc`` argument to index into the string\n        being parsed, one can ensure a consistent view of the input string by doing one of the following:\n\n        - calling ``parse_with_tabs`` on your grammar before calling ``parse_string`` (see :class:`parse_with_tabs`),\n        - define your parse action using the full ``(s,loc,toks)`` signature, and reference the input string using the\n          parse action's ``s`` argument, or\n        - explicitly expand the tabs in your input string before calling ``parse_string``.\n\n        Examples:\n\n        By default, partial matches are OK.\n\n        >>> res = Word('a').parse_string('aaaaabaaa')\n        >>> print(res)\n        ['aaaaa']\n\n        The parsing behavior varies by the inheriting class of this abstract class. Please refer to the children\n        directly to see more examples.\n\n        It raises an exception if parse_all flag is set and instring does not match the whole grammar.\n\n        >>> res = Word('a').parse_string('aaaaabaaa', parse_all=True)\n        Traceback (most recent call last):\n        ...\n        pyparsing.ParseException: Expected end of text, found 'b'  (at char 5), (line:1, col:6)\n        \"\"\"\n        parseAll = parse_all or parseAll\n\n        ParserElement.reset_cache()\n        if not self.streamlined:\n            self.streamline()\n        for e in self.ignoreExprs:\n            e.streamline()\n        if not self.keepTabs:\n            instring = instring.expandtabs()\n        try:\n            loc, tokens = self._parse(instring, 0)\n            if parseAll:\n                loc = self.preParse(instring, loc)\n                se = Empty() + StringEnd()\n                se._parse(instring, loc)\n        except ParseBaseException as exc:\n            if ParserElement.verbose_stacktrace:\n                raise\n            else:\n                # catch and re-raise exception from here, clearing out pyparsing internal stack trace\n                raise exc.with_traceback(None)\n        else:\n            return tokens\n\n    def scan_string(\n        self,\n        instring: str,\n        max_matches: int = _MAX_INT,\n        overlap: bool = False,\n        *,\n        debug: bool = False,\n        maxMatches: int = _MAX_INT,\n    ) -> Generator[Tuple[ParseResults, int, int], None, None]:\n        \"\"\"\n        Scan the input string for expression matches.  Each match will return the\n        matching tokens, start location, and end location.  May be called with optional\n        ``max_matches`` argument, to clip scanning after 'n' matches are found.  If\n        ``overlap`` is specified, then overlapping matches will be reported.\n\n        Note that the start and end locations are reported relative to the string\n        being parsed.  See :class:`parse_string` for more information on parsing\n        strings with embedded tabs.\n\n        Example::\n\n            source = \"sldjf123lsdjjkf345sldkjf879lkjsfd987\"\n            print(source)\n            for tokens, start, end in Word(alphas).scan_string(source):\n                print(' '*start + '^'*(end-start))\n                print(' '*start + tokens[0])\n\n        prints::\n\n            sldjf123lsdjjkf345sldkjf879lkjsfd987\n            ^^^^^\n            sldjf\n                    ^^^^^^^\n                    lsdjjkf\n                              ^^^^^^\n                              sldkjf\n                                       ^^^^^^\n                                       lkjsfd\n        \"\"\"\n        maxMatches = min(maxMatches, max_matches)\n        if not self.streamlined:\n            self.streamline()\n        for e in self.ignoreExprs:\n            e.streamline()\n\n        if not self.keepTabs:\n            instring = str(instring).expandtabs()\n        instrlen = len(instring)\n        loc = 0\n        preparseFn = self.preParse\n        parseFn = self._parse\n        ParserElement.resetCache()\n        matches = 0\n        try:\n            while loc <= instrlen and matches < maxMatches:\n                try:\n                    preloc: int = preparseFn(instring, loc)\n                    nextLoc: int\n                    tokens: ParseResults\n                    nextLoc, tokens = parseFn(instring, preloc, callPreParse=False)\n                except ParseException:\n                    loc = preloc + 1\n                else:\n                    if nextLoc > loc:\n                        matches += 1\n                        if debug:\n                            print(\n                                {\n                                    \"tokens\": tokens.asList(),\n                                    \"start\": preloc,\n                                    \"end\": nextLoc,\n                                }\n                            )\n                        yield tokens, preloc, nextLoc\n                        if overlap:\n                            nextloc = preparseFn(instring, loc)\n                            if nextloc > loc:\n                                loc = nextLoc\n                            else:\n                                loc += 1\n                        else:\n                            loc = nextLoc\n                    else:\n                        loc = preloc + 1\n        except ParseBaseException as exc:\n            if ParserElement.verbose_stacktrace:\n                raise\n            else:\n                # catch and re-raise exception from here, clears out pyparsing internal stack trace\n                raise exc.with_traceback(None)\n\n    def transform_string(self, instring: str, *, debug: bool = False) -> str:\n        \"\"\"\n        Extension to :class:`scan_string`, to modify matching text with modified tokens that may\n        be returned from a parse action.  To use ``transform_string``, define a grammar and\n        attach a parse action to it that modifies the returned token list.\n        Invoking ``transform_string()`` on a target string will then scan for matches,\n        and replace the matched text patterns according to the logic in the parse\n        action.  ``transform_string()`` returns the resulting transformed string.\n\n        Example::\n\n            wd = Word(alphas)\n            wd.set_parse_action(lambda toks: toks[0].title())\n\n            print(wd.transform_string(\"now is the winter of our discontent made glorious summer by this sun of york.\"))\n\n        prints::\n\n            Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York.\n        \"\"\"\n        out: List[str] = []\n        lastE = 0\n        # force preservation of <TAB>s, to minimize unwanted transformation of string, and to\n        # keep string locs straight between transform_string and scan_string\n        self.keepTabs = True\n        try:\n            for t, s, e in self.scan_string(instring, debug=debug):\n                out.append(instring[lastE:s])\n                if t:\n                    if isinstance(t, ParseResults):\n                        out += t.as_list()\n                    elif isinstance(t, Iterable) and not isinstance(t, str_type):\n                        out.extend(t)\n                    else:\n                        out.append(t)\n                lastE = e\n            out.append(instring[lastE:])\n            out = [o for o in out if o]\n            return \"\".join([str(s) for s in _flatten(out)])\n        except ParseBaseException as exc:\n            if ParserElement.verbose_stacktrace:\n                raise\n            else:\n                # catch and re-raise exception from here, clears out pyparsing internal stack trace\n                raise exc.with_traceback(None)\n\n    def search_string(\n        self,\n        instring: str,\n        max_matches: int = _MAX_INT,\n        *,\n        debug: bool = False,\n        maxMatches: int = _MAX_INT,\n    ) -> ParseResults:\n        \"\"\"\n        Another extension to :class:`scan_string`, simplifying the access to the tokens found\n        to match the given parse expression.  May be called with optional\n        ``max_matches`` argument, to clip searching after 'n' matches are found.\n\n        Example::\n\n            # a capitalized word starts with an uppercase letter, followed by zero or more lowercase letters\n            cap_word = Word(alphas.upper(), alphas.lower())\n\n            print(cap_word.search_string(\"More than Iron, more than Lead, more than Gold I need Electricity\"))\n\n            # the sum() builtin can be used to merge results into a single ParseResults object\n            print(sum(cap_word.search_string(\"More than Iron, more than Lead, more than Gold I need Electricity\")))\n\n        prints::\n\n            [['More'], ['Iron'], ['Lead'], ['Gold'], ['I'], ['Electricity']]\n            ['More', 'Iron', 'Lead', 'Gold', 'I', 'Electricity']\n        \"\"\"\n        maxMatches = min(maxMatches, max_matches)\n        try:\n            return ParseResults(\n                [t for t, s, e in self.scan_string(instring, maxMatches, debug=debug)]\n            )\n        except ParseBaseException as exc:\n            if ParserElement.verbose_stacktrace:\n                raise\n            else:\n                # catch and re-raise exception from here, clears out pyparsing internal stack trace\n                raise exc.with_traceback(None)\n\n    def split(\n        self,\n        instring: str,\n        maxsplit: int = _MAX_INT,\n        include_separators: bool = False,\n        *,\n        includeSeparators=False,\n    ) -> Generator[str, None, None]:\n        \"\"\"\n        Generator method to split a string using the given expression as a separator.\n        May be called with optional ``maxsplit`` argument, to limit the number of splits;\n        and the optional ``include_separators`` argument (default= ``False``), if the separating\n        matching text should be included in the split results.\n\n        Example::\n\n            punc = one_of(list(\".,;:/-!?\"))\n            print(list(punc.split(\"This, this?, this sentence, is badly punctuated!\")))\n\n        prints::\n\n            ['This', ' this', '', ' this sentence', ' is badly punctuated', '']\n        \"\"\"\n        includeSeparators = includeSeparators or include_separators\n        last = 0\n        for t, s, e in self.scan_string(instring, max_matches=maxsplit):\n            yield instring[last:s]\n            if includeSeparators:\n                yield t[0]\n            last = e\n        yield instring[last:]\n\n    def __add__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``+`` operator - returns :class:`And`. Adding strings to a :class:`ParserElement`\n        converts them to :class:`Literal`\\\\ s by default.\n\n        Example::\n\n            greet = Word(alphas) + \",\" + Word(alphas) + \"!\"\n            hello = \"Hello, World!\"\n            print(hello, \"->\", greet.parse_string(hello))\n\n        prints::\n\n            Hello, World! -> ['Hello', ',', 'World', '!']\n\n        ``...`` may be used as a parse expression as a short form of :class:`SkipTo`::\n\n            Literal('start') + ... + Literal('end')\n\n        is equivalent to::\n\n            Literal('start') + SkipTo('end')(\"_skipped*\") + Literal('end')\n\n        Note that the skipped text is returned with '_skipped' as a results name,\n        and to support having multiple skips in the same parser, the value returned is\n        a list of all skipped text.\n        \"\"\"\n        if other is Ellipsis:\n            return _PendingSkip(self)\n\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return And([self, other])\n\n    def __radd__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``+`` operator when left operand is not a :class:`ParserElement`\n        \"\"\"\n        if other is Ellipsis:\n            return SkipTo(self)(\"_skipped*\") + self\n\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return other + self\n\n    def __sub__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``-`` operator, returns :class:`And` with error stop\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return self + And._ErrorStop() + other\n\n    def __rsub__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``-`` operator when left operand is not a :class:`ParserElement`\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return other - self\n\n    def __mul__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``*`` operator, allows use of ``expr * 3`` in place of\n        ``expr + expr + expr``.  Expressions may also be multiplied by a 2-integer\n        tuple, similar to ``{min, max}`` multipliers in regular expressions.  Tuples\n        may also include ``None`` as in:\n\n        - ``expr*(n, None)`` or ``expr*(n, )`` is equivalent\n          to ``expr*n + ZeroOrMore(expr)``\n          (read as \"at least n instances of ``expr``\")\n        - ``expr*(None, n)`` is equivalent to ``expr*(0, n)``\n          (read as \"0 to n instances of ``expr``\")\n        - ``expr*(None, None)`` is equivalent to ``ZeroOrMore(expr)``\n        - ``expr*(1, None)`` is equivalent to ``OneOrMore(expr)``\n\n        Note that ``expr*(None, n)`` does not raise an exception if\n        more than n exprs exist in the input stream; that is,\n        ``expr*(None, n)`` does not enforce a maximum number of expr\n        occurrences.  If this behavior is desired, then write\n        ``expr*(None, n) + ~expr``\n        \"\"\"\n        if other is Ellipsis:\n            other = (0, None)\n        elif isinstance(other, tuple) and other[:1] == (Ellipsis,):\n            other = ((0,) + other[1:] + (None,))[:2]\n\n        if isinstance(other, int):\n            minElements, optElements = other, 0\n        elif isinstance(other, tuple):\n            other = tuple(o if o is not Ellipsis else None for o in other)\n            other = (other + (None, None))[:2]\n            if other[0] is None:\n                other = (0, other[1])\n            if isinstance(other[0], int) and other[1] is None:\n                if other[0] == 0:\n                    return ZeroOrMore(self)\n                if other[0] == 1:\n                    return OneOrMore(self)\n                else:\n                    return self * other[0] + ZeroOrMore(self)\n            elif isinstance(other[0], int) and isinstance(other[1], int):\n                minElements, optElements = other\n                optElements -= minElements\n            else:\n                return NotImplemented\n        else:\n            return NotImplemented\n\n        if minElements < 0:\n            raise ValueError(\"cannot multiply ParserElement by negative value\")\n        if optElements < 0:\n            raise ValueError(\n                \"second tuple value must be greater or equal to first tuple value\"\n            )\n        if minElements == optElements == 0:\n            return And([])\n\n        if optElements:\n\n            def makeOptionalList(n):\n                if n > 1:\n                    return Opt(self + makeOptionalList(n - 1))\n                else:\n                    return Opt(self)\n\n            if minElements:\n                if minElements == 1:\n                    ret = self + makeOptionalList(optElements)\n                else:\n                    ret = And([self] * minElements) + makeOptionalList(optElements)\n            else:\n                ret = makeOptionalList(optElements)\n        else:\n            if minElements == 1:\n                ret = self\n            else:\n                ret = And([self] * minElements)\n        return ret\n\n    def __rmul__(self, other) -> \"ParserElement\":\n        return self.__mul__(other)\n\n    def __or__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``|`` operator - returns :class:`MatchFirst`\n        \"\"\"\n        if other is Ellipsis:\n            return _PendingSkip(self, must_skip=True)\n\n        if isinstance(other, str_type):\n            # `expr | \"\"` is equivalent to `Opt(expr)`\n            if other == \"\":\n                return Opt(self)\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return MatchFirst([self, other])\n\n    def __ror__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``|`` operator when left operand is not a :class:`ParserElement`\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return other | self\n\n    def __xor__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``^`` operator - returns :class:`Or`\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return Or([self, other])\n\n    def __rxor__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``^`` operator when left operand is not a :class:`ParserElement`\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return other ^ self\n\n    def __and__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``&`` operator - returns :class:`Each`\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return Each([self, other])\n\n    def __rand__(self, other) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``&`` operator when left operand is not a :class:`ParserElement`\n        \"\"\"\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return other & self\n\n    def __invert__(self) -> \"ParserElement\":\n        \"\"\"\n        Implementation of ``~`` operator - returns :class:`NotAny`\n        \"\"\"\n        return NotAny(self)\n\n    # disable __iter__ to override legacy use of sequential access to __getitem__ to\n    # iterate over a sequence\n    __iter__ = None\n\n    def __getitem__(self, key):\n        \"\"\"\n        use ``[]`` indexing notation as a short form for expression repetition:\n\n        - ``expr[n]`` is equivalent to ``expr*n``\n        - ``expr[m, n]`` is equivalent to ``expr*(m, n)``\n        - ``expr[n, ...]`` or ``expr[n,]`` is equivalent\n             to ``expr*n + ZeroOrMore(expr)``\n             (read as \"at least n instances of ``expr``\")\n        - ``expr[..., n]`` is equivalent to ``expr*(0, n)``\n             (read as \"0 to n instances of ``expr``\")\n        - ``expr[...]`` and ``expr[0, ...]`` are equivalent to ``ZeroOrMore(expr)``\n        - ``expr[1, ...]`` is equivalent to ``OneOrMore(expr)``\n\n        ``None`` may be used in place of ``...``.\n\n        Note that ``expr[..., n]`` and ``expr[m, n]`` do not raise an exception\n        if more than ``n`` ``expr``\\\\ s exist in the input stream.  If this behavior is\n        desired, then write ``expr[..., n] + ~expr``.\n\n        For repetition with a stop_on expression, use slice notation:\n\n        - ``expr[...: end_expr]`` and ``expr[0, ...: end_expr]`` are equivalent to ``ZeroOrMore(expr, stop_on=end_expr)``\n        - ``expr[1, ...: end_expr]`` is equivalent to ``OneOrMore(expr, stop_on=end_expr)``\n\n        \"\"\"\n\n        stop_on_defined = False\n        stop_on = NoMatch()\n        if isinstance(key, slice):\n            key, stop_on = key.start, key.stop\n            if key is None:\n                key = ...\n            stop_on_defined = True\n        elif isinstance(key, tuple) and isinstance(key[-1], slice):\n            key, stop_on = (key[0], key[1].start), key[1].stop\n            stop_on_defined = True\n\n        # convert single arg keys to tuples\n        if isinstance(key, str_type):\n            key = (key,)\n        try:\n            iter(key)\n        except TypeError:\n            key = (key, key)\n\n        if len(key) > 2:\n            raise TypeError(\n                f\"only 1 or 2 index arguments supported ({key[:5]}{f'... [{len(key)}]' if len(key) > 5 else ''})\"\n            )\n\n        # clip to 2 elements\n        ret = self * tuple(key[:2])\n        ret = typing.cast(_MultipleMatch, ret)\n\n        if stop_on_defined:\n            ret.stopOn(stop_on)\n\n        return ret\n\n    def __call__(self, name: typing.Optional[str] = None) -> \"ParserElement\":\n        \"\"\"\n        Shortcut for :class:`set_results_name`, with ``list_all_matches=False``.\n\n        If ``name`` is given with a trailing ``'*'`` character, then ``list_all_matches`` will be\n        passed as ``True``.\n\n        If ``name`` is omitted, same as calling :class:`copy`.\n\n        Example::\n\n            # these are equivalent\n            userdata = Word(alphas).set_results_name(\"name\") + Word(nums + \"-\").set_results_name(\"socsecno\")\n            userdata = Word(alphas)(\"name\") + Word(nums + \"-\")(\"socsecno\")\n        \"\"\"\n        if name is not None:\n            return self._setResultsName(name)\n        else:\n            return self.copy()\n\n    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)\n\n    def ignore_whitespace(self, recursive: bool = True) -> \"ParserElement\":\n        \"\"\"\n        Enables the skipping of whitespace before matching the characters in the\n        :class:`ParserElement`'s defined pattern.\n\n        :param recursive: If ``True`` (the default), also enable whitespace skipping in child elements (if any)\n        \"\"\"\n        self.skipWhitespace = True\n        return self\n\n    def leave_whitespace(self, recursive: bool = True) -> \"ParserElement\":\n        \"\"\"\n        Disables the skipping of whitespace before matching the characters in the\n        :class:`ParserElement`'s defined pattern.  This is normally only used internally by\n        the pyparsing module, but may be needed in some whitespace-sensitive grammars.\n\n        :param recursive: If true (the default), also disable whitespace skipping in child elements (if any)\n        \"\"\"\n        self.skipWhitespace = False\n        return self\n\n    def set_whitespace_chars(\n        self, chars: Union[Set[str], str], copy_defaults: bool = False\n    ) -> \"ParserElement\":\n        \"\"\"\n        Overrides the default whitespace chars\n        \"\"\"\n        self.skipWhitespace = True\n        self.whiteChars = set(chars)\n        self.copyDefaultWhiteChars = copy_defaults\n        return self\n\n    def parse_with_tabs(self) -> \"ParserElement\":\n        \"\"\"\n        Overrides default behavior to expand ``<TAB>`` s to spaces before parsing the input string.\n        Must be called before ``parse_string`` when the input grammar contains elements that\n        match ``<TAB>`` characters.\n        \"\"\"\n        self.keepTabs = True\n        return self\n\n    def ignore(self, other: \"ParserElement\") -> \"ParserElement\":\n        \"\"\"\n        Define expression to be ignored (e.g., comments) while doing pattern\n        matching; may be called repeatedly, to define multiple comment or other\n        ignorable patterns.\n\n        Example::\n\n            patt = Word(alphas)[1, ...]\n            patt.parse_string('ablaj /* comment */ lskjd')\n            # -> ['ablaj']\n\n            patt.ignore(c_style_comment)\n            patt.parse_string('ablaj /* comment */ lskjd')\n            # -> ['ablaj', 'lskjd']\n        \"\"\"\n        import typing\n\n        if isinstance(other, str_type):\n            other = Suppress(other)\n\n        if isinstance(other, Suppress):\n            if other not in self.ignoreExprs:\n                self.ignoreExprs.append(other)\n        else:\n            self.ignoreExprs.append(Suppress(other.copy()))\n        return self\n\n    def set_debug_actions(\n        self,\n        start_action: DebugStartAction,\n        success_action: DebugSuccessAction,\n        exception_action: DebugExceptionAction,\n    ) -> \"ParserElement\":\n        \"\"\"\n        Customize display of debugging messages while doing pattern matching:\n\n        - ``start_action`` - method to be called when an expression is about to be parsed;\n          should have the signature ``fn(input_string: str, location: int, expression: ParserElement, cache_hit: bool)``\n\n        - ``success_action`` - method to be called when an expression has successfully parsed;\n          should have the signature ``fn(input_string: str, start_location: int, end_location: int, expression: ParserELement, parsed_tokens: ParseResults, cache_hit: bool)``\n\n        - ``exception_action`` - method to be called when expression fails to parse;\n          should have the signature ``fn(input_string: str, location: int, expression: ParserElement, exception: Exception, cache_hit: bool)``\n        \"\"\"\n        self.debugActions = self.DebugActions(\n            start_action or _default_start_debug_action,  # type: ignore[truthy-function]\n            success_action or _default_success_debug_action,  # type: ignore[truthy-function]\n            exception_action or _default_exception_debug_action,  # type: ignore[truthy-function]\n        )\n        self.debug = True\n        return self\n\n    def set_debug(self, flag: bool = True, recurse: bool = False) -> \"ParserElement\":\n        \"\"\"\n        Enable display of debugging messages while doing pattern matching.\n        Set ``flag`` to ``True`` to enable, ``False`` to disable.\n        Set ``recurse`` to ``True`` to set the debug flag on this expression and all sub-expressions.\n\n        Example::\n\n            wd = Word(alphas).set_name(\"alphaword\")\n            integer = Word(nums).set_name(\"numword\")\n            term = wd | integer\n\n            # turn on debugging for wd\n            wd.set_debug()\n\n            term[1, ...].parse_string(\"abc 123 xyz 890\")\n\n        prints::\n\n            Match alphaword at loc 0(1,1)\n            Matched alphaword -> ['abc']\n            Match alphaword at loc 3(1,4)\n            Exception raised:Expected alphaword (at char 4), (line:1, col:5)\n            Match alphaword at loc 7(1,8)\n            Matched alphaword -> ['xyz']\n            Match alphaword at loc 11(1,12)\n            Exception raised:Expected alphaword (at char 12), (line:1, col:13)\n            Match alphaword at loc 15(1,16)\n            Exception raised:Expected alphaword (at char 15), (line:1, col:16)\n\n        The output shown is that produced by the default debug actions - custom debug actions can be\n        specified using :class:`set_debug_actions`. Prior to attempting\n        to match the ``wd`` expression, the debugging message ``\"Match <exprname> at loc <n>(<line>,<col>)\"``\n        is shown. Then if the parse succeeds, a ``\"Matched\"`` message is shown, or an ``\"Exception raised\"``\n        message is shown. Also note the use of :class:`set_name` to assign a human-readable name to the expression,\n        which makes debugging and exception messages easier to understand - for instance, the default\n        name created for the :class:`Word` expression without calling ``set_name`` is ``\"W:(A-Za-z)\"``.\n        \"\"\"\n        if recurse:\n            for expr in self.visit_all():\n                expr.set_debug(flag, recurse=False)\n            return self\n\n        if flag:\n            self.set_debug_actions(\n                _default_start_debug_action,\n                _default_success_debug_action,\n                _default_exception_debug_action,\n            )\n        else:\n            self.debug = False\n        return self\n\n    @property\n    def default_name(self) -> str:\n        if self._defaultName is None:\n            self._defaultName = self._generateDefaultName()\n        return self._defaultName\n\n    @abstractmethod\n    def _generateDefaultName(self) -> str:\n        \"\"\"\n        Child classes must define this method, which defines how the ``default_name`` is set.\n        \"\"\"\n\n    def set_name(self, name: str) -> \"ParserElement\":\n        \"\"\"\n        Define name for this expression, makes debugging and exception messages clearer.\n\n        Example::\n\n            Word(nums).parse_string(\"ABC\")  # -> Exception: Expected W:(0-9) (at char 0), (line:1, col:1)\n            Word(nums).set_name(\"integer\").parse_string(\"ABC\")  # -> Exception: Expected integer (at char 0), (line:1, col:1)\n        \"\"\"\n        self.customName = name\n        self.errmsg = \"Expected \" + self.name\n        if __diag__.enable_debug_on_named_expressions:\n            self.set_debug()\n        return self\n\n    @property\n    def name(self) -> str:\n        # This will use a user-defined name if available, but otherwise defaults back to the auto-generated name\n        return self.customName if self.customName is not None else self.default_name\n\n    def __str__(self) -> str:\n        return self.name\n\n    def __repr__(self) -> str:\n        return str(self)\n\n    def streamline(self) -> \"ParserElement\":\n        self.streamlined = True\n        self._defaultName = None\n        return self\n\n    def recurse(self) -> List[\"ParserElement\"]:\n        return []\n\n    def _checkRecursion(self, parseElementList):\n        subRecCheckList = parseElementList[:] + [self]\n        for e in self.recurse():\n            e._checkRecursion(subRecCheckList)\n\n    def validate(self, validateTrace=None) -> None:\n        \"\"\"\n        Check defined expressions for valid structure, check for infinite recursive definitions.\n        \"\"\"\n        warnings.warn(\n            \"ParserElement.validate() is deprecated, and should not be used to check for left recursion\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        self._checkRecursion([])\n\n    def parse_file(\n        self,\n        file_or_filename: Union[str, Path, TextIO],\n        encoding: str = \"utf-8\",\n        parse_all: bool = False,\n        *,\n        parseAll: bool = False,\n    ) -> ParseResults:\n        \"\"\"\n        Execute the parse expression on the given file or filename.\n        If a filename is specified (instead of a file object),\n        the entire file is opened, read, and closed before parsing.\n        \"\"\"\n        parseAll = parseAll or parse_all\n        try:\n            file_or_filename = typing.cast(TextIO, file_or_filename)\n            file_contents = file_or_filename.read()\n        except AttributeError:\n            file_or_filename = typing.cast(str, file_or_filename)\n            with open(file_or_filename, \"r\", encoding=encoding) as f:\n                file_contents = f.read()\n        try:\n            return self.parse_string(file_contents, parseAll)\n        except ParseBaseException as exc:\n            if ParserElement.verbose_stacktrace:\n                raise\n            else:\n                # catch and re-raise exception from here, clears out pyparsing internal stack trace\n                raise exc.with_traceback(None)\n\n    def __eq__(self, other):\n        if self is other:\n            return True\n        elif isinstance(other, str_type):\n            return self.matches(other, parse_all=True)\n        elif isinstance(other, ParserElement):\n            return vars(self) == vars(other)\n        return False\n\n    def __hash__(self):\n        return id(self)\n\n    def matches(\n        self, test_string: str, parse_all: bool = True, *, parseAll: bool = True\n    ) -> bool:\n        \"\"\"\n        Method for quick testing of a parser against a test string. Good for simple\n        inline microtests of sub expressions while building up larger parser.\n\n        Parameters:\n\n        - ``test_string`` - to test against this expression for a match\n        - ``parse_all`` - (default= ``True``) - flag to pass to :class:`parse_string` when running tests\n\n        Example::\n\n            expr = Word(nums)\n            assert expr.matches(\"100\")\n        \"\"\"\n        parseAll = parseAll and parse_all\n        try:\n            self.parse_string(str(test_string), parse_all=parseAll)\n            return True\n        except ParseBaseException:\n            return False\n\n    def run_tests(\n        self,\n        tests: Union[str, List[str]],\n        parse_all: bool = True,\n        comment: typing.Optional[Union[\"ParserElement\", str]] = \"#\",\n        full_dump: bool = True,\n        print_results: bool = True,\n        failure_tests: bool = False,\n        post_parse: typing.Optional[Callable[[str, ParseResults], str]] = None,\n        file: typing.Optional[TextIO] = None,\n        with_line_numbers: bool = False,\n        *,\n        parseAll: bool = True,\n        fullDump: bool = True,\n        printResults: bool = True,\n        failureTests: bool = False,\n        postParse: typing.Optional[Callable[[str, ParseResults], str]] = None,\n    ) -> Tuple[bool, List[Tuple[str, Union[ParseResults, Exception]]]]:\n        \"\"\"\n        Execute the parse expression on a series of test strings, showing each\n        test, the parsed results or where the parse failed. Quick and easy way to\n        run a parse expression against a list of sample strings.\n\n        Parameters:\n\n        - ``tests`` - a list of separate test strings, or a multiline string of test strings\n        - ``parse_all`` - (default= ``True``) - flag to pass to :class:`parse_string` when running tests\n        - ``comment`` - (default= ``'#'``) - expression for indicating embedded comments in the test\n          string; pass None to disable comment filtering\n        - ``full_dump`` - (default= ``True``) - dump results as list followed by results names in nested outline;\n          if False, only dump nested list\n        - ``print_results`` - (default= ``True``) prints test output to stdout\n        - ``failure_tests`` - (default= ``False``) indicates if these tests are expected to fail parsing\n        - ``post_parse`` - (default= ``None``) optional callback for successful parse results; called as\n          `fn(test_string, parse_results)` and returns a string to be added to the test output\n        - ``file`` - (default= ``None``) optional file-like object to which test output will be written;\n          if None, will default to ``sys.stdout``\n        - ``with_line_numbers`` - default= ``False``) show test strings with line and column numbers\n\n        Returns: a (success, results) tuple, where success indicates that all tests succeeded\n        (or failed if ``failure_tests`` is True), and the results contain a list of lines of each\n        test's output\n\n        Example::\n\n            number_expr = pyparsing_common.number.copy()\n\n            result = number_expr.run_tests('''\n                # unsigned integer\n                100\n                # negative integer\n                -100\n                # float with scientific notation\n                6.02e23\n                # integer with scientific notation\n                1e-12\n                ''')\n            print(\"Success\" if result[0] else \"Failed!\")\n\n            result = number_expr.run_tests('''\n                # stray character\n                100Z\n                # missing leading digit before '.'\n                -.100\n                # too many '.'\n                3.14.159\n                ''', failure_tests=True)\n            print(\"Success\" if result[0] else \"Failed!\")\n\n        prints::\n\n            # unsigned integer\n            100\n            [100]\n\n            # negative integer\n            -100\n            [-100]\n\n            # float with scientific notation\n            6.02e23\n            [6.02e+23]\n\n            # integer with scientific notation\n            1e-12\n            [1e-12]\n\n            Success\n\n            # stray character\n            100Z\n               ^\n            FAIL: Expected end of text (at char 3), (line:1, col:4)\n\n            # missing leading digit before '.'\n            -.100\n            ^\n            FAIL: Expected {real number with scientific notation | real number | signed integer} (at char 0), (line:1, col:1)\n\n            # too many '.'\n            3.14.159\n                ^\n            FAIL: Expected end of text (at char 4), (line:1, col:5)\n\n            Success\n\n        Each test string must be on a single line. If you want to test a string that spans multiple\n        lines, create a test like this::\n\n            expr.run_tests(r\"this is a test\\\\n of strings that spans \\\\n 3 lines\")\n\n        (Note that this is a raw string literal, you must include the leading ``'r'``.)\n        \"\"\"\n        from .testing import pyparsing_test\n\n        parseAll = parseAll and parse_all\n        fullDump = fullDump and full_dump\n        printResults = printResults and print_results\n        failureTests = failureTests or failure_tests\n        postParse = postParse or post_parse\n        if isinstance(tests, str_type):\n            tests = typing.cast(str, tests)\n            line_strip = type(tests).strip\n            tests = [line_strip(test_line) for test_line in tests.rstrip().splitlines()]\n        comment_specified = comment is not None\n        if comment_specified:\n            if isinstance(comment, str_type):\n                comment = typing.cast(str, comment)\n                comment = Literal(comment)\n        comment = typing.cast(ParserElement, comment)\n        if file is None:\n            file = sys.stdout\n        print_ = file.write\n\n        result: Union[ParseResults, Exception]\n        allResults: List[Tuple[str, Union[ParseResults, Exception]]] = []\n        comments: List[str] = []\n        success = True\n        NL = Literal(r\"\\n\").add_parse_action(replace_with(\"\\n\")).ignore(quoted_string)\n        BOM = \"\\ufeff\"\n        for t in tests:\n            if comment_specified and comment.matches(t, False) or comments and not t:\n                comments.append(\n                    pyparsing_test.with_line_numbers(t) if with_line_numbers else t\n                )\n                continue\n            if not t:\n                continue\n            out = [\n                \"\\n\" + \"\\n\".join(comments) if comments else \"\",\n                pyparsing_test.with_line_numbers(t) if with_line_numbers else t,\n            ]\n            comments = []\n            try:\n                # convert newline marks to actual newlines, and strip leading BOM if present\n                t = NL.transform_string(t.lstrip(BOM))\n                result = self.parse_string(t, parse_all=parseAll)\n            except ParseBaseException as pe:\n                fatal = \"(FATAL)\" if isinstance(pe, ParseFatalException) else \"\"\n                out.append(pe.explain())\n                out.append(\"FAIL: \" + str(pe))\n                if ParserElement.verbose_stacktrace:\n                    out.extend(traceback.format_tb(pe.__traceback__))\n                success = success and failureTests\n                result = pe\n            except Exception as exc:\n                out.append(f\"FAIL-EXCEPTION: {type(exc).__name__}: {exc}\")\n                if ParserElement.verbose_stacktrace:\n                    out.extend(traceback.format_tb(exc.__traceback__))\n                success = success and failureTests\n                result = exc\n            else:\n                success = success and not failureTests\n                if postParse is not None:\n                    try:\n                        pp_value = postParse(t, result)\n                        if pp_value is not None:\n                            if isinstance(pp_value, ParseResults):\n                                out.append(pp_value.dump())\n                            else:\n                                out.append(str(pp_value))\n                        else:\n                            out.append(result.dump())\n                    except Exception as e:\n                        out.append(result.dump(full=fullDump))\n                        out.append(\n                            f\"{postParse.__name__} failed: {type(e).__name__}: {e}\"\n                        )\n                else:\n                    out.append(result.dump(full=fullDump))\n            out.append(\"\")\n\n            if printResults:\n                print_(\"\\n\".join(out))\n\n            allResults.append((t, result))\n\n        return success, allResults\n\n    def create_diagram(\n        self,\n        output_html: Union[TextIO, Path, str],\n        vertical: int = 3,\n        show_results_names: bool = False,\n        show_groups: bool = False,\n        embed: bool = False,\n        **kwargs,\n    ) -> None:\n        \"\"\"\n        Create a railroad diagram for the parser.\n\n        Parameters:\n\n        - ``output_html`` (str or file-like object) - output target for generated\n          diagram HTML\n        - ``vertical`` (int) - threshold for formatting multiple alternatives vertically\n          instead of horizontally (default=3)\n        - ``show_results_names`` - bool flag whether diagram should show annotations for\n          defined results names\n        - ``show_groups`` - bool flag whether groups should be highlighted with an unlabeled surrounding box\n        - ``embed`` - bool flag whether generated HTML should omit <HEAD>, <BODY>, and <DOCTYPE> tags to embed\n          the resulting HTML in an enclosing HTML source\n        - ``head`` - str containing additional HTML to insert into the <HEAD> section of the generated code;\n          can be used to insert custom CSS styling\n        - ``body`` - str containing additional HTML to insert at the beginning of the <BODY> section of the\n          generated code\n\n        Additional diagram-formatting keyword arguments can also be included;\n        see railroad.Diagram class.\n        \"\"\"\n\n        try:\n            from .diagram import to_railroad, railroad_to_html\n        except ImportError as ie:\n            raise Exception(\n                \"must ``pip install pyparsing[diagrams]`` to generate parser railroad diagrams\"\n            ) from ie\n\n        self.streamline()\n\n        railroad = to_railroad(\n            self,\n            vertical=vertical,\n            show_results_names=show_results_names,\n            show_groups=show_groups,\n            diagram_kwargs=kwargs,\n        )\n        if isinstance(output_html, (str, Path)):\n            with open(output_html, \"w\", encoding=\"utf-8\") as diag_file:\n                diag_file.write(railroad_to_html(railroad, embed=embed, **kwargs))\n        else:\n            # we were passed a file-like object, just write to it\n            output_html.write(railroad_to_html(railroad, embed=embed, **kwargs))\n\n    # Compatibility synonyms\n    # fmt: off\n    @staticmethod\n    @replaced_by_pep8(inline_literals_using)\n    def inlineLiteralsUsing(): ...\n\n    @staticmethod\n    @replaced_by_pep8(set_default_whitespace_chars)\n    def setDefaultWhitespaceChars(): ...\n\n    @replaced_by_pep8(set_results_name)\n    def setResultsName(self): ...\n\n    @replaced_by_pep8(set_break)\n    def setBreak(self): ...\n\n    @replaced_by_pep8(set_parse_action)\n    def setParseAction(self): ...\n\n    @replaced_by_pep8(add_parse_action)\n    def addParseAction(self): ...\n\n    @replaced_by_pep8(add_condition)\n    def addCondition(self): ...\n\n    @replaced_by_pep8(set_fail_action)\n    def setFailAction(self): ...\n\n    @replaced_by_pep8(try_parse)\n    def tryParse(self): ...\n\n    @staticmethod\n    @replaced_by_pep8(enable_left_recursion)\n    def enableLeftRecursion(): ...\n\n    @staticmethod\n    @replaced_by_pep8(enable_packrat)\n    def enablePackrat(): ...\n\n    @replaced_by_pep8(parse_string)\n    def parseString(self): ...\n\n    @replaced_by_pep8(scan_string)\n    def scanString(self): ...\n\n    @replaced_by_pep8(transform_string)\n    def transformString(self): ...\n\n    @replaced_by_pep8(search_string)\n    def searchString(self): ...\n\n    @replaced_by_pep8(ignore_whitespace)\n    def ignoreWhitespace(self): ...\n\n    @replaced_by_pep8(leave_whitespace)\n    def leaveWhitespace(self): ...\n\n    @replaced_by_pep8(set_whitespace_chars)\n    def setWhitespaceChars(self): ...\n\n    @replaced_by_pep8(parse_with_tabs)\n    def parseWithTabs(self): ...\n\n    @replaced_by_pep8(set_debug_actions)\n    def setDebugActions(self): ...\n\n    @replaced_by_pep8(set_debug)\n    def setDebug(self): ...\n\n    @replaced_by_pep8(set_name)\n    def setName(self): ...\n\n    @replaced_by_pep8(parse_file)\n    def parseFile(self): ...\n\n    @replaced_by_pep8(run_tests)\n    def runTests(self): ...\n\n    canParseNext = can_parse_next\n    resetCache = reset_cache\n    defaultName = default_name\n    # fmt: on\n\n\nclass _PendingSkip(ParserElement):\n    # internal placeholder class to hold a place were '...' is added to a parser element,\n    # once another ParserElement is added, this placeholder will be replaced with a SkipTo\n    def __init__(self, expr: ParserElement, must_skip: bool = False):\n        super().__init__()\n        self.anchor = expr\n        self.must_skip = must_skip\n\n    def _generateDefaultName(self) -> str:\n        return str(self.anchor + Empty()).replace(\"Empty\", \"...\")\n\n    def __add__(self, other) -> \"ParserElement\":\n        skipper = SkipTo(other).set_name(\"...\")(\"_skipped*\")\n        if self.must_skip:\n\n            def must_skip(t):\n                if not t._skipped or t._skipped.as_list() == [\"\"]:\n                    del t[0]\n                    t.pop(\"_skipped\", None)\n\n            def show_skip(t):\n                if t._skipped.as_list()[-1:] == [\"\"]:\n                    t.pop(\"_skipped\")\n                    t[\"_skipped\"] = \"missing <\" + repr(self.anchor) + \">\"\n\n            return (\n                self.anchor + skipper().add_parse_action(must_skip)\n                | skipper().add_parse_action(show_skip)\n            ) + other\n\n        return self.anchor + skipper + other\n\n    def __repr__(self):\n        return self.defaultName\n\n    def parseImpl(self, *args):\n        raise Exception(\n            \"use of `...` expression without following SkipTo target expression\"\n        )\n\n\nclass Token(ParserElement):\n    \"\"\"Abstract :class:`ParserElement` subclass, for defining atomic\n    matching patterns.\n    \"\"\"\n\n    def __init__(self):\n        super().__init__(savelist=False)\n\n    def _generateDefaultName(self) -> str:\n        return type(self).__name__\n\n\nclass NoMatch(Token):\n    \"\"\"\n    A token that will never match.\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.mayReturnEmpty = True\n        self.mayIndexError = False\n        self.errmsg = \"Unmatchable token\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass Literal(Token):\n    \"\"\"\n    Token to exactly match a specified string.\n\n    Example::\n\n        Literal('blah').parse_string('blah')  # -> ['blah']\n        Literal('blah').parse_string('blahfooblah')  # -> ['blah']\n        Literal('blah').parse_string('bla')  # -> Exception: Expected \"blah\"\n\n    For case-insensitive matching, use :class:`CaselessLiteral`.\n\n    For keyword matching (force word break before and after the matched string),\n    use :class:`Keyword` or :class:`CaselessKeyword`.\n    \"\"\"\n\n    def __new__(cls, match_string: str = \"\", *, matchString: str = \"\"):\n        # Performance tuning: select a subclass with optimized parseImpl\n        if cls is Literal:\n            match_string = matchString or match_string\n            if not match_string:\n                return super().__new__(Empty)\n            if len(match_string) == 1:\n                return super().__new__(_SingleCharLiteral)\n\n        # Default behavior\n        return super().__new__(cls)\n\n    # Needed to make copy.copy() work correctly if we customize __new__\n    def __getnewargs__(self):\n        return (self.match,)\n\n    def __init__(self, match_string: str = \"\", *, matchString: str = \"\"):\n        super().__init__()\n        match_string = matchString or match_string\n        self.match = match_string\n        self.matchLen = len(match_string)\n        self.firstMatchChar = match_string[:1]\n        self.errmsg = \"Expected \" + self.name\n        self.mayReturnEmpty = False\n        self.mayIndexError = False\n\n    def _generateDefaultName(self) -> str:\n        return repr(self.match)\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if instring[loc] == self.firstMatchChar and instring.startswith(\n            self.match, loc\n        ):\n            return loc + self.matchLen, self.match\n        raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass Empty(Literal):\n    \"\"\"\n    An empty token, will always match.\n    \"\"\"\n\n    def __init__(self, match_string=\"\", *, matchString=\"\"):\n        super().__init__(\"\")\n        self.mayReturnEmpty = True\n        self.mayIndexError = False\n\n    def _generateDefaultName(self) -> str:\n        return \"Empty\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        return loc, []\n\n\nclass _SingleCharLiteral(Literal):\n    def parseImpl(self, instring, loc, doActions=True):\n        if instring[loc] == self.firstMatchChar:\n            return loc + 1, self.match\n        raise ParseException(instring, loc, self.errmsg, self)\n\n\nParserElement._literalStringClass = Literal\n\n\nclass Keyword(Token):\n    \"\"\"\n    Token to exactly match a specified string as a keyword, that is,\n    it must be immediately preceded and followed by whitespace or\n    non-keyword characters. Compare with :class:`Literal`:\n\n    - ``Literal(\"if\")`` will match the leading ``'if'`` in\n      ``'ifAndOnlyIf'``.\n    - ``Keyword(\"if\")`` will not; it will only match the leading\n      ``'if'`` in ``'if x=1'``, or ``'if(y==2)'``\n\n    Accepts two optional constructor arguments in addition to the\n    keyword string:\n\n    - ``ident_chars`` is a string of characters that would be valid\n      identifier characters, defaulting to all alphanumerics + \"_\" and\n      \"$\"\n    - ``caseless`` allows case-insensitive matching, default is ``False``.\n\n    Example::\n\n        Keyword(\"start\").parse_string(\"start\")  # -> ['start']\n        Keyword(\"start\").parse_string(\"starting\")  # -> Exception\n\n    For case-insensitive matching, use :class:`CaselessKeyword`.\n    \"\"\"\n\n    DEFAULT_KEYWORD_CHARS = alphanums + \"_$\"\n\n    def __init__(\n        self,\n        match_string: str = \"\",\n        ident_chars: typing.Optional[str] = None,\n        caseless: bool = False,\n        *,\n        matchString: str = \"\",\n        identChars: typing.Optional[str] = None,\n    ):\n        super().__init__()\n        identChars = identChars or ident_chars\n        if identChars is None:\n            identChars = Keyword.DEFAULT_KEYWORD_CHARS\n        match_string = matchString or match_string\n        self.match = match_string\n        self.matchLen = len(match_string)\n        try:\n            self.firstMatchChar = match_string[0]\n        except IndexError:\n            raise ValueError(\"null string passed to Keyword; use Empty() instead\")\n        self.errmsg = f\"Expected {type(self).__name__} {self.name}\"\n        self.mayReturnEmpty = False\n        self.mayIndexError = False\n        self.caseless = caseless\n        if caseless:\n            self.caselessmatch = match_string.upper()\n            identChars = identChars.upper()\n        self.identChars = set(identChars)\n\n    def _generateDefaultName(self) -> str:\n        return repr(self.match)\n\n    def parseImpl(self, instring, loc, doActions=True):\n        errmsg = self.errmsg\n        errloc = loc\n        if self.caseless:\n            if instring[loc : loc + self.matchLen].upper() == self.caselessmatch:\n                if loc == 0 or instring[loc - 1].upper() not in self.identChars:\n                    if (\n                        loc >= len(instring) - self.matchLen\n                        or instring[loc + self.matchLen].upper() not in self.identChars\n                    ):\n                        return loc + self.matchLen, self.match\n                    else:\n                        # followed by keyword char\n                        errmsg += \", was immediately followed by keyword character\"\n                        errloc = loc + self.matchLen\n                else:\n                    # preceded by keyword char\n                    errmsg += \", keyword was immediately preceded by keyword character\"\n                    errloc = loc - 1\n            # else no match just raise plain exception\n\n        else:\n            if (\n                instring[loc] == self.firstMatchChar\n                and self.matchLen == 1\n                or instring.startswith(self.match, loc)\n            ):\n                if loc == 0 or instring[loc - 1] not in self.identChars:\n                    if (\n                        loc >= len(instring) - self.matchLen\n                        or instring[loc + self.matchLen] not in self.identChars\n                    ):\n                        return loc + self.matchLen, self.match\n                    else:\n                        # followed by keyword char\n                        errmsg += (\n                            \", keyword was immediately followed by keyword character\"\n                        )\n                        errloc = loc + self.matchLen\n                else:\n                    # preceded by keyword char\n                    errmsg += \", keyword was immediately preceded by keyword character\"\n                    errloc = loc - 1\n            # else no match just raise plain exception\n\n        raise ParseException(instring, errloc, errmsg, self)\n\n    @staticmethod\n    def set_default_keyword_chars(chars) -> None:\n        \"\"\"\n        Overrides the default characters used by :class:`Keyword` expressions.\n        \"\"\"\n        Keyword.DEFAULT_KEYWORD_CHARS = chars\n\n    setDefaultKeywordChars = set_default_keyword_chars\n\n\nclass CaselessLiteral(Literal):\n    \"\"\"\n    Token to match a specified string, ignoring case of letters.\n    Note: the matched results will always be in the case of the given\n    match string, NOT the case of the input text.\n\n    Example::\n\n        CaselessLiteral(\"CMD\")[1, ...].parse_string(\"cmd CMD Cmd10\")\n        # -> ['CMD', 'CMD', 'CMD']\n\n    (Contrast with example for :class:`CaselessKeyword`.)\n    \"\"\"\n\n    def __init__(self, match_string: str = \"\", *, matchString: str = \"\"):\n        match_string = matchString or match_string\n        super().__init__(match_string.upper())\n        # Preserve the defining literal.\n        self.returnString = match_string\n        self.errmsg = \"Expected \" + self.name\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if instring[loc : loc + self.matchLen].upper() == self.match:\n            return loc + self.matchLen, self.returnString\n        raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass CaselessKeyword(Keyword):\n    \"\"\"\n    Caseless version of :class:`Keyword`.\n\n    Example::\n\n        CaselessKeyword(\"CMD\")[1, ...].parse_string(\"cmd CMD Cmd10\")\n        # -> ['CMD', 'CMD']\n\n    (Contrast with example for :class:`CaselessLiteral`.)\n    \"\"\"\n\n    def __init__(\n        self,\n        match_string: str = \"\",\n        ident_chars: typing.Optional[str] = None,\n        *,\n        matchString: str = \"\",\n        identChars: typing.Optional[str] = None,\n    ):\n        identChars = identChars or ident_chars\n        match_string = matchString or match_string\n        super().__init__(match_string, identChars, caseless=True)\n\n\nclass CloseMatch(Token):\n    \"\"\"A variation on :class:`Literal` which matches \"close\" matches,\n    that is, strings with at most 'n' mismatching characters.\n    :class:`CloseMatch` takes parameters:\n\n    - ``match_string`` - string to be matched\n    - ``caseless`` - a boolean indicating whether to ignore casing when comparing characters\n    - ``max_mismatches`` - (``default=1``) maximum number of\n      mismatches allowed to count as a match\n\n    The results from a successful parse will contain the matched text\n    from the input string and the following named results:\n\n    - ``mismatches`` - a list of the positions within the\n      match_string where mismatches were found\n    - ``original`` - the original match_string used to compare\n      against the input string\n\n    If ``mismatches`` is an empty list, then the match was an exact\n    match.\n\n    Example::\n\n        patt = CloseMatch(\"ATCATCGAATGGA\")\n        patt.parse_string(\"ATCATCGAAXGGA\") # -> (['ATCATCGAAXGGA'], {'mismatches': [[9]], 'original': ['ATCATCGAATGGA']})\n        patt.parse_string(\"ATCAXCGAAXGGA\") # -> Exception: Expected 'ATCATCGAATGGA' (with up to 1 mismatches) (at char 0), (line:1, col:1)\n\n        # exact match\n        patt.parse_string(\"ATCATCGAATGGA\") # -> (['ATCATCGAATGGA'], {'mismatches': [[]], 'original': ['ATCATCGAATGGA']})\n\n        # close match allowing up to 2 mismatches\n        patt = CloseMatch(\"ATCATCGAATGGA\", max_mismatches=2)\n        patt.parse_string(\"ATCAXCGAAXGGA\") # -> (['ATCAXCGAAXGGA'], {'mismatches': [[4, 9]], 'original': ['ATCATCGAATGGA']})\n    \"\"\"\n\n    def __init__(\n        self,\n        match_string: str,\n        max_mismatches: typing.Optional[int] = None,\n        *,\n        maxMismatches: int = 1,\n        caseless=False,\n    ):\n        maxMismatches = max_mismatches if max_mismatches is not None else maxMismatches\n        super().__init__()\n        self.match_string = match_string\n        self.maxMismatches = maxMismatches\n        self.errmsg = f\"Expected {self.match_string!r} (with up to {self.maxMismatches} mismatches)\"\n        self.caseless = caseless\n        self.mayIndexError = False\n        self.mayReturnEmpty = False\n\n    def _generateDefaultName(self) -> str:\n        return f\"{type(self).__name__}:{self.match_string!r}\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        start = loc\n        instrlen = len(instring)\n        maxloc = start + len(self.match_string)\n\n        if maxloc <= instrlen:\n            match_string = self.match_string\n            match_stringloc = 0\n            mismatches = []\n            maxMismatches = self.maxMismatches\n\n            for match_stringloc, s_m in enumerate(\n                zip(instring[loc:maxloc], match_string)\n            ):\n                src, mat = s_m\n                if self.caseless:\n                    src, mat = src.lower(), mat.lower()\n\n                if src != mat:\n                    mismatches.append(match_stringloc)\n                    if len(mismatches) > maxMismatches:\n                        break\n            else:\n                loc = start + match_stringloc + 1\n                results = ParseResults([instring[start:loc]])\n                results[\"original\"] = match_string\n                results[\"mismatches\"] = mismatches\n                return loc, results\n\n        raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass Word(Token):\n    \"\"\"Token for matching words composed of allowed character sets.\n\n    Parameters:\n\n    - ``init_chars`` - string of all characters that should be used to\n      match as a word; \"ABC\" will match \"AAA\", \"ABAB\", \"CBAC\", etc.;\n      if ``body_chars`` is also specified, then this is the string of\n      initial characters\n    - ``body_chars`` - string of characters that\n      can be used for matching after a matched initial character as\n      given in ``init_chars``; if omitted, same as the initial characters\n      (default=``None``)\n    - ``min`` - minimum number of characters to match (default=1)\n    - ``max`` - maximum number of characters to match (default=0)\n    - ``exact`` - exact number of characters to match (default=0)\n    - ``as_keyword`` - match as a keyword (default=``False``)\n    - ``exclude_chars`` - characters that might be\n      found in the input ``body_chars`` string but which should not be\n      accepted for matching ;useful to define a word of all\n      printables except for one or two characters, for instance\n      (default=``None``)\n\n    :class:`srange` is useful for defining custom character set strings\n    for defining :class:`Word` expressions, using range notation from\n    regular expression character sets.\n\n    A common mistake is to use :class:`Word` to match a specific literal\n    string, as in ``Word(\"Address\")``. Remember that :class:`Word`\n    uses the string argument to define *sets* of matchable characters.\n    This expression would match \"Add\", \"AAA\", \"dAred\", or any other word\n    made up of the characters 'A', 'd', 'r', 'e', and 's'. To match an\n    exact literal string, use :class:`Literal` or :class:`Keyword`.\n\n    pyparsing includes helper strings for building Words:\n\n    - :class:`alphas`\n    - :class:`nums`\n    - :class:`alphanums`\n    - :class:`hexnums`\n    - :class:`alphas8bit` (alphabetic characters in ASCII range 128-255\n      - accented, tilded, umlauted, etc.)\n    - :class:`punc8bit` (non-alphabetic characters in ASCII range\n      128-255 - currency, symbols, superscripts, diacriticals, etc.)\n    - :class:`printables` (any non-whitespace character)\n\n    ``alphas``, ``nums``, and ``printables`` are also defined in several\n    Unicode sets - see :class:`pyparsing_unicode``.\n\n    Example::\n\n        # a word composed of digits\n        integer = Word(nums) # equivalent to Word(\"0123456789\") or Word(srange(\"0-9\"))\n\n        # a word with a leading capital, and zero or more lowercase\n        capital_word = Word(alphas.upper(), alphas.lower())\n\n        # hostnames are alphanumeric, with leading alpha, and '-'\n        hostname = Word(alphas, alphanums + '-')\n\n        # roman numeral (not a strict parser, accepts invalid mix of characters)\n        roman = Word(\"IVXLCDM\")\n\n        # any string of non-whitespace characters, except for ','\n        csv_value = Word(printables, exclude_chars=\",\")\n    \"\"\"\n\n    def __init__(\n        self,\n        init_chars: str = \"\",\n        body_chars: typing.Optional[str] = None,\n        min: int = 1,\n        max: int = 0,\n        exact: int = 0,\n        as_keyword: bool = False,\n        exclude_chars: typing.Optional[str] = None,\n        *,\n        initChars: typing.Optional[str] = None,\n        bodyChars: typing.Optional[str] = None,\n        asKeyword: bool = False,\n        excludeChars: typing.Optional[str] = None,\n    ):\n        initChars = initChars or init_chars\n        bodyChars = bodyChars or body_chars\n        asKeyword = asKeyword or as_keyword\n        excludeChars = excludeChars or exclude_chars\n        super().__init__()\n        if not initChars:\n            raise ValueError(\n                f\"invalid {type(self).__name__}, initChars cannot be empty string\"\n            )\n\n        initChars_set = set(initChars)\n        if excludeChars:\n            excludeChars_set = set(excludeChars)\n            initChars_set -= excludeChars_set\n            if bodyChars:\n                bodyChars = \"\".join(set(bodyChars) - excludeChars_set)\n        self.initChars = initChars_set\n        self.initCharsOrig = \"\".join(sorted(initChars_set))\n\n        if bodyChars:\n            self.bodyChars = set(bodyChars)\n            self.bodyCharsOrig = \"\".join(sorted(bodyChars))\n        else:\n            self.bodyChars = initChars_set\n            self.bodyCharsOrig = self.initCharsOrig\n\n        self.maxSpecified = max > 0\n\n        if min < 1:\n            raise ValueError(\n                \"cannot specify a minimum length < 1; use Opt(Word()) if zero-length word is permitted\"\n            )\n\n        if self.maxSpecified and min > max:\n            raise ValueError(\n                f\"invalid args, if min and max both specified min must be <= max (min={min}, max={max})\"\n            )\n\n        self.minLen = min\n\n        if max > 0:\n            self.maxLen = max\n        else:\n            self.maxLen = _MAX_INT\n\n        if exact > 0:\n            min = max = exact\n            self.maxLen = exact\n            self.minLen = exact\n\n        self.errmsg = \"Expected \" + self.name\n        self.mayIndexError = False\n        self.asKeyword = asKeyword\n        if self.asKeyword:\n            self.errmsg += \" as a keyword\"\n\n        # see if we can make a regex for this Word\n        if \" \" not in (self.initChars | self.bodyChars):\n            if len(self.initChars) == 1:\n                re_leading_fragment = re.escape(self.initCharsOrig)\n            else:\n                re_leading_fragment = f\"[{_collapse_string_to_ranges(self.initChars)}]\"\n\n            if self.bodyChars == self.initChars:\n                if max == 0:\n                    repeat = \"+\"\n                elif max == 1:\n                    repeat = \"\"\n                else:\n                    if self.minLen != self.maxLen:\n                        repeat = f\"{{{self.minLen},{'' if self.maxLen == _MAX_INT else self.maxLen}}}\"\n                    else:\n                        repeat = f\"{{{self.minLen}}}\"\n                self.reString = f\"{re_leading_fragment}{repeat}\"\n            else:\n                if max == 1:\n                    re_body_fragment = \"\"\n                    repeat = \"\"\n                else:\n                    re_body_fragment = f\"[{_collapse_string_to_ranges(self.bodyChars)}]\"\n                    if max == 0:\n                        repeat = \"*\"\n                    elif max == 2:\n                        repeat = \"?\" if min <= 1 else \"\"\n                    else:\n                        if min != max:\n                            repeat = f\"{{{min - 1 if min > 0 else 0},{max - 1}}}\"\n                        else:\n                            repeat = f\"{{{min - 1 if min > 0 else 0}}}\"\n\n                self.reString = (\n                    f\"{re_leading_fragment}\" f\"{re_body_fragment}\" f\"{repeat}\"\n                )\n\n            if self.asKeyword:\n                self.reString = rf\"\\b{self.reString}\\b\"\n\n            try:\n                self.re = re.compile(self.reString)\n            except re.error:\n                self.re = None  # type: ignore[assignment]\n            else:\n                self.re_match = self.re.match\n                self.parseImpl = self.parseImpl_regex  # type: ignore[assignment]\n\n    def _generateDefaultName(self) -> str:\n        def charsAsStr(s):\n            max_repr_len = 16\n            s = _collapse_string_to_ranges(s, re_escape=False)\n            if len(s) > max_repr_len:\n                return s[: max_repr_len - 3] + \"...\"\n            else:\n                return s\n\n        if self.initChars != self.bodyChars:\n            base = f\"W:({charsAsStr(self.initChars)}, {charsAsStr(self.bodyChars)})\"\n        else:\n            base = f\"W:({charsAsStr(self.initChars)})\"\n\n        # add length specification\n        if self.minLen > 1 or self.maxLen != _MAX_INT:\n            if self.minLen == self.maxLen:\n                if self.minLen == 1:\n                    return base[2:]\n                else:\n                    return base + f\"{{{self.minLen}}}\"\n            elif self.maxLen == _MAX_INT:\n                return base + f\"{{{self.minLen},...}}\"\n            else:\n                return base + f\"{{{self.minLen},{self.maxLen}}}\"\n        return base\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if instring[loc] not in self.initChars:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        start = loc\n        loc += 1\n        instrlen = len(instring)\n        bodychars = self.bodyChars\n        maxloc = start + self.maxLen\n        maxloc = min(maxloc, instrlen)\n        while loc < maxloc and instring[loc] in bodychars:\n            loc += 1\n\n        throwException = False\n        if loc - start < self.minLen:\n            throwException = True\n        elif self.maxSpecified and loc < instrlen and instring[loc] in bodychars:\n            throwException = True\n        elif self.asKeyword:\n            if (\n                start > 0\n                and instring[start - 1] in bodychars\n                or loc < instrlen\n                and instring[loc] in bodychars\n            ):\n                throwException = True\n\n        if throwException:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        return loc, instring[start:loc]\n\n    def parseImpl_regex(self, instring, loc, doActions=True):\n        result = self.re_match(instring, loc)\n        if not result:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        loc = result.end()\n        return loc, result.group()\n\n\nclass Char(Word):\n    \"\"\"A short-cut class for defining :class:`Word` ``(characters, exact=1)``,\n    when defining a match of any single character in a string of\n    characters.\n    \"\"\"\n\n    def __init__(\n        self,\n        charset: str,\n        as_keyword: bool = False,\n        exclude_chars: typing.Optional[str] = None,\n        *,\n        asKeyword: bool = False,\n        excludeChars: typing.Optional[str] = None,\n    ):\n        asKeyword = asKeyword or as_keyword\n        excludeChars = excludeChars or exclude_chars\n        super().__init__(\n            charset, exact=1, as_keyword=asKeyword, exclude_chars=excludeChars\n        )\n\n\nclass Regex(Token):\n    r\"\"\"Token for matching strings that match a given regular\n    expression. Defined with string specifying the regular expression in\n    a form recognized by the stdlib Python  `re module <https://docs.python.org/3/library/re.html>`_.\n    If the given regex contains named groups (defined using ``(?P<name>...)``),\n    these will be preserved as named :class:`ParseResults`.\n\n    If instead of the Python stdlib ``re`` module you wish to use a different RE module\n    (such as the ``regex`` module), you can do so by building your ``Regex`` object with\n    a compiled RE that was compiled using ``regex``.\n\n    Example::\n\n        realnum = Regex(r\"[+-]?\\d+\\.\\d*\")\n        # ref: https://stackoverflow.com/questions/267399/how-do-you-match-only-valid-roman-numerals-with-a-regular-expression\n        roman = Regex(r\"M{0,4}(CM|CD|D?{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\")\n\n        # named fields in a regex will be returned as named results\n        date = Regex(r'(?P<year>\\d{4})-(?P<month>\\d\\d?)-(?P<day>\\d\\d?)')\n\n        # the Regex class will accept re's compiled using the regex module\n        import regex\n        parser = pp.Regex(regex.compile(r'[0-9]'))\n    \"\"\"\n\n    def __init__(\n        self,\n        pattern: Any,\n        flags: Union[re.RegexFlag, int] = 0,\n        as_group_list: bool = False,\n        as_match: bool = False,\n        *,\n        asGroupList: bool = False,\n        asMatch: bool = False,\n    ):\n        \"\"\"The parameters ``pattern`` and ``flags`` are passed\n        to the ``re.compile()`` function as-is. See the Python\n        `re module <https://docs.python.org/3/library/re.html>`_ module for an\n        explanation of the acceptable patterns and flags.\n        \"\"\"\n        super().__init__()\n        asGroupList = asGroupList or as_group_list\n        asMatch = asMatch or as_match\n\n        if isinstance(pattern, str_type):\n            if not pattern:\n                raise ValueError(\"null string passed to Regex; use Empty() instead\")\n\n            self._re = None\n            self.reString = self.pattern = pattern\n            self.flags = flags\n\n        elif hasattr(pattern, \"pattern\") and hasattr(pattern, \"match\"):\n            self._re = pattern\n            self.pattern = self.reString = pattern.pattern\n            self.flags = flags\n\n        else:\n            raise TypeError(\n                \"Regex may only be constructed with a string or a compiled RE object\"\n            )\n\n        self.errmsg = \"Expected \" + self.name\n        self.mayIndexError = False\n        self.asGroupList = asGroupList\n        self.asMatch = asMatch\n        if self.asGroupList:\n            self.parseImpl = self.parseImplAsGroupList  # type: ignore [assignment]\n        if self.asMatch:\n            self.parseImpl = self.parseImplAsMatch  # type: ignore [assignment]\n\n    @cached_property\n    def re(self):\n        if self._re:\n            return self._re\n        else:\n            try:\n                return re.compile(self.pattern, self.flags)\n            except re.error:\n                raise ValueError(f\"invalid pattern ({self.pattern!r}) passed to Regex\")\n\n    @cached_property\n    def re_match(self):\n        return self.re.match\n\n    @cached_property\n    def mayReturnEmpty(self):\n        return self.re_match(\"\") is not None\n\n    def _generateDefaultName(self) -> str:\n        return \"Re:({})\".format(repr(self.pattern).replace(\"\\\\\\\\\", \"\\\\\"))\n\n    def parseImpl(self, instring, loc, doActions=True):\n        result = self.re_match(instring, loc)\n        if not result:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        loc = result.end()\n        ret = ParseResults(result.group())\n        d = result.groupdict()\n        if d:\n            for k, v in d.items():\n                ret[k] = v\n        return loc, ret\n\n    def parseImplAsGroupList(self, instring, loc, doActions=True):\n        result = self.re_match(instring, loc)\n        if not result:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        loc = result.end()\n        ret = result.groups()\n        return loc, ret\n\n    def parseImplAsMatch(self, instring, loc, doActions=True):\n        result = self.re_match(instring, loc)\n        if not result:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        loc = result.end()\n        ret = result\n        return loc, ret\n\n    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(as_group_list=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\n                \"cannot use sub() with a callable with Regex(as_match=True)\"\n            )\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\nclass QuotedString(Token):\n    r\"\"\"\n    Token for matching strings that are delimited by quoting characters.\n\n    Defined with the following parameters:\n\n    - ``quote_char`` - string of one or more characters defining the\n      quote delimiting string\n    - ``esc_char`` - character to re_escape quotes, typically backslash\n      (default= ``None``)\n    - ``esc_quote`` - special quote sequence to re_escape an embedded quote\n      string (such as SQL's ``\"\"`` to re_escape an embedded ``\"``)\n      (default= ``None``)\n    - ``multiline`` - boolean indicating whether quotes can span\n      multiple lines (default= ``False``)\n    - ``unquote_results`` - boolean indicating whether the matched text\n      should be unquoted (default= ``True``)\n    - ``end_quote_char`` - string of one or more characters defining the\n      end of the quote delimited string (default= ``None``  => same as\n      quote_char)\n    - ``convert_whitespace_escapes`` - convert escaped whitespace\n      (``'\\t'``, ``'\\n'``, etc.) to actual whitespace\n      (default= ``True``)\n\n    Example::\n\n        qs = QuotedString('\"')\n        print(qs.search_string('lsjdf \"This is the quote\" sldjf'))\n        complex_qs = QuotedString('{{', end_quote_char='}}')\n        print(complex_qs.search_string('lsjdf {{This is the \"quote\"}} sldjf'))\n        sql_qs = QuotedString('\"', esc_quote='\"\"')\n        print(sql_qs.search_string('lsjdf \"This is the quote with \"\"embedded\"\" quotes\" sldjf'))\n\n    prints::\n\n        [['This is the quote']]\n        [['This is the \"quote\"']]\n        [['This is the quote with \"embedded\" quotes']]\n    \"\"\"\n    ws_map = dict(((r\"\\t\", \"\\t\"), (r\"\\n\", \"\\n\"), (r\"\\f\", \"\\f\"), (r\"\\r\", \"\\r\")))\n\n    def __init__(\n        self,\n        quote_char: str = \"\",\n        esc_char: typing.Optional[str] = None,\n        esc_quote: typing.Optional[str] = None,\n        multiline: bool = False,\n        unquote_results: bool = True,\n        end_quote_char: typing.Optional[str] = None,\n        convert_whitespace_escapes: bool = True,\n        *,\n        quoteChar: str = \"\",\n        escChar: typing.Optional[str] = None,\n        escQuote: typing.Optional[str] = None,\n        unquoteResults: bool = True,\n        endQuoteChar: typing.Optional[str] = None,\n        convertWhitespaceEscapes: bool = True,\n    ):\n        super().__init__()\n        escChar = escChar or esc_char\n        escQuote = escQuote or esc_quote\n        unquoteResults = unquoteResults and unquote_results\n        endQuoteChar = endQuoteChar or end_quote_char\n        convertWhitespaceEscapes = (\n            convertWhitespaceEscapes and convert_whitespace_escapes\n        )\n        quote_char = quoteChar or quote_char\n\n        # remove white space from quote chars - wont work anyway\n        quote_char = quote_char.strip()\n        if not quote_char:\n            raise ValueError(\"quote_char cannot be the empty string\")\n\n        if endQuoteChar is None:\n            endQuoteChar = quote_char\n        else:\n            endQuoteChar = endQuoteChar.strip()\n            if not endQuoteChar:\n                raise ValueError(\"end_quote_char cannot be the empty string\")\n\n        self.quoteChar: str = quote_char\n        self.quoteCharLen: int = len(quote_char)\n        self.firstQuoteChar: str = quote_char[0]\n        self.endQuoteChar: str = endQuoteChar\n        self.endQuoteCharLen: int = len(endQuoteChar)\n        self.escChar: str = escChar or \"\"\n        self.escQuote: str = escQuote or \"\"\n        self.unquoteResults: bool = unquoteResults\n        self.convertWhitespaceEscapes: bool = convertWhitespaceEscapes\n        self.multiline = multiline\n\n        sep = \"\"\n        inner_pattern = \"\"\n\n        if escQuote:\n            inner_pattern += rf\"{sep}(?:{re.escape(escQuote)})\"\n            sep = \"|\"\n\n        if escChar:\n            inner_pattern += rf\"{sep}(?:{re.escape(escChar)}.)\"\n            sep = \"|\"\n            self.escCharReplacePattern = re.escape(escChar) + \"(.)\"\n\n        if len(self.endQuoteChar) > 1:\n            inner_pattern += (\n                f\"{sep}(?:\"\n                + \"|\".join(\n                    f\"(?:{re.escape(self.endQuoteChar[:i])}(?!{re.escape(self.endQuoteChar[i:])}))\"\n                    for i in range(len(self.endQuoteChar) - 1, 0, -1)\n                )\n                + \")\"\n            )\n            sep = \"|\"\n\n        self.flags = re.RegexFlag(0)\n\n        if multiline:\n            self.flags = re.MULTILINE | re.DOTALL\n            inner_pattern += (\n                rf\"{sep}(?:[^{_escape_regex_range_chars(self.endQuoteChar[0])}\"\n                rf\"{(_escape_regex_range_chars(escChar) if escChar is not None else '')}])\"\n            )\n        else:\n            inner_pattern += (\n                rf\"{sep}(?:[^{_escape_regex_range_chars(self.endQuoteChar[0])}\\n\\r\"\n                rf\"{(_escape_regex_range_chars(escChar) if escChar is not None else '')}])\"\n            )\n\n        self.pattern = \"\".join(\n            [\n                re.escape(self.quoteChar),\n                \"(?:\",\n                inner_pattern,\n                \")*\",\n                re.escape(self.endQuoteChar),\n            ]\n        )\n\n        if self.unquoteResults:\n            if self.convertWhitespaceEscapes:\n                self.unquote_scan_re = re.compile(\n                    rf\"({'|'.join(re.escape(k) for k in self.ws_map)})|({re.escape(self.escChar)}.)|(\\n|.)\",\n                    flags=self.flags,\n                )\n            else:\n                self.unquote_scan_re = re.compile(\n                    rf\"({re.escape(self.escChar)}.)|(\\n|.)\", flags=self.flags\n                )\n\n        try:\n            self.re = re.compile(self.pattern, self.flags)\n            self.reString = self.pattern\n            self.re_match = self.re.match\n        except re.error:\n            raise ValueError(f\"invalid pattern {self.pattern!r} passed to Regex\")\n\n        self.errmsg = \"Expected \" + self.name\n        self.mayIndexError = False\n        self.mayReturnEmpty = True\n\n    def _generateDefaultName(self) -> str:\n        if self.quoteChar == self.endQuoteChar and isinstance(self.quoteChar, str_type):\n            return f\"string enclosed in {self.quoteChar!r}\"\n\n        return f\"quoted string, starting with {self.quoteChar} ending with {self.endQuoteChar}\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        result = (\n            instring[loc] == self.firstQuoteChar\n            and self.re_match(instring, loc)\n            or None\n        )\n        if not result:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        loc = result.end()\n        ret = result.group()\n\n        if self.unquoteResults:\n            # strip off quotes\n            ret = ret[self.quoteCharLen : -self.endQuoteCharLen]\n\n            if isinstance(ret, str_type):\n                if self.convertWhitespaceEscapes:\n                    ret = \"\".join(\n                        self.ws_map[match.group(1)]\n                        if match.group(1)\n                        else match.group(2)[-1]\n                        if match.group(2)\n                        else match.group(3)\n                        for match in self.unquote_scan_re.finditer(ret)\n                    )\n                else:\n                    ret = \"\".join(\n                        match.group(1)[-1] if match.group(1) else match.group(2)\n                        for match in self.unquote_scan_re.finditer(ret)\n                    )\n\n                # replace escaped quotes\n                if self.escQuote:\n                    ret = ret.replace(self.escQuote, self.endQuoteChar)\n\n        return loc, ret\n\n\nclass CharsNotIn(Token):\n    \"\"\"Token for matching words composed of characters *not* in a given\n    set (will include whitespace in matched characters if not listed in\n    the provided exclusion set - see example). Defined with string\n    containing all disallowed characters, and an optional minimum,\n    maximum, and/or exact length.  The default value for ``min`` is\n    1 (a minimum value < 1 is not valid); the default values for\n    ``max`` and ``exact`` are 0, meaning no maximum or exact\n    length restriction.\n\n    Example::\n\n        # define a comma-separated-value as anything that is not a ','\n        csv_value = CharsNotIn(',')\n        print(DelimitedList(csv_value).parse_string(\"dkls,lsdkjf,s12 34,@!#,213\"))\n\n    prints::\n\n        ['dkls', 'lsdkjf', 's12 34', '@!#', '213']\n    \"\"\"\n\n    def __init__(\n        self,\n        not_chars: str = \"\",\n        min: int = 1,\n        max: int = 0,\n        exact: int = 0,\n        *,\n        notChars: str = \"\",\n    ):\n        super().__init__()\n        self.skipWhitespace = False\n        self.notChars = not_chars or notChars\n        self.notCharsSet = set(self.notChars)\n\n        if min < 1:\n            raise ValueError(\n                \"cannot specify a minimum length < 1; use \"\n                \"Opt(CharsNotIn()) if zero-length char group is permitted\"\n            )\n\n        self.minLen = min\n\n        if max > 0:\n            self.maxLen = max\n        else:\n            self.maxLen = _MAX_INT\n\n        if exact > 0:\n            self.maxLen = exact\n            self.minLen = exact\n\n        self.errmsg = \"Expected \" + self.name\n        self.mayReturnEmpty = self.minLen == 0\n        self.mayIndexError = False\n\n    def _generateDefaultName(self) -> str:\n        not_chars_str = _collapse_string_to_ranges(self.notChars)\n        if len(not_chars_str) > 16:\n            return f\"!W:({self.notChars[: 16 - 3]}...)\"\n        else:\n            return f\"!W:({self.notChars})\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        notchars = self.notCharsSet\n        if instring[loc] in notchars:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        start = loc\n        loc += 1\n        maxlen = min(start + self.maxLen, len(instring))\n        while loc < maxlen and instring[loc] not in notchars:\n            loc += 1\n\n        if loc - start < self.minLen:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        return loc, instring[start:loc]\n\n\nclass White(Token):\n    \"\"\"Special matching class for matching whitespace.  Normally,\n    whitespace is ignored by pyparsing grammars.  This class is included\n    when some whitespace structures are significant.  Define with\n    a string containing the whitespace characters to be matched; default\n    is ``\" \\\\t\\\\r\\\\n\"``.  Also takes optional ``min``,\n    ``max``, and ``exact`` arguments, as defined for the\n    :class:`Word` class.\n    \"\"\"\n\n    whiteStrs = {\n        \" \": \"<SP>\",\n        \"\\t\": \"<TAB>\",\n        \"\\n\": \"<LF>\",\n        \"\\r\": \"<CR>\",\n        \"\\f\": \"<FF>\",\n        \"\\u00A0\": \"<NBSP>\",\n        \"\\u1680\": \"<OGHAM_SPACE_MARK>\",\n        \"\\u180E\": \"<MONGOLIAN_VOWEL_SEPARATOR>\",\n        \"\\u2000\": \"<EN_QUAD>\",\n        \"\\u2001\": \"<EM_QUAD>\",\n        \"\\u2002\": \"<EN_SPACE>\",\n        \"\\u2003\": \"<EM_SPACE>\",\n        \"\\u2004\": \"<THREE-PER-EM_SPACE>\",\n        \"\\u2005\": \"<FOUR-PER-EM_SPACE>\",\n        \"\\u2006\": \"<SIX-PER-EM_SPACE>\",\n        \"\\u2007\": \"<FIGURE_SPACE>\",\n        \"\\u2008\": \"<PUNCTUATION_SPACE>\",\n        \"\\u2009\": \"<THIN_SPACE>\",\n        \"\\u200A\": \"<HAIR_SPACE>\",\n        \"\\u200B\": \"<ZERO_WIDTH_SPACE>\",\n        \"\\u202F\": \"<NNBSP>\",\n        \"\\u205F\": \"<MMSP>\",\n        \"\\u3000\": \"<IDEOGRAPHIC_SPACE>\",\n    }\n\n    def __init__(self, ws: str = \" \\t\\r\\n\", min: int = 1, max: int = 0, exact: int = 0):\n        super().__init__()\n        self.matchWhite = ws\n        self.set_whitespace_chars(\n            \"\".join(c for c in self.whiteStrs if c not in self.matchWhite),\n            copy_defaults=True,\n        )\n        # self.leave_whitespace()\n        self.mayReturnEmpty = True\n        self.errmsg = \"Expected \" + self.name\n\n        self.minLen = min\n\n        if max > 0:\n            self.maxLen = max\n        else:\n            self.maxLen = _MAX_INT\n\n        if exact > 0:\n            self.maxLen = exact\n            self.minLen = exact\n\n    def _generateDefaultName(self) -> str:\n        return \"\".join(White.whiteStrs[c] for c in self.matchWhite)\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if instring[loc] not in self.matchWhite:\n            raise ParseException(instring, loc, self.errmsg, self)\n        start = loc\n        loc += 1\n        maxloc = start + self.maxLen\n        maxloc = min(maxloc, len(instring))\n        while loc < maxloc and instring[loc] in self.matchWhite:\n            loc += 1\n\n        if loc - start < self.minLen:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        return loc, instring[start:loc]\n\n\nclass PositionToken(Token):\n    def __init__(self):\n        super().__init__()\n        self.mayReturnEmpty = True\n        self.mayIndexError = False\n\n\nclass GoToColumn(PositionToken):\n    \"\"\"Token to advance to a specific column of input text; useful for\n    tabular report scraping.\n    \"\"\"\n\n    def __init__(self, colno: int):\n        super().__init__()\n        self.col = colno\n\n    def preParse(self, instring: str, loc: int) -> int:\n        if col(loc, instring) != self.col:\n            instrlen = len(instring)\n            if self.ignoreExprs:\n                loc = self._skipIgnorables(instring, loc)\n            while (\n                loc < instrlen\n                and instring[loc].isspace()\n                and col(loc, instring) != self.col\n            ):\n                loc += 1\n        return loc\n\n    def parseImpl(self, instring, loc, doActions=True):\n        thiscol = col(loc, instring)\n        if thiscol > self.col:\n            raise ParseException(instring, loc, \"Text not in expected column\", self)\n        newloc = loc + self.col - thiscol\n        ret = instring[loc:newloc]\n        return newloc, ret\n\n\nclass LineStart(PositionToken):\n    r\"\"\"Matches if current position is at the beginning of a line within\n    the parse string\n\n    Example::\n\n        test = '''\\\n        AAA this line\n        AAA and this line\n          AAA but not this one\n        B AAA and definitely not this one\n        '''\n\n        for t in (LineStart() + 'AAA' + rest_of_line).search_string(test):\n            print(t)\n\n    prints::\n\n        ['AAA', ' this line']\n        ['AAA', ' and this line']\n\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.leave_whitespace()\n        self.orig_whiteChars = set() | self.whiteChars\n        self.whiteChars.discard(\"\\n\")\n        self.skipper = Empty().set_whitespace_chars(self.whiteChars)\n        self.errmsg = \"Expected start of line\"\n\n    def preParse(self, instring: str, loc: int) -> int:\n        if loc == 0:\n            return loc\n        else:\n            ret = self.skipper.preParse(instring, loc)\n            if \"\\n\" in self.orig_whiteChars:\n                while instring[ret : ret + 1] == \"\\n\":\n                    ret = self.skipper.preParse(instring, ret + 1)\n            return ret\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if col(loc, instring) == 1:\n            return loc, []\n        raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass LineEnd(PositionToken):\n    \"\"\"Matches if current position is at the end of a line within the\n    parse string\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.whiteChars.discard(\"\\n\")\n        self.set_whitespace_chars(self.whiteChars, copy_defaults=False)\n        self.errmsg = \"Expected end of line\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if loc < len(instring):\n            if instring[loc] == \"\\n\":\n                return loc + 1, \"\\n\"\n            else:\n                raise ParseException(instring, loc, self.errmsg, self)\n        elif loc == len(instring):\n            return loc + 1, []\n        else:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass StringStart(PositionToken):\n    \"\"\"Matches if current position is at the beginning of the parse\n    string\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.errmsg = \"Expected start of text\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if loc != 0:\n            # see if entire string up to here is just whitespace and ignoreables\n            if loc != self.preParse(instring, 0):\n                raise ParseException(instring, loc, self.errmsg, self)\n        return loc, []\n\n\nclass StringEnd(PositionToken):\n    \"\"\"\n    Matches if current position is at the end of the parse string\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.errmsg = \"Expected end of text\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if loc < len(instring):\n            raise ParseException(instring, loc, self.errmsg, self)\n        elif loc == len(instring):\n            return loc + 1, []\n        elif loc > len(instring):\n            return loc, []\n        else:\n            raise ParseException(instring, loc, self.errmsg, self)\n\n\nclass WordStart(PositionToken):\n    \"\"\"Matches if the current position is at the beginning of a\n    :class:`Word`, and is not preceded by any character in a given\n    set of ``word_chars`` (default= ``printables``). To emulate the\n    ``\\b`` behavior of regular expressions, use\n    ``WordStart(alphanums)``. ``WordStart`` will also match at\n    the beginning of the string being parsed, or at the beginning of\n    a line.\n    \"\"\"\n\n    def __init__(self, word_chars: str = printables, *, wordChars: str = printables):\n        wordChars = word_chars if wordChars == printables else wordChars\n        super().__init__()\n        self.wordChars = set(wordChars)\n        self.errmsg = \"Not at the start of a word\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if loc != 0:\n            if (\n                instring[loc - 1] in self.wordChars\n                or instring[loc] not in self.wordChars\n            ):\n                raise ParseException(instring, loc, self.errmsg, self)\n        return loc, []\n\n\nclass WordEnd(PositionToken):\n    \"\"\"Matches if the current position is at the end of a :class:`Word`,\n    and is not followed by any character in a given set of ``word_chars``\n    (default= ``printables``). To emulate the ``\\b`` behavior of\n    regular expressions, use ``WordEnd(alphanums)``. ``WordEnd``\n    will also match at the end of the string being parsed, or at the end\n    of a line.\n    \"\"\"\n\n    def __init__(self, word_chars: str = printables, *, wordChars: str = printables):\n        wordChars = word_chars if wordChars == printables else wordChars\n        super().__init__()\n        self.wordChars = set(wordChars)\n        self.skipWhitespace = False\n        self.errmsg = \"Not at the end of a word\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        instrlen = len(instring)\n        if instrlen > 0 and loc < instrlen:\n            if (\n                instring[loc] in self.wordChars\n                or instring[loc - 1] not in self.wordChars\n            ):\n                raise ParseException(instring, loc, self.errmsg, self)\n        return loc, []\n\n\nclass ParseExpression(ParserElement):\n    \"\"\"Abstract subclass of ParserElement, for combining and\n    post-processing parsed tokens.\n    \"\"\"\n\n    def __init__(self, exprs: typing.Iterable[ParserElement], savelist: bool = False):\n        super().__init__(savelist)\n        self.exprs: List[ParserElement]\n        if isinstance(exprs, _generatorType):\n            exprs = list(exprs)\n\n        if isinstance(exprs, str_type):\n            self.exprs = [self._literalStringClass(exprs)]\n        elif isinstance(exprs, ParserElement):\n            self.exprs = [exprs]\n        elif isinstance(exprs, Iterable):\n            exprs = list(exprs)\n            # if sequence of strings provided, wrap with Literal\n            if any(isinstance(expr, str_type) for expr in exprs):\n                exprs = (\n                    self._literalStringClass(e) if isinstance(e, str_type) else e\n                    for e in exprs\n                )\n            self.exprs = list(exprs)\n        else:\n            try:\n                self.exprs = list(exprs)\n            except TypeError:\n                self.exprs = [exprs]\n        self.callPreparse = False\n\n    def recurse(self) -> List[ParserElement]:\n        return self.exprs[:]\n\n    def append(self, other) -> ParserElement:\n        self.exprs.append(other)\n        self._defaultName = None\n        return self\n\n    def leave_whitespace(self, recursive: bool = True) -> ParserElement:\n        \"\"\"\n        Extends ``leave_whitespace`` defined in base class, and also invokes ``leave_whitespace`` on\n           all contained expressions.\n        \"\"\"\n        super().leave_whitespace(recursive)\n\n        if recursive:\n            self.exprs = [e.copy() for e in self.exprs]\n            for e in self.exprs:\n                e.leave_whitespace(recursive)\n        return self\n\n    def ignore_whitespace(self, recursive: bool = True) -> ParserElement:\n        \"\"\"\n        Extends ``ignore_whitespace`` defined in base class, and also invokes ``leave_whitespace`` on\n           all contained expressions.\n        \"\"\"\n        super().ignore_whitespace(recursive)\n        if recursive:\n            self.exprs = [e.copy() for e in self.exprs]\n            for e in self.exprs:\n                e.ignore_whitespace(recursive)\n        return self\n\n    def ignore(self, other) -> ParserElement:\n        if isinstance(other, Suppress):\n            if other not in self.ignoreExprs:\n                super().ignore(other)\n                for e in self.exprs:\n                    e.ignore(self.ignoreExprs[-1])\n        else:\n            super().ignore(other)\n            for e in self.exprs:\n                e.ignore(self.ignoreExprs[-1])\n        return self\n\n    def _generateDefaultName(self) -> str:\n        return f\"{self.__class__.__name__}:({str(self.exprs)})\"\n\n    def streamline(self) -> ParserElement:\n        if self.streamlined:\n            return self\n\n        super().streamline()\n\n        for e in self.exprs:\n            e.streamline()\n\n        # collapse nested :class:`And`'s of the form ``And(And(And(a, b), c), d)`` to ``And(a, b, c, d)``\n        # but only if there are no parse actions or resultsNames on the nested And's\n        # (likewise for :class:`Or`'s and :class:`MatchFirst`'s)\n        if len(self.exprs) == 2:\n            other = self.exprs[0]\n            if (\n                isinstance(other, self.__class__)\n                and not other.parseAction\n                and other.resultsName is None\n                and not other.debug\n            ):\n                self.exprs = other.exprs[:] + [self.exprs[1]]\n                self._defaultName = None\n                self.mayReturnEmpty |= other.mayReturnEmpty\n                self.mayIndexError |= other.mayIndexError\n\n            other = self.exprs[-1]\n            if (\n                isinstance(other, self.__class__)\n                and not other.parseAction\n                and other.resultsName is None\n                and not other.debug\n            ):\n                self.exprs = self.exprs[:-1] + other.exprs[:]\n                self._defaultName = None\n                self.mayReturnEmpty |= other.mayReturnEmpty\n                self.mayIndexError |= other.mayIndexError\n\n        self.errmsg = \"Expected \" + str(self)\n\n        return self\n\n    def validate(self, validateTrace=None) -> None:\n        warnings.warn(\n            \"ParserElement.validate() is deprecated, and should not be used to check for left recursion\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        tmp = (validateTrace if validateTrace is not None else [])[:] + [self]\n        for e in self.exprs:\n            e.validate(tmp)\n        self._checkRecursion([])\n\n    def copy(self) -> ParserElement:\n        ret = super().copy()\n        ret = typing.cast(ParseExpression, ret)\n        ret.exprs = [e.copy() for e in self.exprs]\n        return ret\n\n    def _setResultsName(self, name, listAllMatches=False):\n        if (\n            __diag__.warn_ungrouped_named_tokens_in_collection\n            and Diagnostics.warn_ungrouped_named_tokens_in_collection\n            not in self.suppress_warnings_\n        ):\n            for e in self.exprs:\n                if (\n                    isinstance(e, ParserElement)\n                    and e.resultsName\n                    and Diagnostics.warn_ungrouped_named_tokens_in_collection\n                    not in e.suppress_warnings_\n                ):\n                    warnings.warn(\n                        \"{}: setting results name {!r} on {} expression \"\n                        \"collides with {!r} on contained expression\".format(\n                            \"warn_ungrouped_named_tokens_in_collection\",\n                            name,\n                            type(self).__name__,\n                            e.resultsName,\n                        ),\n                        stacklevel=3,\n                    )\n\n        return super()._setResultsName(name, listAllMatches)\n\n    # Compatibility synonyms\n    # fmt: off\n    @replaced_by_pep8(leave_whitespace)\n    def leaveWhitespace(self): ...\n\n    @replaced_by_pep8(ignore_whitespace)\n    def ignoreWhitespace(self): ...\n    # fmt: on\n\n\nclass And(ParseExpression):\n    \"\"\"\n    Requires all given :class:`ParseExpression` s to be found in the given order.\n    Expressions may be separated by whitespace.\n    May be constructed using the ``'+'`` operator.\n    May also be constructed using the ``'-'`` operator, which will\n    suppress backtracking.\n\n    Example::\n\n        integer = Word(nums)\n        name_expr = Word(alphas)[1, ...]\n\n        expr = And([integer(\"id\"), name_expr(\"name\"), integer(\"age\")])\n        # more easily written as:\n        expr = integer(\"id\") + name_expr(\"name\") + integer(\"age\")\n    \"\"\"\n\n    class _ErrorStop(Empty):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.leave_whitespace()\n\n        def _generateDefaultName(self) -> str:\n            return \"-\"\n\n    def __init__(\n        self, exprs_arg: typing.Iterable[ParserElement], savelist: bool = True\n    ):\n        exprs: List[ParserElement] = list(exprs_arg)\n        if exprs and Ellipsis in exprs:\n            tmp = []\n            for i, expr in enumerate(exprs):\n                if expr is Ellipsis:\n                    if i < len(exprs) - 1:\n                        skipto_arg: ParserElement = typing.cast(\n                            ParseExpression, (Empty() + exprs[i + 1])\n                        ).exprs[-1]\n                        tmp.append(SkipTo(skipto_arg)(\"_skipped*\"))\n                    else:\n                        raise Exception(\n                            \"cannot construct And with sequence ending in ...\"\n                        )\n                else:\n                    tmp.append(expr)\n            exprs[:] = tmp\n        super().__init__(exprs, savelist)\n        if self.exprs:\n            self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)\n            if not isinstance(self.exprs[0], White):\n                self.set_whitespace_chars(\n                    self.exprs[0].whiteChars,\n                    copy_defaults=self.exprs[0].copyDefaultWhiteChars,\n                )\n                self.skipWhitespace = self.exprs[0].skipWhitespace\n            else:\n                self.skipWhitespace = False\n        else:\n            self.mayReturnEmpty = True\n        self.callPreparse = True\n\n    def streamline(self) -> ParserElement:\n        # collapse any _PendingSkip's\n        if self.exprs:\n            if any(\n                isinstance(e, ParseExpression)\n                and e.exprs\n                and isinstance(e.exprs[-1], _PendingSkip)\n                for e in self.exprs[:-1]\n            ):\n                deleted_expr_marker = NoMatch()\n                for i, e in enumerate(self.exprs[:-1]):\n                    if e is deleted_expr_marker:\n                        continue\n                    if (\n                        isinstance(e, ParseExpression)\n                        and e.exprs\n                        and isinstance(e.exprs[-1], _PendingSkip)\n                    ):\n                        e.exprs[-1] = e.exprs[-1] + self.exprs[i + 1]\n                        self.exprs[i + 1] = deleted_expr_marker\n                self.exprs = [e for e in self.exprs if e is not deleted_expr_marker]\n\n        super().streamline()\n\n        # link any IndentedBlocks to the prior expression\n        prev: ParserElement\n        cur: ParserElement\n        for prev, cur in zip(self.exprs, self.exprs[1:]):\n            # traverse cur or any first embedded expr of cur looking for an IndentedBlock\n            # (but watch out for recursive grammar)\n            seen = set()\n            while True:\n                if id(cur) in seen:\n                    break\n                seen.add(id(cur))\n                if isinstance(cur, IndentedBlock):\n                    prev.add_parse_action(\n                        lambda s, l, t, cur_=cur: setattr(\n                            cur_, \"parent_anchor\", col(l, s)\n                        )\n                    )\n                    break\n                subs = cur.recurse()\n                next_first = next(iter(subs), None)\n                if next_first is None:\n                    break\n                cur = typing.cast(ParserElement, next_first)\n\n        self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)\n        return self\n\n    def parseImpl(self, instring, loc, doActions=True):\n        # pass False as callPreParse arg to _parse for first element, since we already\n        # pre-parsed the string as part of our And pre-parsing\n        loc, resultlist = self.exprs[0]._parse(\n            instring, loc, doActions, callPreParse=False\n        )\n        errorStop = False\n        for e in self.exprs[1:]:\n            # if isinstance(e, And._ErrorStop):\n            if type(e) is And._ErrorStop:\n                errorStop = True\n                continue\n            if errorStop:\n                try:\n                    loc, exprtokens = e._parse(instring, loc, doActions)\n                except ParseSyntaxException:\n                    raise\n                except ParseBaseException as pe:\n                    pe.__traceback__ = None\n                    raise ParseSyntaxException._from_exception(pe)\n                except IndexError:\n                    raise ParseSyntaxException(\n                        instring, len(instring), self.errmsg, self\n                    )\n            else:\n                loc, exprtokens = e._parse(instring, loc, doActions)\n            resultlist += exprtokens\n        return loc, resultlist\n\n    def __iadd__(self, other):\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return self.append(other)  # And([self, other])\n\n    def _checkRecursion(self, parseElementList):\n        subRecCheckList = parseElementList[:] + [self]\n        for e in self.exprs:\n            e._checkRecursion(subRecCheckList)\n            if not e.mayReturnEmpty:\n                break\n\n    def _generateDefaultName(self) -> str:\n        inner = \" \".join(str(e) for e in self.exprs)\n        # strip off redundant inner {}'s\n        while len(inner) > 1 and inner[0 :: len(inner) - 1] == \"{}\":\n            inner = inner[1:-1]\n        return \"{\" + inner + \"}\"\n\n\nclass Or(ParseExpression):\n    \"\"\"Requires that at least one :class:`ParseExpression` is found. If\n    two expressions match, the expression that matches the longest\n    string will be used. May be constructed using the ``'^'``\n    operator.\n\n    Example::\n\n        # construct Or using '^' operator\n\n        number = Word(nums) ^ Combine(Word(nums) + '.' + Word(nums))\n        print(number.search_string(\"123 3.1416 789\"))\n\n    prints::\n\n        [['123'], ['3.1416'], ['789']]\n    \"\"\"\n\n    def __init__(self, exprs: typing.Iterable[ParserElement], savelist: bool = False):\n        super().__init__(exprs, savelist)\n        if self.exprs:\n            self.mayReturnEmpty = any(e.mayReturnEmpty for e in self.exprs)\n            self.skipWhitespace = all(e.skipWhitespace for e in self.exprs)\n        else:\n            self.mayReturnEmpty = True\n\n    def streamline(self) -> ParserElement:\n        super().streamline()\n        if self.exprs:\n            self.mayReturnEmpty = any(e.mayReturnEmpty for e in self.exprs)\n            self.saveAsList = any(e.saveAsList for e in self.exprs)\n            self.skipWhitespace = all(\n                e.skipWhitespace and not isinstance(e, White) for e in self.exprs\n            )\n        else:\n            self.saveAsList = False\n        return self\n\n    def parseImpl(self, instring, loc, doActions=True):\n        maxExcLoc = -1\n        maxException = None\n        matches = []\n        fatals = []\n        if all(e.callPreparse for e in self.exprs):\n            loc = self.preParse(instring, loc)\n        for e in self.exprs:\n            try:\n                loc2 = e.try_parse(instring, loc, raise_fatal=True)\n            except ParseFatalException as pfe:\n                pfe.__traceback__ = None\n                pfe.parser_element = e\n                fatals.append(pfe)\n                maxException = None\n                maxExcLoc = -1\n            except ParseException as err:\n                if not fatals:\n                    err.__traceback__ = None\n                    if err.loc > maxExcLoc:\n                        maxException = err\n                        maxExcLoc = err.loc\n            except IndexError:\n                if len(instring) > maxExcLoc:\n                    maxException = ParseException(\n                        instring, len(instring), e.errmsg, self\n                    )\n                    maxExcLoc = len(instring)\n            else:\n                # save match among all matches, to retry longest to shortest\n                matches.append((loc2, e))\n\n        if matches:\n            # re-evaluate all matches in descending order of length of match, in case attached actions\n            # might change whether or how much they match of the input.\n            matches.sort(key=itemgetter(0), reverse=True)\n\n            if not doActions:\n                # no further conditions or parse actions to change the selection of\n                # alternative, so the first match will be the best match\n                best_expr = matches[0][1]\n                return best_expr._parse(instring, loc, doActions)\n\n            longest = -1, None\n            for loc1, expr1 in matches:\n                if loc1 <= longest[0]:\n                    # already have a longer match than this one will deliver, we are done\n                    return longest\n\n                try:\n                    loc2, toks = expr1._parse(instring, loc, doActions)\n                except ParseException as err:\n                    err.__traceback__ = None\n                    if err.loc > maxExcLoc:\n                        maxException = err\n                        maxExcLoc = err.loc\n                else:\n                    if loc2 >= loc1:\n                        return loc2, toks\n                    # didn't match as much as before\n                    elif loc2 > longest[0]:\n                        longest = loc2, toks\n\n            if longest != (-1, None):\n                return longest\n\n        if fatals:\n            if len(fatals) > 1:\n                fatals.sort(key=lambda e: -e.loc)\n                if fatals[0].loc == fatals[1].loc:\n                    fatals.sort(key=lambda e: (-e.loc, -len(str(e.parser_element))))\n            max_fatal = fatals[0]\n            raise max_fatal\n\n        if maxException is not None:\n            # infer from this check that all alternatives failed at the current position\n            # so emit this collective error message instead of any single error message\n            if maxExcLoc == loc:\n                maxException.msg = self.errmsg\n            raise maxException\n        else:\n            raise ParseException(\n                instring, loc, \"no defined alternatives to match\", self\n            )\n\n    def __ixor__(self, other):\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return self.append(other)  # Or([self, other])\n\n    def _generateDefaultName(self) -> str:\n        return \"{\" + \" ^ \".join(str(e) for e in self.exprs) + \"}\"\n\n    def _setResultsName(self, name, listAllMatches=False):\n        if (\n            __diag__.warn_multiple_tokens_in_named_alternation\n            and Diagnostics.warn_multiple_tokens_in_named_alternation\n            not in self.suppress_warnings_\n        ):\n            if any(\n                isinstance(e, And)\n                and Diagnostics.warn_multiple_tokens_in_named_alternation\n                not in e.suppress_warnings_\n                for e in self.exprs\n            ):\n                warnings.warn(\n                    \"{}: setting results name {!r} on {} expression \"\n                    \"will return a list of all parsed tokens in an And alternative, \"\n                    \"in prior versions only the first token was returned; enclose \"\n                    \"contained argument in Group\".format(\n                        \"warn_multiple_tokens_in_named_alternation\",\n                        name,\n                        type(self).__name__,\n                    ),\n                    stacklevel=3,\n                )\n\n        return super()._setResultsName(name, listAllMatches)\n\n\nclass MatchFirst(ParseExpression):\n    \"\"\"Requires that at least one :class:`ParseExpression` is found. If\n    more than one expression matches, the first one listed is the one that will\n    match. May be constructed using the ``'|'`` operator.\n\n    Example::\n\n        # construct MatchFirst using '|' operator\n\n        # watch the order of expressions to match\n        number = Word(nums) | Combine(Word(nums) + '.' + Word(nums))\n        print(number.search_string(\"123 3.1416 789\")) #  Fail! -> [['123'], ['3'], ['1416'], ['789']]\n\n        # put more selective expression first\n        number = Combine(Word(nums) + '.' + Word(nums)) | Word(nums)\n        print(number.search_string(\"123 3.1416 789\")) #  Better -> [['123'], ['3.1416'], ['789']]\n    \"\"\"\n\n    def __init__(self, exprs: typing.Iterable[ParserElement], savelist: bool = False):\n        super().__init__(exprs, savelist)\n        if self.exprs:\n            self.mayReturnEmpty = any(e.mayReturnEmpty for e in self.exprs)\n            self.skipWhitespace = all(e.skipWhitespace for e in self.exprs)\n        else:\n            self.mayReturnEmpty = True\n\n    def streamline(self) -> ParserElement:\n        if self.streamlined:\n            return self\n\n        super().streamline()\n        if self.exprs:\n            self.saveAsList = any(e.saveAsList for e in self.exprs)\n            self.mayReturnEmpty = any(e.mayReturnEmpty for e in self.exprs)\n            self.skipWhitespace = all(\n                e.skipWhitespace and not isinstance(e, White) for e in self.exprs\n            )\n        else:\n            self.saveAsList = False\n            self.mayReturnEmpty = True\n        return self\n\n    def parseImpl(self, instring, loc, doActions=True):\n        maxExcLoc = -1\n        maxException = None\n\n        for e in self.exprs:\n            try:\n                return e._parse(\n                    instring,\n                    loc,\n                    doActions,\n                )\n            except ParseFatalException as pfe:\n                pfe.__traceback__ = None\n                pfe.parser_element = e\n                raise\n            except ParseException as err:\n                if err.loc > maxExcLoc:\n                    maxException = err\n                    maxExcLoc = err.loc\n            except IndexError:\n                if len(instring) > maxExcLoc:\n                    maxException = ParseException(\n                        instring, len(instring), e.errmsg, self\n                    )\n                    maxExcLoc = len(instring)\n\n        if maxException is not None:\n            # infer from this check that all alternatives failed at the current position\n            # so emit this collective error message instead of any individual error message\n            if maxExcLoc == loc:\n                maxException.msg = self.errmsg\n            raise maxException\n        else:\n            raise ParseException(\n                instring, loc, \"no defined alternatives to match\", self\n            )\n\n    def __ior__(self, other):\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return self.append(other)  # MatchFirst([self, other])\n\n    def _generateDefaultName(self) -> str:\n        return \"{\" + \" | \".join(str(e) for e in self.exprs) + \"}\"\n\n    def _setResultsName(self, name, listAllMatches=False):\n        if (\n            __diag__.warn_multiple_tokens_in_named_alternation\n            and Diagnostics.warn_multiple_tokens_in_named_alternation\n            not in self.suppress_warnings_\n        ):\n            if any(\n                isinstance(e, And)\n                and Diagnostics.warn_multiple_tokens_in_named_alternation\n                not in e.suppress_warnings_\n                for e in self.exprs\n            ):\n                warnings.warn(\n                    \"{}: setting results name {!r} on {} expression \"\n                    \"will return a list of all parsed tokens in an And alternative, \"\n                    \"in prior versions only the first token was returned; enclose \"\n                    \"contained argument in Group\".format(\n                        \"warn_multiple_tokens_in_named_alternation\",\n                        name,\n                        type(self).__name__,\n                    ),\n                    stacklevel=3,\n                )\n\n        return super()._setResultsName(name, listAllMatches)\n\n\nclass Each(ParseExpression):\n    \"\"\"Requires all given :class:`ParseExpression` s to be found, but in\n    any order. Expressions may be separated by whitespace.\n\n    May be constructed using the ``'&'`` operator.\n\n    Example::\n\n        color = one_of(\"RED ORANGE YELLOW GREEN BLUE PURPLE BLACK WHITE BROWN\")\n        shape_type = one_of(\"SQUARE CIRCLE TRIANGLE STAR HEXAGON OCTAGON\")\n        integer = Word(nums)\n        shape_attr = \"shape:\" + shape_type(\"shape\")\n        posn_attr = \"posn:\" + Group(integer(\"x\") + ',' + integer(\"y\"))(\"posn\")\n        color_attr = \"color:\" + color(\"color\")\n        size_attr = \"size:\" + integer(\"size\")\n\n        # use Each (using operator '&') to accept attributes in any order\n        # (shape and posn are required, color and size are optional)\n        shape_spec = shape_attr & posn_attr & Opt(color_attr) & Opt(size_attr)\n\n        shape_spec.run_tests('''\n            shape: SQUARE color: BLACK posn: 100, 120\n            shape: CIRCLE size: 50 color: BLUE posn: 50,80\n            color:GREEN size:20 shape:TRIANGLE posn:20,40\n            '''\n            )\n\n    prints::\n\n        shape: SQUARE color: BLACK posn: 100, 120\n        ['shape:', 'SQUARE', 'color:', 'BLACK', 'posn:', ['100', ',', '120']]\n        - color: BLACK\n        - posn: ['100', ',', '120']\n          - x: 100\n          - y: 120\n        - shape: SQUARE\n\n\n        shape: CIRCLE size: 50 color: BLUE posn: 50,80\n        ['shape:', 'CIRCLE', 'size:', '50', 'color:', 'BLUE', 'posn:', ['50', ',', '80']]\n        - color: BLUE\n        - posn: ['50', ',', '80']\n          - x: 50\n          - y: 80\n        - shape: CIRCLE\n        - size: 50\n\n\n        color: GREEN size: 20 shape: TRIANGLE posn: 20,40\n        ['color:', 'GREEN', 'size:', '20', 'shape:', 'TRIANGLE', 'posn:', ['20', ',', '40']]\n        - color: GREEN\n        - posn: ['20', ',', '40']\n          - x: 20\n          - y: 40\n        - shape: TRIANGLE\n        - size: 20\n    \"\"\"\n\n    def __init__(self, exprs: typing.Iterable[ParserElement], savelist: bool = True):\n        super().__init__(exprs, savelist)\n        if self.exprs:\n            self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)\n        else:\n            self.mayReturnEmpty = True\n        self.skipWhitespace = True\n        self.initExprGroups = True\n        self.saveAsList = True\n\n    def __iand__(self, other):\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n        return self.append(other)  # Each([self, other])\n\n    def streamline(self) -> ParserElement:\n        super().streamline()\n        if self.exprs:\n            self.mayReturnEmpty = all(e.mayReturnEmpty for e in self.exprs)\n        else:\n            self.mayReturnEmpty = True\n        return self\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if self.initExprGroups:\n            self.opt1map = dict(\n                (id(e.expr), e) for e in self.exprs if isinstance(e, Opt)\n            )\n            opt1 = [e.expr for e in self.exprs if isinstance(e, Opt)]\n            opt2 = [\n                e\n                for e in self.exprs\n                if e.mayReturnEmpty and not isinstance(e, (Opt, Regex, ZeroOrMore))\n            ]\n            self.optionals = opt1 + opt2\n            self.multioptionals = [\n                e.expr.set_results_name(e.resultsName, list_all_matches=True)\n                for e in self.exprs\n                if isinstance(e, _MultipleMatch)\n            ]\n            self.multirequired = [\n                e.expr.set_results_name(e.resultsName, list_all_matches=True)\n                for e in self.exprs\n                if isinstance(e, OneOrMore)\n            ]\n            self.required = [\n                e for e in self.exprs if not isinstance(e, (Opt, ZeroOrMore, OneOrMore))\n            ]\n            self.required += self.multirequired\n            self.initExprGroups = False\n\n        tmpLoc = loc\n        tmpReqd = self.required[:]\n        tmpOpt = self.optionals[:]\n        multis = self.multioptionals[:]\n        matchOrder = []\n\n        keepMatching = True\n        failed = []\n        fatals = []\n        while keepMatching:\n            tmpExprs = tmpReqd + tmpOpt + multis\n            failed.clear()\n            fatals.clear()\n            for e in tmpExprs:\n                try:\n                    tmpLoc = e.try_parse(instring, tmpLoc, raise_fatal=True)\n                except ParseFatalException as pfe:\n                    pfe.__traceback__ = None\n                    pfe.parser_element = e\n                    fatals.append(pfe)\n                    failed.append(e)\n                except ParseException:\n                    failed.append(e)\n                else:\n                    matchOrder.append(self.opt1map.get(id(e), e))\n                    if e in tmpReqd:\n                        tmpReqd.remove(e)\n                    elif e in tmpOpt:\n                        tmpOpt.remove(e)\n            if len(failed) == len(tmpExprs):\n                keepMatching = False\n\n        # look for any ParseFatalExceptions\n        if fatals:\n            if len(fatals) > 1:\n                fatals.sort(key=lambda e: -e.loc)\n                if fatals[0].loc == fatals[1].loc:\n                    fatals.sort(key=lambda e: (-e.loc, -len(str(e.parser_element))))\n            max_fatal = fatals[0]\n            raise max_fatal\n\n        if tmpReqd:\n            missing = \", \".join([str(e) for e in tmpReqd])\n            raise ParseException(\n                instring,\n                loc,\n                f\"Missing one or more required elements ({missing})\",\n            )\n\n        # add any unmatched Opts, in case they have default values defined\n        matchOrder += [e for e in self.exprs if isinstance(e, Opt) and e.expr in tmpOpt]\n\n        total_results = ParseResults([])\n        for e in matchOrder:\n            loc, results = e._parse(instring, loc, doActions)\n            total_results += results\n\n        return loc, total_results\n\n    def _generateDefaultName(self) -> str:\n        return \"{\" + \" & \".join(str(e) for e in self.exprs) + \"}\"\n\n\nclass ParseElementEnhance(ParserElement):\n    \"\"\"Abstract subclass of :class:`ParserElement`, for combining and\n    post-processing parsed tokens.\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str], savelist: bool = False):\n        super().__init__(savelist)\n        if isinstance(expr, str_type):\n            expr_str = typing.cast(str, expr)\n            if issubclass(self._literalStringClass, Token):\n                expr = self._literalStringClass(expr_str)  # type: ignore[call-arg]\n            elif issubclass(type(self), self._literalStringClass):\n                expr = Literal(expr_str)\n            else:\n                expr = self._literalStringClass(Literal(expr_str))  # type: ignore[assignment, call-arg]\n        expr = typing.cast(ParserElement, expr)\n        self.expr = expr\n        if expr is not None:\n            self.mayIndexError = expr.mayIndexError\n            self.mayReturnEmpty = expr.mayReturnEmpty\n            self.set_whitespace_chars(\n                expr.whiteChars, copy_defaults=expr.copyDefaultWhiteChars\n            )\n            self.skipWhitespace = expr.skipWhitespace\n            self.saveAsList = expr.saveAsList\n            self.callPreparse = expr.callPreparse\n            self.ignoreExprs.extend(expr.ignoreExprs)\n\n    def recurse(self) -> List[ParserElement]:\n        return [self.expr] if self.expr is not None else []\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if self.expr is not None:\n            try:\n                return self.expr._parse(instring, loc, doActions, callPreParse=False)\n            except ParseBaseException as pbe:\n                pbe.msg = self.errmsg\n                raise\n        else:\n            raise ParseException(instring, loc, \"No expression defined\", self)\n\n    def leave_whitespace(self, recursive: bool = True) -> ParserElement:\n        super().leave_whitespace(recursive)\n\n        if recursive:\n            if self.expr is not None:\n                self.expr = self.expr.copy()\n                self.expr.leave_whitespace(recursive)\n        return self\n\n    def ignore_whitespace(self, recursive: bool = True) -> ParserElement:\n        super().ignore_whitespace(recursive)\n\n        if recursive:\n            if self.expr is not None:\n                self.expr = self.expr.copy()\n                self.expr.ignore_whitespace(recursive)\n        return self\n\n    def ignore(self, other) -> ParserElement:\n        if isinstance(other, Suppress):\n            if other not in self.ignoreExprs:\n                super().ignore(other)\n                if self.expr is not None:\n                    self.expr.ignore(self.ignoreExprs[-1])\n        else:\n            super().ignore(other)\n            if self.expr is not None:\n                self.expr.ignore(self.ignoreExprs[-1])\n        return self\n\n    def streamline(self) -> ParserElement:\n        super().streamline()\n        if self.expr is not None:\n            self.expr.streamline()\n        return self\n\n    def _checkRecursion(self, parseElementList):\n        if self in parseElementList:\n            raise RecursiveGrammarException(parseElementList + [self])\n        subRecCheckList = parseElementList[:] + [self]\n        if self.expr is not None:\n            self.expr._checkRecursion(subRecCheckList)\n\n    def validate(self, validateTrace=None) -> None:\n        warnings.warn(\n            \"ParserElement.validate() is deprecated, and should not be used to check for left recursion\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        if validateTrace is None:\n            validateTrace = []\n        tmp = validateTrace[:] + [self]\n        if self.expr is not None:\n            self.expr.validate(tmp)\n        self._checkRecursion([])\n\n    def _generateDefaultName(self) -> str:\n        return f\"{self.__class__.__name__}:({str(self.expr)})\"\n\n    # Compatibility synonyms\n    # fmt: off\n    @replaced_by_pep8(leave_whitespace)\n    def leaveWhitespace(self): ...\n\n    @replaced_by_pep8(ignore_whitespace)\n    def ignoreWhitespace(self): ...\n    # fmt: on\n\n\nclass IndentedBlock(ParseElementEnhance):\n    \"\"\"\n    Expression to match one or more expressions at a given indentation level.\n    Useful for parsing text where structure is implied by indentation (like Python source code).\n    \"\"\"\n\n    class _Indent(Empty):\n        def __init__(self, ref_col: int):\n            super().__init__()\n            self.errmsg = f\"expected indent at column {ref_col}\"\n            self.add_condition(lambda s, l, t: col(l, s) == ref_col)\n\n    class _IndentGreater(Empty):\n        def __init__(self, ref_col: int):\n            super().__init__()\n            self.errmsg = f\"expected indent at column greater than {ref_col}\"\n            self.add_condition(lambda s, l, t: col(l, s) > ref_col)\n\n    def __init__(\n        self, expr: ParserElement, *, recursive: bool = False, grouped: bool = True\n    ):\n        super().__init__(expr, savelist=True)\n        # if recursive:\n        #     raise NotImplementedError(\"IndentedBlock with recursive is not implemented\")\n        self._recursive = recursive\n        self._grouped = grouped\n        self.parent_anchor = 1\n\n    def parseImpl(self, instring, loc, doActions=True):\n        # advance parse position to non-whitespace by using an Empty()\n        # this should be the column to be used for all subsequent indented lines\n        anchor_loc = Empty().preParse(instring, loc)\n\n        # see if self.expr matches at the current location - if not it will raise an exception\n        # and no further work is necessary\n        self.expr.try_parse(instring, anchor_loc, do_actions=doActions)\n\n        indent_col = col(anchor_loc, instring)\n        peer_detect_expr = self._Indent(indent_col)\n\n        inner_expr = Empty() + peer_detect_expr + self.expr\n        if self._recursive:\n            sub_indent = self._IndentGreater(indent_col)\n            nested_block = IndentedBlock(\n                self.expr, recursive=self._recursive, grouped=self._grouped\n            )\n            nested_block.set_debug(self.debug)\n            nested_block.parent_anchor = indent_col\n            inner_expr += Opt(sub_indent + nested_block)\n\n        inner_expr.set_name(f\"inner {hex(id(inner_expr))[-4:].upper()}@{indent_col}\")\n        block = OneOrMore(inner_expr)\n\n        trailing_undent = self._Indent(self.parent_anchor) | StringEnd()\n\n        if self._grouped:\n            wrapper = Group\n        else:\n            wrapper = lambda expr: expr\n        return (wrapper(block) + Optional(trailing_undent)).parseImpl(\n            instring, anchor_loc, doActions\n        )\n\n\nclass AtStringStart(ParseElementEnhance):\n    \"\"\"Matches if expression matches at the beginning of the parse\n    string::\n\n        AtStringStart(Word(nums)).parse_string(\"123\")\n        # prints [\"123\"]\n\n        AtStringStart(Word(nums)).parse_string(\"    123\")\n        # raises ParseException\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str]):\n        super().__init__(expr)\n        self.callPreparse = False\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if loc != 0:\n            raise ParseException(instring, loc, \"not found at string start\")\n        return super().parseImpl(instring, loc, doActions)\n\n\nclass AtLineStart(ParseElementEnhance):\n    r\"\"\"Matches if an expression matches at the beginning of a line within\n    the parse string\n\n    Example::\n\n        test = '''\\\n        AAA this line\n        AAA and this line\n          AAA but not this one\n        B AAA and definitely not this one\n        '''\n\n        for t in (AtLineStart('AAA') + rest_of_line).search_string(test):\n            print(t)\n\n    prints::\n\n        ['AAA', ' this line']\n        ['AAA', ' and this line']\n\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str]):\n        super().__init__(expr)\n        self.callPreparse = False\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if col(loc, instring) != 1:\n            raise ParseException(instring, loc, \"not found at line start\")\n        return super().parseImpl(instring, loc, doActions)\n\n\nclass FollowedBy(ParseElementEnhance):\n    \"\"\"Lookahead matching of the given parse expression.\n    ``FollowedBy`` does *not* advance the parsing position within\n    the input string, it only verifies that the specified parse\n    expression matches at the current position.  ``FollowedBy``\n    always returns a null token list. If any results names are defined\n    in the lookahead expression, those *will* be returned for access by\n    name.\n\n    Example::\n\n        # use FollowedBy to match a label only if it is followed by a ':'\n        data_word = Word(alphas)\n        label = data_word + FollowedBy(':')\n        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stop_on=label).set_parse_action(' '.join))\n\n        attr_expr[1, ...].parse_string(\"shape: SQUARE color: BLACK posn: upper left\").pprint()\n\n    prints::\n\n        [['shape', 'SQUARE'], ['color', 'BLACK'], ['posn', 'upper left']]\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str]):\n        super().__init__(expr)\n        self.mayReturnEmpty = True\n\n    def parseImpl(self, instring, loc, doActions=True):\n        # by using self._expr.parse and deleting the contents of the returned ParseResults list\n        # we keep any named results that were defined in the FollowedBy expression\n        _, ret = self.expr._parse(instring, loc, doActions=doActions)\n        del ret[:]\n\n        return loc, ret\n\n\nclass PrecededBy(ParseElementEnhance):\n    \"\"\"Lookbehind matching of the given parse expression.\n    ``PrecededBy`` does not advance the parsing position within the\n    input string, it only verifies that the specified parse expression\n    matches prior to the current position.  ``PrecededBy`` always\n    returns a null token list, but if a results name is defined on the\n    given expression, it is returned.\n\n    Parameters:\n\n    - ``expr`` - expression that must match prior to the current parse\n      location\n    - ``retreat`` - (default= ``None``) - (int) maximum number of characters\n      to lookbehind prior to the current parse location\n\n    If the lookbehind expression is a string, :class:`Literal`,\n    :class:`Keyword`, or a :class:`Word` or :class:`CharsNotIn`\n    with a specified exact or maximum length, then the retreat\n    parameter is not required. Otherwise, retreat must be specified to\n    give a maximum number of characters to look back from\n    the current parse position for a lookbehind match.\n\n    Example::\n\n        # VB-style variable names with type prefixes\n        int_var = PrecededBy(\"#\") + pyparsing_common.identifier\n        str_var = PrecededBy(\"$\") + pyparsing_common.identifier\n\n    \"\"\"\n\n    def __init__(\n        self, expr: Union[ParserElement, str], retreat: typing.Optional[int] = None\n    ):\n        super().__init__(expr)\n        self.expr = self.expr().leave_whitespace()\n        self.mayReturnEmpty = True\n        self.mayIndexError = False\n        self.exact = False\n        if isinstance(expr, str_type):\n            expr = typing.cast(str, expr)\n            retreat = len(expr)\n            self.exact = True\n        elif isinstance(expr, (Literal, Keyword)):\n            retreat = expr.matchLen\n            self.exact = True\n        elif isinstance(expr, (Word, CharsNotIn)) and expr.maxLen != _MAX_INT:\n            retreat = expr.maxLen\n            self.exact = True\n        elif isinstance(expr, PositionToken):\n            retreat = 0\n            self.exact = True\n        self.retreat = retreat\n        self.errmsg = \"not preceded by \" + str(expr)\n        self.skipWhitespace = False\n        self.parseAction.append(lambda s, l, t: t.__delitem__(slice(None, None)))\n\n    def parseImpl(self, instring, loc=0, doActions=True):\n        if self.exact:\n            if loc < self.retreat:\n                raise ParseException(instring, loc, self.errmsg)\n            start = loc - self.retreat\n            _, ret = self.expr._parse(instring, start)\n        else:\n            # retreat specified a maximum lookbehind window, iterate\n            test_expr = self.expr + StringEnd()\n            instring_slice = instring[max(0, loc - self.retreat) : loc]\n            last_expr = ParseException(instring, loc, self.errmsg)\n            for offset in range(1, min(loc, self.retreat + 1) + 1):\n                try:\n                    # print('trying', offset, instring_slice, repr(instring_slice[loc - offset:]))\n                    _, ret = test_expr._parse(\n                        instring_slice, len(instring_slice) - offset\n                    )\n                except ParseBaseException as pbe:\n                    last_expr = pbe\n                else:\n                    break\n            else:\n                raise last_expr\n        return loc, ret\n\n\nclass Located(ParseElementEnhance):\n    \"\"\"\n    Decorates a returned token with its starting and ending\n    locations in the input string.\n\n    This helper adds the following results names:\n\n    - ``locn_start`` - location where matched expression begins\n    - ``locn_end`` - location where matched expression ends\n    - ``value`` - the actual parsed results\n\n    Be careful if the input text contains ``<TAB>`` characters, you\n    may want to call :class:`ParserElement.parse_with_tabs`\n\n    Example::\n\n        wd = Word(alphas)\n        for match in Located(wd).search_string(\"ljsdf123lksdjjf123lkkjj1222\"):\n            print(match)\n\n    prints::\n\n        [0, ['ljsdf'], 5]\n        [8, ['lksdjjf'], 15]\n        [18, ['lkkjj'], 23]\n\n    \"\"\"\n\n    def parseImpl(self, instring, loc, doActions=True):\n        start = loc\n        loc, tokens = self.expr._parse(instring, start, doActions, callPreParse=False)\n        ret_tokens = ParseResults([start, tokens, loc])\n        ret_tokens[\"locn_start\"] = start\n        ret_tokens[\"value\"] = tokens\n        ret_tokens[\"locn_end\"] = loc\n        if self.resultsName:\n            # must return as a list, so that the name will be attached to the complete group\n            return loc, [ret_tokens]\n        else:\n            return loc, ret_tokens\n\n\nclass NotAny(ParseElementEnhance):\n    \"\"\"\n    Lookahead to disallow matching with the given parse expression.\n    ``NotAny`` does *not* advance the parsing position within the\n    input string, it only verifies that the specified parse expression\n    does *not* match at the current position.  Also, ``NotAny`` does\n    *not* skip over leading whitespace. ``NotAny`` always returns\n    a null token list.  May be constructed using the ``'~'`` operator.\n\n    Example::\n\n        AND, OR, NOT = map(CaselessKeyword, \"AND OR NOT\".split())\n\n        # take care not to mistake keywords for identifiers\n        ident = ~(AND | OR | NOT) + Word(alphas)\n        boolean_term = Opt(NOT) + ident\n\n        # very crude boolean expression - to support parenthesis groups and\n        # operation hierarchy, use infix_notation\n        boolean_expr = boolean_term + ((AND | OR) + boolean_term)[...]\n\n        # integers that are followed by \".\" are actually floats\n        integer = Word(nums) + ~Char(\".\")\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str]):\n        super().__init__(expr)\n        # do NOT use self.leave_whitespace(), don't want to propagate to exprs\n        # self.leave_whitespace()\n        self.skipWhitespace = False\n\n        self.mayReturnEmpty = True\n        self.errmsg = \"Found unwanted token, \" + str(self.expr)\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if self.expr.can_parse_next(instring, loc, do_actions=doActions):\n            raise ParseException(instring, loc, self.errmsg, self)\n        return loc, []\n\n    def _generateDefaultName(self) -> str:\n        return \"~{\" + str(self.expr) + \"}\"\n\n\nclass _MultipleMatch(ParseElementEnhance):\n    def __init__(\n        self,\n        expr: Union[str, ParserElement],\n        stop_on: typing.Optional[Union[ParserElement, str]] = None,\n        *,\n        stopOn: typing.Optional[Union[ParserElement, str]] = None,\n    ):\n        super().__init__(expr)\n        stopOn = stopOn or stop_on\n        self.saveAsList = True\n        ender = stopOn\n        if isinstance(ender, str_type):\n            ender = self._literalStringClass(ender)\n        self.stopOn(ender)\n\n    def stopOn(self, ender) -> ParserElement:\n        if isinstance(ender, str_type):\n            ender = self._literalStringClass(ender)\n        self.not_ender = ~ender if ender is not None else None\n        return self\n\n    def parseImpl(self, instring, loc, doActions=True):\n        self_expr_parse = self.expr._parse\n        self_skip_ignorables = self._skipIgnorables\n        check_ender = self.not_ender is not None\n        if check_ender:\n            try_not_ender = self.not_ender.try_parse\n\n        # must be at least one (but first see if we are the stopOn sentinel;\n        # if so, fail)\n        if check_ender:\n            try_not_ender(instring, loc)\n        loc, tokens = self_expr_parse(instring, loc, doActions)\n        try:\n            hasIgnoreExprs = not not self.ignoreExprs\n            while 1:\n                if check_ender:\n                    try_not_ender(instring, loc)\n                if hasIgnoreExprs:\n                    preloc = self_skip_ignorables(instring, loc)\n                else:\n                    preloc = loc\n                loc, tmptokens = self_expr_parse(instring, preloc, doActions)\n                tokens += tmptokens\n        except (ParseException, IndexError):\n            pass\n\n        return loc, tokens\n\n    def _setResultsName(self, name, listAllMatches=False):\n        if (\n            __diag__.warn_ungrouped_named_tokens_in_collection\n            and Diagnostics.warn_ungrouped_named_tokens_in_collection\n            not in self.suppress_warnings_\n        ):\n            for e in [self.expr] + self.expr.recurse():\n                if (\n                    isinstance(e, ParserElement)\n                    and e.resultsName\n                    and Diagnostics.warn_ungrouped_named_tokens_in_collection\n                    not in e.suppress_warnings_\n                ):\n                    warnings.warn(\n                        \"{}: setting results name {!r} on {} expression \"\n                        \"collides with {!r} on contained expression\".format(\n                            \"warn_ungrouped_named_tokens_in_collection\",\n                            name,\n                            type(self).__name__,\n                            e.resultsName,\n                        ),\n                        stacklevel=3,\n                    )\n\n        return super()._setResultsName(name, listAllMatches)\n\n\nclass OneOrMore(_MultipleMatch):\n    \"\"\"\n    Repetition of one or more of the given expression.\n\n    Parameters:\n\n    - ``expr`` - expression that must match one or more times\n    - ``stop_on`` - (default= ``None``) - expression for a terminating sentinel\n      (only required if the sentinel would ordinarily match the repetition\n      expression)\n\n    Example::\n\n        data_word = Word(alphas)\n        label = data_word + FollowedBy(':')\n        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word).set_parse_action(' '.join))\n\n        text = \"shape: SQUARE posn: upper left color: BLACK\"\n        attr_expr[1, ...].parse_string(text).pprint()  # Fail! read 'color' as data instead of next label -> [['shape', 'SQUARE color']]\n\n        # use stop_on attribute for OneOrMore to avoid reading label string as part of the data\n        attr_expr = Group(label + Suppress(':') + OneOrMore(data_word, stop_on=label).set_parse_action(' '.join))\n        OneOrMore(attr_expr).parse_string(text).pprint() # Better -> [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'BLACK']]\n\n        # could also be written as\n        (attr_expr * (1,)).parse_string(text).pprint()\n    \"\"\"\n\n    def _generateDefaultName(self) -> str:\n        return \"{\" + str(self.expr) + \"}...\"\n\n\nclass ZeroOrMore(_MultipleMatch):\n    \"\"\"\n    Optional repetition of zero or more of the given expression.\n\n    Parameters:\n\n    - ``expr`` - expression that must match zero or more times\n    - ``stop_on`` - expression for a terminating sentinel\n      (only required if the sentinel would ordinarily match the repetition\n      expression) - (default= ``None``)\n\n    Example: similar to :class:`OneOrMore`\n    \"\"\"\n\n    def __init__(\n        self,\n        expr: Union[str, ParserElement],\n        stop_on: typing.Optional[Union[ParserElement, str]] = None,\n        *,\n        stopOn: typing.Optional[Union[ParserElement, str]] = None,\n    ):\n        super().__init__(expr, stopOn=stopOn or stop_on)\n        self.mayReturnEmpty = True\n\n    def parseImpl(self, instring, loc, doActions=True):\n        try:\n            return super().parseImpl(instring, loc, doActions)\n        except (ParseException, IndexError):\n            return loc, ParseResults([], name=self.resultsName)\n\n    def _generateDefaultName(self) -> str:\n        return \"[\" + str(self.expr) + \"]...\"\n\n\nclass DelimitedList(ParseElementEnhance):\n    def __init__(\n        self,\n        expr: Union[str, ParserElement],\n        delim: Union[str, ParserElement] = \",\",\n        combine: bool = False,\n        min: typing.Optional[int] = None,\n        max: typing.Optional[int] = None,\n        *,\n        allow_trailing_delim: bool = False,\n    ):\n        \"\"\"Helper to define a delimited list of expressions - the delimiter\n        defaults to ','. By default, the list elements and delimiters can\n        have intervening whitespace, and comments, but this can be\n        overridden by passing ``combine=True`` in the constructor. If\n        ``combine`` is set to ``True``, the matching tokens are\n        returned as a single token string, with the delimiters included;\n        otherwise, the matching tokens are returned as a list of tokens,\n        with the delimiters suppressed.\n\n        If ``allow_trailing_delim`` is set to True, then the list may end with\n        a delimiter.\n\n        Example::\n\n            DelimitedList(Word(alphas)).parse_string(\"aa,bb,cc\") # -> ['aa', 'bb', 'cc']\n            DelimitedList(Word(hexnums), delim=':', combine=True).parse_string(\"AA:BB:CC:DD:EE\") # -> ['AA:BB:CC:DD:EE']\n        \"\"\"\n        if isinstance(expr, str_type):\n            expr = ParserElement._literalStringClass(expr)\n        expr = typing.cast(ParserElement, expr)\n\n        if min is not None:\n            if min < 1:\n                raise ValueError(\"min must be greater than 0\")\n        if max is not None:\n            if min is not None and max < min:\n                raise ValueError(\"max must be greater than, or equal to min\")\n\n        self.content = expr\n        self.raw_delim = str(delim)\n        self.delim = delim\n        self.combine = combine\n        if not combine:\n            self.delim = Suppress(delim)\n        self.min = min or 1\n        self.max = max\n        self.allow_trailing_delim = allow_trailing_delim\n\n        delim_list_expr = self.content + (self.delim + self.content) * (\n            self.min - 1,\n            None if self.max is None else self.max - 1,\n        )\n        if self.allow_trailing_delim:\n            delim_list_expr += Opt(self.delim)\n\n        if self.combine:\n            delim_list_expr = Combine(delim_list_expr)\n\n        super().__init__(delim_list_expr, savelist=True)\n\n    def _generateDefaultName(self) -> str:\n        return \"{0} [{1} {0}]...\".format(self.content.streamline(), self.raw_delim)\n\n\nclass _NullToken:\n    def __bool__(self):\n        return False\n\n    def __str__(self):\n        return \"\"\n\n\nclass Opt(ParseElementEnhance):\n    \"\"\"\n    Optional matching of the given expression.\n\n    Parameters:\n\n    - ``expr`` - expression that must match zero or more times\n    - ``default`` (optional) - value to be returned if the optional expression is not found.\n\n    Example::\n\n        # US postal code can be a 5-digit zip, plus optional 4-digit qualifier\n        zip = Combine(Word(nums, exact=5) + Opt('-' + Word(nums, exact=4)))\n        zip.run_tests('''\n            # traditional ZIP code\n            12345\n\n            # ZIP+4 form\n            12101-0001\n\n            # invalid ZIP\n            98765-\n            ''')\n\n    prints::\n\n        # traditional ZIP code\n        12345\n        ['12345']\n\n        # ZIP+4 form\n        12101-0001\n        ['12101-0001']\n\n        # invalid ZIP\n        98765-\n             ^\n        FAIL: Expected end of text (at char 5), (line:1, col:6)\n    \"\"\"\n\n    __optionalNotMatched = _NullToken()\n\n    def __init__(\n        self, expr: Union[ParserElement, str], default: Any = __optionalNotMatched\n    ):\n        super().__init__(expr, savelist=False)\n        self.saveAsList = self.expr.saveAsList\n        self.defaultValue = default\n        self.mayReturnEmpty = True\n\n    def parseImpl(self, instring, loc, doActions=True):\n        self_expr = self.expr\n        try:\n            loc, tokens = self_expr._parse(instring, loc, doActions, callPreParse=False)\n        except (ParseException, IndexError):\n            default_value = self.defaultValue\n            if default_value is not self.__optionalNotMatched:\n                if self_expr.resultsName:\n                    tokens = ParseResults([default_value])\n                    tokens[self_expr.resultsName] = default_value\n                else:\n                    tokens = [default_value]\n            else:\n                tokens = []\n        return loc, tokens\n\n    def _generateDefaultName(self) -> str:\n        inner = str(self.expr)\n        # strip off redundant inner {}'s\n        while len(inner) > 1 and inner[0 :: len(inner) - 1] == \"{}\":\n            inner = inner[1:-1]\n        return \"[\" + inner + \"]\"\n\n\nOptional = Opt\n\n\nclass SkipTo(ParseElementEnhance):\n    \"\"\"\n    Token for skipping over all undefined text until the matched\n    expression is found.\n\n    Parameters:\n\n    - ``expr`` - target expression marking the end of the data to be skipped\n    - ``include`` - if ``True``, the target expression is also parsed\n      (the skipped text and target expression are returned as a 2-element\n      list) (default= ``False``).\n    - ``ignore`` - (default= ``None``) used to define grammars (typically quoted strings and\n      comments) that might contain false matches to the target expression\n    - ``fail_on`` - (default= ``None``) define expressions that are not allowed to be\n      included in the skipped test; if found before the target expression is found,\n      the :class:`SkipTo` is not a match\n\n    Example::\n\n        report = '''\n            Outstanding Issues Report - 1 Jan 2000\n\n               # | Severity | Description                               |  Days Open\n            -----+----------+-------------------------------------------+-----------\n             101 | Critical | Intermittent system crash                 |          6\n              94 | Cosmetic | Spelling error on Login ('log|n')         |         14\n              79 | Minor    | System slow when running too many reports |         47\n            '''\n        integer = Word(nums)\n        SEP = Suppress('|')\n        # use SkipTo to simply match everything up until the next SEP\n        # - ignore quoted strings, so that a '|' character inside a quoted string does not match\n        # - parse action will call token.strip() for each matched token, i.e., the description body\n        string_data = SkipTo(SEP, ignore=quoted_string)\n        string_data.set_parse_action(token_map(str.strip))\n        ticket_expr = (integer(\"issue_num\") + SEP\n                      + string_data(\"sev\") + SEP\n                      + string_data(\"desc\") + SEP\n                      + integer(\"days_open\"))\n\n        for tkt in ticket_expr.search_string(report):\n            print tkt.dump()\n\n    prints::\n\n        ['101', 'Critical', 'Intermittent system crash', '6']\n        - days_open: '6'\n        - desc: 'Intermittent system crash'\n        - issue_num: '101'\n        - sev: 'Critical'\n        ['94', 'Cosmetic', \"Spelling error on Login ('log|n')\", '14']\n        - days_open: '14'\n        - desc: \"Spelling error on Login ('log|n')\"\n        - issue_num: '94'\n        - sev: 'Cosmetic'\n        ['79', 'Minor', 'System slow when running too many reports', '47']\n        - days_open: '47'\n        - desc: 'System slow when running too many reports'\n        - issue_num: '79'\n        - sev: 'Minor'\n    \"\"\"\n\n    def __init__(\n        self,\n        other: Union[ParserElement, str],\n        include: bool = False,\n        ignore: typing.Optional[Union[ParserElement, str]] = None,\n        fail_on: typing.Optional[Union[ParserElement, str]] = None,\n        *,\n        failOn: typing.Optional[Union[ParserElement, str]] = None,\n    ):\n        super().__init__(other)\n        failOn = failOn or fail_on\n        if ignore is not None:\n            self.ignore(ignore)\n        self.mayReturnEmpty = True\n        self.mayIndexError = False\n        self.includeMatch = include\n        self.saveAsList = False\n        if isinstance(failOn, str_type):\n            self.failOn = self._literalStringClass(failOn)\n        else:\n            self.failOn = failOn\n        self.errmsg = \"No match found for \" + str(self.expr)\n\n    def parseImpl(self, instring, loc, doActions=True):\n        startloc = loc\n        instrlen = len(instring)\n        self_expr_parse = self.expr._parse\n        self_failOn_canParseNext = (\n            self.failOn.canParseNext if self.failOn is not None else None\n        )\n        self_preParse = self.preParse if self.callPreparse else None\n\n        tmploc = loc\n        while tmploc <= instrlen:\n            if self_failOn_canParseNext is not None:\n                # break if failOn expression matches\n                if self_failOn_canParseNext(instring, tmploc):\n                    break\n\n            if self_preParse is not None:\n                # skip grammar-ignored expressions\n                tmploc = self_preParse(instring, tmploc)\n\n            try:\n                self_expr_parse(instring, tmploc, doActions=False, callPreParse=False)\n            except (ParseException, IndexError):\n                # no match, advance loc in string\n                tmploc += 1\n            else:\n                # matched skipto expr, done\n                break\n\n        else:\n            # ran off the end of the input string without matching skipto expr, fail\n            raise ParseException(instring, loc, self.errmsg, self)\n\n        # build up return values\n        loc = tmploc\n        skiptext = instring[startloc:loc]\n        skipresult = ParseResults(skiptext)\n\n        if self.includeMatch:\n            loc, mat = self_expr_parse(instring, loc, doActions, callPreParse=False)\n            skipresult += mat\n\n        return loc, skipresult\n\n\nclass Forward(ParseElementEnhance):\n    \"\"\"\n    Forward declaration of an expression to be defined later -\n    used for recursive grammars, such as algebraic infix notation.\n    When the expression is known, it is assigned to the ``Forward``\n    variable using the ``'<<'`` operator.\n\n    Note: take care when assigning to ``Forward`` not to overlook\n    precedence of operators.\n\n    Specifically, ``'|'`` has a lower precedence than ``'<<'``, so that::\n\n        fwd_expr << a | b | c\n\n    will actually be evaluated as::\n\n        (fwd_expr << a) | b | c\n\n    thereby leaving b and c out as parseable alternatives.  It is recommended that you\n    explicitly group the values inserted into the ``Forward``::\n\n        fwd_expr << (a | b | c)\n\n    Converting to use the ``'<<='`` operator instead will avoid this problem.\n\n    See :class:`ParseResults.pprint` for an example of a recursive\n    parser created using ``Forward``.\n    \"\"\"\n\n    def __init__(self, other: typing.Optional[Union[ParserElement, str]] = None):\n        self.caller_frame = traceback.extract_stack(limit=2)[0]\n        super().__init__(other, savelist=False)  # type: ignore[arg-type]\n        self.lshift_line = None\n\n    def __lshift__(self, other) -> \"Forward\":\n        if hasattr(self, \"caller_frame\"):\n            del self.caller_frame\n        if isinstance(other, str_type):\n            other = self._literalStringClass(other)\n\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n\n        self.expr = other\n        self.streamlined = other.streamlined\n        self.mayIndexError = self.expr.mayIndexError\n        self.mayReturnEmpty = self.expr.mayReturnEmpty\n        self.set_whitespace_chars(\n            self.expr.whiteChars, copy_defaults=self.expr.copyDefaultWhiteChars\n        )\n        self.skipWhitespace = self.expr.skipWhitespace\n        self.saveAsList = self.expr.saveAsList\n        self.ignoreExprs.extend(self.expr.ignoreExprs)\n        self.lshift_line = traceback.extract_stack(limit=2)[-2]  # type: ignore[assignment]\n        return self\n\n    def __ilshift__(self, other) -> \"Forward\":\n        if not isinstance(other, ParserElement):\n            return NotImplemented\n\n        return self << other\n\n    def __or__(self, other) -> \"ParserElement\":\n        caller_line = traceback.extract_stack(limit=2)[-2]\n        if (\n            __diag__.warn_on_match_first_with_lshift_operator\n            and caller_line == self.lshift_line\n            and Diagnostics.warn_on_match_first_with_lshift_operator\n            not in self.suppress_warnings_\n        ):\n            warnings.warn(\n                \"using '<<' operator with '|' is probably an error, use '<<='\",\n                stacklevel=2,\n            )\n        ret = super().__or__(other)\n        return ret\n\n    def __del__(self):\n        # see if we are getting dropped because of '=' reassignment of var instead of '<<=' or '<<'\n        if (\n            self.expr is None\n            and __diag__.warn_on_assignment_to_Forward\n            and Diagnostics.warn_on_assignment_to_Forward not in self.suppress_warnings_\n        ):\n            warnings.warn_explicit(\n                \"Forward defined here but no expression attached later using '<<=' or '<<'\",\n                UserWarning,\n                filename=self.caller_frame.filename,\n                lineno=self.caller_frame.lineno,\n            )\n\n    def parseImpl(self, instring, loc, doActions=True):\n        if (\n            self.expr is None\n            and __diag__.warn_on_parse_using_empty_Forward\n            and Diagnostics.warn_on_parse_using_empty_Forward\n            not in self.suppress_warnings_\n        ):\n            # walk stack until parse_string, scan_string, search_string, or transform_string is found\n            parse_fns = (\n                \"parse_string\",\n                \"scan_string\",\n                \"search_string\",\n                \"transform_string\",\n            )\n            tb = traceback.extract_stack(limit=200)\n            for i, frm in enumerate(reversed(tb), start=1):\n                if frm.name in parse_fns:\n                    stacklevel = i + 1\n                    break\n            else:\n                stacklevel = 2\n            warnings.warn(\n                \"Forward expression was never assigned a value, will not parse any input\",\n                stacklevel=stacklevel,\n            )\n        if not ParserElement._left_recursion_enabled:\n            return super().parseImpl(instring, loc, doActions)\n        # ## Bounded Recursion algorithm ##\n        # Recursion only needs to be processed at ``Forward`` elements, since they are\n        # the only ones that can actually refer to themselves. The general idea is\n        # to handle recursion stepwise: We start at no recursion, then recurse once,\n        # recurse twice, ..., until more recursion offers no benefit (we hit the bound).\n        #\n        # The \"trick\" here is that each ``Forward`` gets evaluated in two contexts\n        # - to *match* a specific recursion level, and\n        # - to *search* the bounded recursion level\n        # and the two run concurrently. The *search* must *match* each recursion level\n        # to find the best possible match. This is handled by a memo table, which\n        # provides the previous match to the next level match attempt.\n        #\n        # See also \"Left Recursion in Parsing Expression Grammars\", Medeiros et al.\n        #\n        # There is a complication since we not only *parse* but also *transform* via\n        # actions: We do not want to run the actions too often while expanding. Thus,\n        # we expand using `doActions=False` and only run `doActions=True` if the next\n        # recursion level is acceptable.\n        with ParserElement.recursion_lock:\n            memo = ParserElement.recursion_memos\n            try:\n                # we are parsing at a specific recursion expansion - use it as-is\n                prev_loc, prev_result = memo[loc, self, doActions]\n                if isinstance(prev_result, Exception):\n                    raise prev_result\n                return prev_loc, prev_result.copy()\n            except KeyError:\n                act_key = (loc, self, True)\n                peek_key = (loc, self, False)\n                # we are searching for the best recursion expansion - keep on improving\n                # both `doActions` cases must be tracked separately here!\n                prev_loc, prev_peek = memo[peek_key] = (\n                    loc - 1,\n                    ParseException(\n                        instring, loc, \"Forward recursion without base case\", self\n                    ),\n                )\n                if doActions:\n                    memo[act_key] = memo[peek_key]\n                while True:\n                    try:\n                        new_loc, new_peek = super().parseImpl(instring, loc, False)\n                    except ParseException:\n                        # we failed before getting any match – do not hide the error\n                        if isinstance(prev_peek, Exception):\n                            raise\n                        new_loc, new_peek = prev_loc, prev_peek\n                    # the match did not get better: we are done\n                    if new_loc <= prev_loc:\n                        if doActions:\n                            # replace the match for doActions=False as well,\n                            # in case the action did backtrack\n                            prev_loc, prev_result = memo[peek_key] = memo[act_key]\n                            del memo[peek_key], memo[act_key]\n                            return prev_loc, prev_result.copy()\n                        del memo[peek_key]\n                        return prev_loc, prev_peek.copy()\n                    # the match did get better: see if we can improve further\n                    else:\n                        if doActions:\n                            try:\n                                memo[act_key] = super().parseImpl(instring, loc, True)\n                            except ParseException as e:\n                                memo[peek_key] = memo[act_key] = (new_loc, e)\n                                raise\n                        prev_loc, prev_peek = memo[peek_key] = new_loc, new_peek\n\n    def leave_whitespace(self, recursive: bool = True) -> ParserElement:\n        self.skipWhitespace = False\n        return self\n\n    def ignore_whitespace(self, recursive: bool = True) -> ParserElement:\n        self.skipWhitespace = True\n        return self\n\n    def streamline(self) -> ParserElement:\n        if not self.streamlined:\n            self.streamlined = True\n            if self.expr is not None:\n                self.expr.streamline()\n        return self\n\n    def validate(self, validateTrace=None) -> None:\n        warnings.warn(\n            \"ParserElement.validate() is deprecated, and should not be used to check for left recursion\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        if validateTrace is None:\n            validateTrace = []\n\n        if self not in validateTrace:\n            tmp = validateTrace[:] + [self]\n            if self.expr is not None:\n                self.expr.validate(tmp)\n        self._checkRecursion([])\n\n    def _generateDefaultName(self) -> str:\n        # Avoid infinite recursion by setting a temporary _defaultName\n        self._defaultName = \": ...\"\n\n        # Use the string representation of main expression.\n        retString = \"...\"\n        try:\n            if self.expr is not None:\n                retString = str(self.expr)[:1000]\n            else:\n                retString = \"None\"\n        finally:\n            return self.__class__.__name__ + \": \" + retString\n\n    def copy(self) -> ParserElement:\n        if self.expr is not None:\n            return super().copy()\n        else:\n            ret = Forward()\n            ret <<= self\n            return ret\n\n    def _setResultsName(self, name, list_all_matches=False):\n        if (\n            __diag__.warn_name_set_on_empty_Forward\n            and Diagnostics.warn_name_set_on_empty_Forward\n            not in self.suppress_warnings_\n        ):\n            if self.expr is None:\n                warnings.warn(\n                    \"{}: setting results name {!r} on {} expression \"\n                    \"that has no contained expression\".format(\n                        \"warn_name_set_on_empty_Forward\", name, type(self).__name__\n                    ),\n                    stacklevel=3,\n                )\n\n        return super()._setResultsName(name, list_all_matches)\n\n    # Compatibility synonyms\n    # fmt: off\n    @replaced_by_pep8(leave_whitespace)\n    def leaveWhitespace(self): ...\n\n    @replaced_by_pep8(ignore_whitespace)\n    def ignoreWhitespace(self): ...\n    # fmt: on\n\n\nclass TokenConverter(ParseElementEnhance):\n    \"\"\"\n    Abstract subclass of :class:`ParseExpression`, for converting parsed results.\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str], savelist=False):\n        super().__init__(expr)  # , savelist)\n        self.saveAsList = False\n\n\nclass Combine(TokenConverter):\n    \"\"\"Converter to concatenate all matching tokens to a single string.\n    By default, the matching patterns must also be contiguous in the\n    input string; this can be disabled by specifying\n    ``'adjacent=False'`` in the constructor.\n\n    Example::\n\n        real = Word(nums) + '.' + Word(nums)\n        print(real.parse_string('3.1416')) # -> ['3', '.', '1416']\n        # will also erroneously match the following\n        print(real.parse_string('3. 1416')) # -> ['3', '.', '1416']\n\n        real = Combine(Word(nums) + '.' + Word(nums))\n        print(real.parse_string('3.1416')) # -> ['3.1416']\n        # no match when there are internal spaces\n        print(real.parse_string('3. 1416')) # -> Exception: Expected W:(0123...)\n    \"\"\"\n\n    def __init__(\n        self,\n        expr: ParserElement,\n        join_string: str = \"\",\n        adjacent: bool = True,\n        *,\n        joinString: typing.Optional[str] = None,\n    ):\n        super().__init__(expr)\n        joinString = joinString if joinString is not None else join_string\n        # suppress whitespace-stripping in contained parse expressions, but re-enable it on the Combine itself\n        if adjacent:\n            self.leave_whitespace()\n        self.adjacent = adjacent\n        self.skipWhitespace = True\n        self.joinString = joinString\n        self.callPreparse = True\n\n    def ignore(self, other) -> ParserElement:\n        if self.adjacent:\n            ParserElement.ignore(self, other)\n        else:\n            super().ignore(other)\n        return self\n\n    def postParse(self, instring, loc, tokenlist):\n        retToks = tokenlist.copy()\n        del retToks[:]\n        retToks += ParseResults(\n            [\"\".join(tokenlist._asStringList(self.joinString))], modal=self.modalResults\n        )\n\n        if self.resultsName and retToks.haskeys():\n            return [retToks]\n        else:\n            return retToks\n\n\nclass Group(TokenConverter):\n    \"\"\"Converter to return the matched tokens as a list - useful for\n    returning tokens of :class:`ZeroOrMore` and :class:`OneOrMore` expressions.\n\n    The optional ``aslist`` argument when set to True will return the\n    parsed tokens as a Python list instead of a pyparsing ParseResults.\n\n    Example::\n\n        ident = Word(alphas)\n        num = Word(nums)\n        term = ident | num\n        func = ident + Opt(DelimitedList(term))\n        print(func.parse_string(\"fn a, b, 100\"))\n        # -> ['fn', 'a', 'b', '100']\n\n        func = ident + Group(Opt(DelimitedList(term)))\n        print(func.parse_string(\"fn a, b, 100\"))\n        # -> ['fn', ['a', 'b', '100']]\n    \"\"\"\n\n    def __init__(self, expr: ParserElement, aslist: bool = False):\n        super().__init__(expr)\n        self.saveAsList = True\n        self._asPythonList = aslist\n\n    def postParse(self, instring, loc, tokenlist):\n        if self._asPythonList:\n            return ParseResults.List(\n                tokenlist.asList()\n                if isinstance(tokenlist, ParseResults)\n                else list(tokenlist)\n            )\n        else:\n            return [tokenlist]\n\n\nclass Dict(TokenConverter):\n    \"\"\"Converter to return a repetitive expression as a list, but also\n    as a dictionary. Each element can also be referenced using the first\n    token in the expression as its key. Useful for tabular report\n    scraping when the first column can be used as a item key.\n\n    The optional ``asdict`` argument when set to True will return the\n    parsed tokens as a Python dict instead of a pyparsing ParseResults.\n\n    Example::\n\n        data_word = Word(alphas)\n        label = data_word + FollowedBy(':')\n\n        text = \"shape: SQUARE posn: upper left color: light blue texture: burlap\"\n        attr_expr = (label + Suppress(':') + OneOrMore(data_word, stop_on=label).set_parse_action(' '.join))\n\n        # print attributes as plain groups\n        print(attr_expr[1, ...].parse_string(text).dump())\n\n        # instead of OneOrMore(expr), parse using Dict(Group(expr)[1, ...]) - Dict will auto-assign names\n        result = Dict(Group(attr_expr)[1, ...]).parse_string(text)\n        print(result.dump())\n\n        # access named fields as dict entries, or output as dict\n        print(result['shape'])\n        print(result.as_dict())\n\n    prints::\n\n        ['shape', 'SQUARE', 'posn', 'upper left', 'color', 'light blue', 'texture', 'burlap']\n        [['shape', 'SQUARE'], ['posn', 'upper left'], ['color', 'light blue'], ['texture', 'burlap']]\n        - color: 'light blue'\n        - posn: 'upper left'\n        - shape: 'SQUARE'\n        - texture: 'burlap'\n        SQUARE\n        {'color': 'light blue', 'posn': 'upper left', 'texture': 'burlap', 'shape': 'SQUARE'}\n\n    See more examples at :class:`ParseResults` of accessing fields by results name.\n    \"\"\"\n\n    def __init__(self, expr: ParserElement, asdict: bool = False):\n        super().__init__(expr)\n        self.saveAsList = True\n        self._asPythonDict = asdict\n\n    def postParse(self, instring, loc, tokenlist):\n        for i, tok in enumerate(tokenlist):\n            if len(tok) == 0:\n                continue\n\n            ikey = tok[0]\n            if isinstance(ikey, int):\n                ikey = str(ikey).strip()\n\n            if len(tok) == 1:\n                tokenlist[ikey] = _ParseResultsWithOffset(\"\", i)\n\n            elif len(tok) == 2 and not isinstance(tok[1], ParseResults):\n                tokenlist[ikey] = _ParseResultsWithOffset(tok[1], i)\n\n            else:\n                try:\n                    dictvalue = tok.copy()  # ParseResults(i)\n                except Exception:\n                    exc = TypeError(\n                        \"could not extract dict values from parsed results\"\n                        \" - Dict expression must contain Grouped expressions\"\n                    )\n                    raise exc from None\n\n                del dictvalue[0]\n\n                if len(dictvalue) != 1 or (\n                    isinstance(dictvalue, ParseResults) and dictvalue.haskeys()\n                ):\n                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue, i)\n                else:\n                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue[0], i)\n\n        if self._asPythonDict:\n            return [tokenlist.as_dict()] if self.resultsName else tokenlist.as_dict()\n        else:\n            return [tokenlist] if self.resultsName else tokenlist\n\n\nclass Suppress(TokenConverter):\n    \"\"\"Converter for ignoring the results of a parsed expression.\n\n    Example::\n\n        source = \"a, b, c,d\"\n        wd = Word(alphas)\n        wd_list1 = wd + (',' + wd)[...]\n        print(wd_list1.parse_string(source))\n\n        # often, delimiters that are useful during parsing are just in the\n        # way afterward - use Suppress to keep them out of the parsed output\n        wd_list2 = wd + (Suppress(',') + wd)[...]\n        print(wd_list2.parse_string(source))\n\n        # Skipped text (using '...') can be suppressed as well\n        source = \"lead in START relevant text END trailing text\"\n        start_marker = Keyword(\"START\")\n        end_marker = Keyword(\"END\")\n        find_body = Suppress(...) + start_marker + ... + end_marker\n        print(find_body.parse_string(source)\n\n    prints::\n\n        ['a', ',', 'b', ',', 'c', ',', 'd']\n        ['a', 'b', 'c', 'd']\n        ['START', 'relevant text ', 'END']\n\n    (See also :class:`DelimitedList`.)\n    \"\"\"\n\n    def __init__(self, expr: Union[ParserElement, str], savelist: bool = False):\n        if expr is ...:\n            expr = _PendingSkip(NoMatch())\n        super().__init__(expr)\n\n    def __add__(self, other) -> \"ParserElement\":\n        if isinstance(self.expr, _PendingSkip):\n            return Suppress(SkipTo(other)) + other\n        else:\n            return super().__add__(other)\n\n    def __sub__(self, other) -> \"ParserElement\":\n        if isinstance(self.expr, _PendingSkip):\n            return Suppress(SkipTo(other)) - other\n        else:\n            return super().__sub__(other)\n\n    def postParse(self, instring, loc, tokenlist):\n        return []\n\n    def suppress(self) -> ParserElement:\n        return self\n\n\ndef trace_parse_action(f: ParseAction) -> ParseAction:\n    \"\"\"Decorator for debugging parse actions.\n\n    When the parse action is called, this decorator will print\n    ``\">> entering method-name(line:<current_source_line>, <parse_location>, <matched_tokens>)\"``.\n    When the parse action completes, the decorator will print\n    ``\"<<\"`` followed by the returned value, or any exception that the parse action raised.\n\n    Example::\n\n        wd = Word(alphas)\n\n        @trace_parse_action\n        def remove_duplicate_chars(tokens):\n            return ''.join(sorted(set(''.join(tokens))))\n\n        wds = wd[1, ...].set_parse_action(remove_duplicate_chars)\n        print(wds.parse_string(\"slkdjs sld sldd sdlf sdljf\"))\n\n    prints::\n\n        >>entering remove_duplicate_chars(line: 'slkdjs sld sldd sdlf sdljf', 0, (['slkdjs', 'sld', 'sldd', 'sdlf', 'sdljf'], {}))\n        <<leaving remove_duplicate_chars (ret: 'dfjkls')\n        ['dfjkls']\n    \"\"\"\n    f = _trim_arity(f)\n\n    def z(*paArgs):\n        thisFunc = f.__name__\n        s, l, t = paArgs[-3:]\n        if len(paArgs) > 3:\n            thisFunc = paArgs[0].__class__.__name__ + \".\" + thisFunc\n        sys.stderr.write(f\">>entering {thisFunc}(line: {line(l, s)!r}, {l}, {t!r})\\n\")\n        try:\n            ret = f(*paArgs)\n        except Exception as exc:\n            sys.stderr.write(f\"<<leaving {thisFunc} (exception: {exc})\\n\")\n            raise\n        sys.stderr.write(f\"<<leaving {thisFunc} (ret: {ret!r})\\n\")\n        return ret\n\n    z.__name__ = f.__name__\n    return z\n\n\n# convenience constants for positional expressions\nempty = Empty().set_name(\"empty\")\nline_start = LineStart().set_name(\"line_start\")\nline_end = LineEnd().set_name(\"line_end\")\nstring_start = StringStart().set_name(\"string_start\")\nstring_end = StringEnd().set_name(\"string_end\")\n\n_escapedPunc = Regex(r\"\\\\[\\\\[\\]\\/\\-\\*\\.\\$\\+\\^\\?()~ ]\").set_parse_action(\n    lambda s, l, t: t[0][1]\n)\n_escapedHexChar = Regex(r\"\\\\0?[xX][0-9a-fA-F]+\").set_parse_action(\n    lambda s, l, t: chr(int(t[0].lstrip(r\"\\0x\"), 16))\n)\n_escapedOctChar = Regex(r\"\\\\0[0-7]+\").set_parse_action(\n    lambda s, l, t: chr(int(t[0][1:], 8))\n)\n_singleChar = (\n    _escapedPunc | _escapedHexChar | _escapedOctChar | CharsNotIn(r\"\\]\", exact=1)\n)\n_charRange = Group(_singleChar + Suppress(\"-\") + _singleChar)\n_reBracketExpr = (\n    Literal(\"[\")\n    + Opt(\"^\").set_results_name(\"negate\")\n    + Group(OneOrMore(_charRange | _singleChar)).set_results_name(\"body\")\n    + Literal(\"]\")\n)\n\n\ndef srange(s: str) -> str:\n    r\"\"\"Helper to easily define string ranges for use in :class:`Word`\n    construction. Borrows syntax from regexp ``'[]'`` string range\n    definitions::\n\n        srange(\"[0-9]\")   -> \"0123456789\"\n        srange(\"[a-z]\")   -> \"abcdefghijklmnopqrstuvwxyz\"\n        srange(\"[a-z$_]\") -> \"abcdefghijklmnopqrstuvwxyz$_\"\n\n    The input string must be enclosed in []'s, and the returned string\n    is the expanded character set joined into a single string. The\n    values enclosed in the []'s may be:\n\n    - a single character\n    - an escaped character with a leading backslash (such as ``\\-``\n      or ``\\]``)\n    - an escaped hex character with a leading ``'\\x'``\n      (``\\x21``, which is a ``'!'`` character) (``\\0x##``\n      is also supported for backwards compatibility)\n    - an escaped octal character with a leading ``'\\0'``\n      (``\\041``, which is a ``'!'`` character)\n    - a range of any of the above, separated by a dash (``'a-z'``,\n      etc.)\n    - any combination of the above (``'aeiouy'``,\n      ``'a-zA-Z0-9_$'``, etc.)\n    \"\"\"\n    _expanded = (\n        lambda p: p\n        if not isinstance(p, ParseResults)\n        else \"\".join(chr(c) for c in range(ord(p[0]), ord(p[1]) + 1))\n    )\n    try:\n        return \"\".join(_expanded(part) for part in _reBracketExpr.parse_string(s).body)\n    except Exception as e:\n        return \"\"\n\n\ndef token_map(func, *args) -> ParseAction:\n    \"\"\"Helper to define a parse action by mapping a function to all\n    elements of a :class:`ParseResults` list. If any additional args are passed,\n    they are forwarded to the given function as additional arguments\n    after the token, as in\n    ``hex_integer = Word(hexnums).set_parse_action(token_map(int, 16))``,\n    which will convert the parsed data to an integer using base 16.\n\n    Example (compare the last to example in :class:`ParserElement.transform_string`::\n\n        hex_ints = Word(hexnums)[1, ...].set_parse_action(token_map(int, 16))\n        hex_ints.run_tests('''\n            00 11 22 aa FF 0a 0d 1a\n            ''')\n\n        upperword = Word(alphas).set_parse_action(token_map(str.upper))\n        upperword[1, ...].run_tests('''\n            my kingdom for a horse\n            ''')\n\n        wd = Word(alphas).set_parse_action(token_map(str.title))\n        wd[1, ...].set_parse_action(' '.join).run_tests('''\n            now is the winter of our discontent made glorious summer by this sun of york\n            ''')\n\n    prints::\n\n        00 11 22 aa FF 0a 0d 1a\n        [0, 17, 34, 170, 255, 10, 13, 26]\n\n        my kingdom for a horse\n        ['MY', 'KINGDOM', 'FOR', 'A', 'HORSE']\n\n        now is the winter of our discontent made glorious summer by this sun of york\n        ['Now Is The Winter Of Our Discontent Made Glorious Summer By This Sun Of York']\n    \"\"\"\n\n    def pa(s, l, t):\n        return [func(tokn, *args) for tokn in t]\n\n    func_name = getattr(func, \"__name__\", getattr(func, \"__class__\").__name__)\n    pa.__name__ = func_name\n\n    return pa\n\n\ndef autoname_elements() -> None:\n    \"\"\"\n    Utility to simplify mass-naming of parser elements, for\n    generating railroad diagram with named subdiagrams.\n    \"\"\"\n    calling_frame = sys._getframe().f_back\n    if calling_frame is None:\n        return\n    calling_frame = typing.cast(types.FrameType, calling_frame)\n    for name, var in calling_frame.f_locals.items():\n        if isinstance(var, ParserElement) and not var.customName:\n            var.set_name(name)\n\n\ndbl_quoted_string = Combine(\n    Regex(r'\"(?:[^\"\\n\\r\\\\]|(?:\"\")|(?:\\\\(?:[^x]|x[0-9a-fA-F]+)))*') + '\"'\n).set_name(\"string enclosed in double quotes\")\n\nsgl_quoted_string = Combine(\n    Regex(r\"'(?:[^'\\n\\r\\\\]|(?:'')|(?:\\\\(?:[^x]|x[0-9a-fA-F]+)))*\") + \"'\"\n).set_name(\"string enclosed in single quotes\")\n\nquoted_string = Combine(\n    (Regex(r'\"(?:[^\"\\n\\r\\\\]|(?:\"\")|(?:\\\\(?:[^x]|x[0-9a-fA-F]+)))*') + '\"').set_name(\n        \"double quoted string\"\n    )\n    | (Regex(r\"'(?:[^'\\n\\r\\\\]|(?:'')|(?:\\\\(?:[^x]|x[0-9a-fA-F]+)))*\") + \"'\").set_name(\n        \"single quoted string\"\n    )\n).set_name(\"quoted string using single or double quotes\")\n\npython_quoted_string = Combine(\n    (Regex(r'\"\"\"(?:[^\"\\\\]|\"\"(?!\")|\"(?!\"\")|\\\\.)*', flags=re.MULTILINE) + '\"\"\"').set_name(\n        \"multiline double quoted string\"\n    )\n    ^ (\n        Regex(r\"'''(?:[^'\\\\]|''(?!')|'(?!'')|\\\\.)*\", flags=re.MULTILINE) + \"'''\"\n    ).set_name(\"multiline single quoted string\")\n    ^ (Regex(r'\"(?:[^\"\\n\\r\\\\]|(?:\\\\\")|(?:\\\\(?:[^x]|x[0-9a-fA-F]+)))*') + '\"').set_name(\n        \"double quoted string\"\n    )\n    ^ (Regex(r\"'(?:[^'\\n\\r\\\\]|(?:\\\\')|(?:\\\\(?:[^x]|x[0-9a-fA-F]+)))*\") + \"'\").set_name(\n        \"single quoted string\"\n    )\n).set_name(\"Python quoted string\")\n\nunicode_string = Combine(\"u\" + quoted_string.copy()).set_name(\"unicode string literal\")\n\n\nalphas8bit = srange(r\"[\\0xc0-\\0xd6\\0xd8-\\0xf6\\0xf8-\\0xff]\")\npunc8bit = srange(r\"[\\0xa1-\\0xbf\\0xd7\\0xf7]\")\n\n# build list of built-in expressions, for future reference if a global default value\n# gets updated\n_builtin_exprs: List[ParserElement] = [\n    v for v in vars().values() if isinstance(v, ParserElement)\n]\n\n# backward compatibility names\n# fmt: off\nsglQuotedString = sgl_quoted_string\ndblQuotedString = dbl_quoted_string\nquotedString = quoted_string\nunicodeString = unicode_string\nlineStart = line_start\nlineEnd = line_end\nstringStart = string_start\nstringEnd = string_end\n\n@replaced_by_pep8(null_debug_action)\ndef nullDebugAction(): ...\n\n@replaced_by_pep8(trace_parse_action)\ndef traceParseAction(): ...\n\n@replaced_by_pep8(condition_as_parse_action)\ndef conditionAsParseAction(): ...\n\n@replaced_by_pep8(token_map)\ndef tokenMap(): ...\n# fmt: on\n"},"hash":"99Mc3SN8xW"}