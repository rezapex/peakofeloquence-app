{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:commands:__init__.py","body":"\"\"\"\nPackage containing all pip commands\n\"\"\"\n\nimport importlib\nfrom collections import namedtuple\nfrom typing import Any, Dict, Optional\n\nfrom pip._internal.cli.base_command import Command\n\nCommandInfo = namedtuple(\"CommandInfo\", \"module_path, class_name, summary\")\n\n# This dictionary does a bunch of heavy lifting for help output:\n# - Enables avoiding additional (costly) imports for presenting `--help`.\n# - The ordering matters for help display.\n#\n# Even though the module path starts with the same \"pip._internal.commands\"\n# prefix, the full path makes testing easier (specifically when modifying\n# `commands_dict` in test setup / teardown).\ncommands_dict: Dict[str, CommandInfo] = {\n    \"install\": CommandInfo(\n        \"pip._internal.commands.install\",\n        \"InstallCommand\",\n        \"Install packages.\",\n    ),\n    \"download\": CommandInfo(\n        \"pip._internal.commands.download\",\n        \"DownloadCommand\",\n        \"Download packages.\",\n    ),\n    \"uninstall\": CommandInfo(\n        \"pip._internal.commands.uninstall\",\n        \"UninstallCommand\",\n        \"Uninstall packages.\",\n    ),\n    \"freeze\": CommandInfo(\n        \"pip._internal.commands.freeze\",\n        \"FreezeCommand\",\n        \"Output installed packages in requirements format.\",\n    ),\n    \"inspect\": CommandInfo(\n        \"pip._internal.commands.inspect\",\n        \"InspectCommand\",\n        \"Inspect the python environment.\",\n    ),\n    \"list\": CommandInfo(\n        \"pip._internal.commands.list\",\n        \"ListCommand\",\n        \"List installed packages.\",\n    ),\n    \"show\": CommandInfo(\n        \"pip._internal.commands.show\",\n        \"ShowCommand\",\n        \"Show information about installed packages.\",\n    ),\n    \"check\": CommandInfo(\n        \"pip._internal.commands.check\",\n        \"CheckCommand\",\n        \"Verify installed packages have compatible dependencies.\",\n    ),\n    \"config\": CommandInfo(\n        \"pip._internal.commands.configuration\",\n        \"ConfigurationCommand\",\n        \"Manage local and global configuration.\",\n    ),\n    \"search\": CommandInfo(\n        \"pip._internal.commands.search\",\n        \"SearchCommand\",\n        \"Search PyPI for packages.\",\n    ),\n    \"cache\": CommandInfo(\n        \"pip._internal.commands.cache\",\n        \"CacheCommand\",\n        \"Inspect and manage pip's wheel cache.\",\n    ),\n    \"index\": CommandInfo(\n        \"pip._internal.commands.index\",\n        \"IndexCommand\",\n        \"Inspect information available from package indexes.\",\n    ),\n    \"wheel\": CommandInfo(\n        \"pip._internal.commands.wheel\",\n        \"WheelCommand\",\n        \"Build wheels from your requirements.\",\n    ),\n    \"hash\": CommandInfo(\n        \"pip._internal.commands.hash\",\n        \"HashCommand\",\n        \"Compute hashes of package archives.\",\n    ),\n    \"completion\": CommandInfo(\n        \"pip._internal.commands.completion\",\n        \"CompletionCommand\",\n        \"A helper command used for command completion.\",\n    ),\n    \"debug\": CommandInfo(\n        \"pip._internal.commands.debug\",\n        \"DebugCommand\",\n        \"Show information useful for debugging.\",\n    ),\n    \"help\": CommandInfo(\n        \"pip._internal.commands.help\",\n        \"HelpCommand\",\n        \"Show help for commands.\",\n    ),\n}\n\n\ndef create_command(name: str, **kwargs: Any) -> Command:\n    \"\"\"\n    Create an instance of the Command class with the given name.\n    \"\"\"\n    module_path, class_name, summary = commands_dict[name]\n    module = importlib.import_module(module_path)\n    command_class = getattr(module, class_name)\n    command = command_class(name=name, summary=summary, **kwargs)\n\n    return command\n\n\ndef get_similar_commands(name: str) -> Optional[str]:\n    \"\"\"Command name auto-correct.\"\"\"\n    from difflib import get_close_matches\n\n    name = name.lower()\n\n    close_commands = get_close_matches(name, commands_dict.keys())\n\n    if close_commands:\n        return close_commands[0]\n    else:\n        return None\n"},"hash":"bUOw8dDtWU"}