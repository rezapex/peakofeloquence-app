{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:resolvelib:reporters.py","body":"class BaseReporter(object):\n    \"\"\"Delegate class to provider progress reporting for the resolver.\"\"\"\n\n    def starting(self):\n        \"\"\"Called before the resolution actually starts.\"\"\"\n\n    def starting_round(self, index):\n        \"\"\"Called before each round of resolution starts.\n\n        The index is zero-based.\n        \"\"\"\n\n    def ending_round(self, index, state):\n        \"\"\"Called before each round of resolution ends.\n\n        This is NOT called if the resolution ends at this round. Use `ending`\n        if you want to report finalization. The index is zero-based.\n        \"\"\"\n\n    def ending(self, state):\n        \"\"\"Called before the resolution ends successfully.\"\"\"\n\n    def adding_requirement(self, requirement, parent):\n        \"\"\"Called when adding a new requirement into the resolve criteria.\n\n        :param requirement: The additional requirement to be applied to filter\n            the available candidaites.\n        :param parent: The candidate that requires ``requirement`` as a\n            dependency, or None if ``requirement`` is one of the root\n            requirements passed in from ``Resolver.resolve()``.\n        \"\"\"\n\n    def resolving_conflicts(self, causes):\n        \"\"\"Called when starting to attempt requirement conflict resolution.\n\n        :param causes: The information on the collision that caused the backtracking.\n        \"\"\"\n\n    def rejecting_candidate(self, criterion, candidate):\n        \"\"\"Called when rejecting a candidate during backtracking.\"\"\"\n\n    def pinning(self, candidate):\n        \"\"\"Called when adding a candidate to the potential solution.\"\"\"\n"},"hash":"CGKOxxy8jR"}