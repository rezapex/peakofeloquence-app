{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:chardet:charsetgroupprober.py","body":"######################## BEGIN LICENSE BLOCK ########################\n# The Original Code is Mozilla Communicator client code.\n#\n# The Initial Developer of the Original Code is\n# Netscape Communications Corporation.\n# Portions created by the Initial Developer are Copyright (C) 1998\n# the Initial Developer. All Rights Reserved.\n#\n# Contributor(s):\n#   Mark Pilgrim - port to Python\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 2.1 of the License, or (at your option) any later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n# 02110-1301  USA\n######################### END LICENSE BLOCK #########################\n\nfrom typing import List, Optional, Union\n\nfrom .charsetprober import CharSetProber\nfrom .enums import LanguageFilter, ProbingState\n\n\nclass CharSetGroupProber(CharSetProber):\n    def __init__(self, lang_filter: LanguageFilter = LanguageFilter.NONE) -> None:\n        super().__init__(lang_filter=lang_filter)\n        self._active_num = 0\n        self.probers: List[CharSetProber] = []\n        self._best_guess_prober: Optional[CharSetProber] = None\n\n    def reset(self) -> None:\n        super().reset()\n        self._active_num = 0\n        for prober in self.probers:\n            prober.reset()\n            prober.active = True\n            self._active_num += 1\n        self._best_guess_prober = None\n\n    @property\n    def charset_name(self) -> Optional[str]:\n        if not self._best_guess_prober:\n            self.get_confidence()\n            if not self._best_guess_prober:\n                return None\n        return self._best_guess_prober.charset_name\n\n    @property\n    def language(self) -> Optional[str]:\n        if not self._best_guess_prober:\n            self.get_confidence()\n            if not self._best_guess_prober:\n                return None\n        return self._best_guess_prober.language\n\n    def feed(self, byte_str: Union[bytes, bytearray]) -> ProbingState:\n        for prober in self.probers:\n            if not prober.active:\n                continue\n            state = prober.feed(byte_str)\n            if not state:\n                continue\n            if state == ProbingState.FOUND_IT:\n                self._best_guess_prober = prober\n                self._state = ProbingState.FOUND_IT\n                return self.state\n            if state == ProbingState.NOT_ME:\n                prober.active = False\n                self._active_num -= 1\n                if self._active_num <= 0:\n                    self._state = ProbingState.NOT_ME\n                    return self.state\n        return self.state\n\n    def get_confidence(self) -> float:\n        state = self.state\n        if state == ProbingState.FOUND_IT:\n            return 0.99\n        if state == ProbingState.NOT_ME:\n            return 0.01\n        best_conf = 0.0\n        self._best_guess_prober = None\n        for prober in self.probers:\n            if not prober.active:\n                self.logger.debug(\"%s not active\", prober.charset_name)\n                continue\n            conf = prober.get_confidence()\n            self.logger.debug(\n                \"%s %s confidence = %s\", prober.charset_name, prober.language, conf\n            )\n            if best_conf < conf:\n                best_conf = conf\n                self._best_guess_prober = prober\n        if not self._best_guess_prober:\n            return 0.0\n        return best_conf\n"},"hash":"YbIIqJAcC6"}