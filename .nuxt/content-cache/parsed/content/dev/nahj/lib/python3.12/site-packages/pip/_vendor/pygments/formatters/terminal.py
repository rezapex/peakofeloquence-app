{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_vendor:pygments:formatters:terminal.py","body":"\"\"\"\n    pygments.formatters.terminal\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for terminal output with ANSI sequences.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nfrom pip._vendor.pygments.formatter import Formatter\nfrom pip._vendor.pygments.token import Keyword, Name, Comment, String, Error, \\\n    Number, Operator, Generic, Token, Whitespace\nfrom pip._vendor.pygments.console import ansiformat\nfrom pip._vendor.pygments.util import get_choice_opt\n\n\n__all__ = ['TerminalFormatter']\n\n\n#: Map token types to a tuple of color values for light and dark\n#: backgrounds.\nTERMINAL_COLORS = {\n    Token:              ('',            ''),\n\n    Whitespace:         ('gray',   'brightblack'),\n    Comment:            ('gray',   'brightblack'),\n    Comment.Preproc:    ('cyan',        'brightcyan'),\n    Keyword:            ('blue',    'brightblue'),\n    Keyword.Type:       ('cyan',        'brightcyan'),\n    Operator.Word:      ('magenta',      'brightmagenta'),\n    Name.Builtin:       ('cyan',        'brightcyan'),\n    Name.Function:      ('green',   'brightgreen'),\n    Name.Namespace:     ('_cyan_',      '_brightcyan_'),\n    Name.Class:         ('_green_', '_brightgreen_'),\n    Name.Exception:     ('cyan',        'brightcyan'),\n    Name.Decorator:     ('brightblack',    'gray'),\n    Name.Variable:      ('red',     'brightred'),\n    Name.Constant:      ('red',     'brightred'),\n    Name.Attribute:     ('cyan',        'brightcyan'),\n    Name.Tag:           ('brightblue',        'brightblue'),\n    String:             ('yellow',       'yellow'),\n    Number:             ('blue',    'brightblue'),\n\n    Generic.Deleted:    ('brightred',        'brightred'),\n    Generic.Inserted:   ('green',  'brightgreen'),\n    Generic.Heading:    ('**',         '**'),\n    Generic.Subheading: ('*magenta*',   '*brightmagenta*'),\n    Generic.Prompt:     ('**',         '**'),\n    Generic.Error:      ('brightred',        'brightred'),\n\n    Error:              ('_brightred_',      '_brightred_'),\n}\n\n\nclass TerminalFormatter(Formatter):\n    r\"\"\"\n    Format tokens with ANSI color sequences, for output in a text console.\n    Color sequences are terminated at newlines, so that paging the output\n    works correctly.\n\n    The `get_style_defs()` method doesn't do anything special since there is\n    no support for common styles.\n\n    Options accepted:\n\n    `bg`\n        Set to ``\"light\"`` or ``\"dark\"`` depending on the terminal's background\n        (default: ``\"light\"``).\n\n    `colorscheme`\n        A dictionary mapping token types to (lightbg, darkbg) color names or\n        ``None`` (default: ``None`` = use builtin colorscheme).\n\n    `linenos`\n        Set to ``True`` to have line numbers on the terminal output as well\n        (default: ``False`` = no line numbers).\n    \"\"\"\n    name = 'Terminal'\n    aliases = ['terminal', 'console']\n    filenames = []\n\n    def __init__(self, **options):\n        Formatter.__init__(self, **options)\n        self.darkbg = get_choice_opt(options, 'bg',\n                                     ['light', 'dark'], 'light') == 'dark'\n        self.colorscheme = options.get('colorscheme', None) or TERMINAL_COLORS\n        self.linenos = options.get('linenos', False)\n        self._lineno = 0\n\n    def format(self, tokensource, outfile):\n        return Formatter.format(self, tokensource, outfile)\n\n    def _write_lineno(self, outfile):\n        self._lineno += 1\n        outfile.write(\"%s%04d: \" % (self._lineno != 1 and '\\n' or '', self._lineno))\n\n    def _get_color(self, ttype):\n        # self.colorscheme is a dict containing usually generic types, so we\n        # have to walk the tree of dots.  The base Token type must be a key,\n        # even if it's empty string, as in the default above.\n        colors = self.colorscheme.get(ttype)\n        while colors is None:\n            ttype = ttype.parent\n            colors = self.colorscheme.get(ttype)\n        return colors[self.darkbg]\n\n    def format_unencoded(self, tokensource, outfile):\n        if self.linenos:\n            self._write_lineno(outfile)\n\n        for ttype, value in tokensource:\n            color = self._get_color(ttype)\n\n            for line in value.splitlines(True):\n                if color:\n                    outfile.write(ansiformat(color, line.rstrip('\\n')))\n                else:\n                    outfile.write(line.rstrip('\\n'))\n                if line.endswith('\\n'):\n                    if self.linenos:\n                        self._write_lineno(outfile)\n                    else:\n                        outfile.write('\\n')\n\n        if self.linenos:\n            outfile.write(\"\\n\")\n"},"hash":"iz9LqhlP6x"}