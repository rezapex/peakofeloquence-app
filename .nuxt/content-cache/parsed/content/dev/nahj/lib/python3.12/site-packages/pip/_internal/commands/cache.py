{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:commands:cache.py","body":"import os\nimport textwrap\nfrom optparse import Values\nfrom typing import Any, List\n\nfrom pip._internal.cli.base_command import Command\nfrom pip._internal.cli.status_codes import ERROR, SUCCESS\nfrom pip._internal.exceptions import CommandError, PipError\nfrom pip._internal.utils import filesystem\nfrom pip._internal.utils.logging import getLogger\n\nlogger = getLogger(__name__)\n\n\nclass CacheCommand(Command):\n    \"\"\"\n    Inspect and manage pip's wheel cache.\n\n    Subcommands:\n\n    - dir: Show the cache directory.\n    - info: Show information about the cache.\n    - list: List filenames of packages stored in the cache.\n    - remove: Remove one or more package from the cache.\n    - purge: Remove all items from the cache.\n\n    ``<pattern>`` can be a glob expression or a package name.\n    \"\"\"\n\n    ignore_require_venv = True\n    usage = \"\"\"\n        %prog dir\n        %prog info\n        %prog list [<pattern>] [--format=[human, abspath]]\n        %prog remove <pattern>\n        %prog purge\n    \"\"\"\n\n    def add_options(self) -> None:\n        self.cmd_opts.add_option(\n            \"--format\",\n            action=\"store\",\n            dest=\"list_format\",\n            default=\"human\",\n            choices=(\"human\", \"abspath\"),\n            help=\"Select the output format among: human (default) or abspath\",\n        )\n\n        self.parser.insert_option_group(0, self.cmd_opts)\n\n    def run(self, options: Values, args: List[str]) -> int:\n        handlers = {\n            \"dir\": self.get_cache_dir,\n            \"info\": self.get_cache_info,\n            \"list\": self.list_cache_items,\n            \"remove\": self.remove_cache_items,\n            \"purge\": self.purge_cache,\n        }\n\n        if not options.cache_dir:\n            logger.error(\"pip cache commands can not function since cache is disabled.\")\n            return ERROR\n\n        # Determine action\n        if not args or args[0] not in handlers:\n            logger.error(\n                \"Need an action (%s) to perform.\",\n                \", \".join(sorted(handlers)),\n            )\n            return ERROR\n\n        action = args[0]\n\n        # Error handling happens here, not in the action-handlers.\n        try:\n            handlers[action](options, args[1:])\n        except PipError as e:\n            logger.error(e.args[0])\n            return ERROR\n\n        return SUCCESS\n\n    def get_cache_dir(self, options: Values, args: List[Any]) -> None:\n        if args:\n            raise CommandError(\"Too many arguments\")\n\n        logger.info(options.cache_dir)\n\n    def get_cache_info(self, options: Values, args: List[Any]) -> None:\n        if args:\n            raise CommandError(\"Too many arguments\")\n\n        num_http_files = len(self._find_http_files(options))\n        num_packages = len(self._find_wheels(options, \"*\"))\n\n        http_cache_location = self._cache_dir(options, \"http-v2\")\n        old_http_cache_location = self._cache_dir(options, \"http\")\n        wheels_cache_location = self._cache_dir(options, \"wheels\")\n        http_cache_size = filesystem.format_size(\n            filesystem.directory_size(http_cache_location)\n            + filesystem.directory_size(old_http_cache_location)\n        )\n        wheels_cache_size = filesystem.format_directory_size(wheels_cache_location)\n\n        message = (\n            textwrap.dedent(\n                \"\"\"\n                    Package index page cache location (pip v23.3+): {http_cache_location}\n                    Package index page cache location (older pips): {old_http_cache_location}\n                    Package index page cache size: {http_cache_size}\n                    Number of HTTP files: {num_http_files}\n                    Locally built wheels location: {wheels_cache_location}\n                    Locally built wheels size: {wheels_cache_size}\n                    Number of locally built wheels: {package_count}\n                \"\"\"  # noqa: E501\n            )\n            .format(\n                http_cache_location=http_cache_location,\n                old_http_cache_location=old_http_cache_location,\n                http_cache_size=http_cache_size,\n                num_http_files=num_http_files,\n                wheels_cache_location=wheels_cache_location,\n                package_count=num_packages,\n                wheels_cache_size=wheels_cache_size,\n            )\n            .strip()\n        )\n\n        logger.info(message)\n\n    def list_cache_items(self, options: Values, args: List[Any]) -> None:\n        if len(args) > 1:\n            raise CommandError(\"Too many arguments\")\n\n        if args:\n            pattern = args[0]\n        else:\n            pattern = \"*\"\n\n        files = self._find_wheels(options, pattern)\n        if options.list_format == \"human\":\n            self.format_for_human(files)\n        else:\n            self.format_for_abspath(files)\n\n    def format_for_human(self, files: List[str]) -> None:\n        if not files:\n            logger.info(\"No locally built wheels cached.\")\n            return\n\n        results = []\n        for filename in files:\n            wheel = os.path.basename(filename)\n            size = filesystem.format_file_size(filename)\n            results.append(f\" - {wheel} ({size})\")\n        logger.info(\"Cache contents:\\n\")\n        logger.info(\"\\n\".join(sorted(results)))\n\n    def format_for_abspath(self, files: List[str]) -> None:\n        if files:\n            logger.info(\"\\n\".join(sorted(files)))\n\n    def remove_cache_items(self, options: Values, args: List[Any]) -> None:\n        if len(args) > 1:\n            raise CommandError(\"Too many arguments\")\n\n        if not args:\n            raise CommandError(\"Please provide a pattern\")\n\n        files = self._find_wheels(options, args[0])\n\n        no_matching_msg = \"No matching packages\"\n        if args[0] == \"*\":\n            # Only fetch http files if no specific pattern given\n            files += self._find_http_files(options)\n        else:\n            # Add the pattern to the log message\n            no_matching_msg += f' for pattern \"{args[0]}\"'\n\n        if not files:\n            logger.warning(no_matching_msg)\n\n        for filename in files:\n            os.unlink(filename)\n            logger.verbose(\"Removed %s\", filename)\n        logger.info(\"Files removed: %s\", len(files))\n\n    def purge_cache(self, options: Values, args: List[Any]) -> None:\n        if args:\n            raise CommandError(\"Too many arguments\")\n\n        return self.remove_cache_items(options, [\"*\"])\n\n    def _cache_dir(self, options: Values, subdir: str) -> str:\n        return os.path.join(options.cache_dir, subdir)\n\n    def _find_http_files(self, options: Values) -> List[str]:\n        old_http_dir = self._cache_dir(options, \"http\")\n        new_http_dir = self._cache_dir(options, \"http-v2\")\n        return filesystem.find_files(old_http_dir, \"*\") + filesystem.find_files(\n            new_http_dir, \"*\"\n        )\n\n    def _find_wheels(self, options: Values, pattern: str) -> List[str]:\n        wheel_dir = self._cache_dir(options, \"wheels\")\n\n        # The wheel filename format, as specified in PEP 427, is:\n        #     {distribution}-{version}(-{build})?-{python}-{abi}-{platform}.whl\n        #\n        # Additionally, non-alphanumeric values in the distribution are\n        # normalized to underscores (_), meaning hyphens can never occur\n        # before `-{version}`.\n        #\n        # Given that information:\n        # - If the pattern we're given contains a hyphen (-), the user is\n        #   providing at least the version. Thus, we can just append `*.whl`\n        #   to match the rest of it.\n        # - If the pattern we're given doesn't contain a hyphen (-), the\n        #   user is only providing the name. Thus, we append `-*.whl` to\n        #   match the hyphen before the version, followed by anything else.\n        #\n        # PEP 427: https://www.python.org/dev/peps/pep-0427/\n        pattern = pattern + (\"*.whl\" if \"-\" in pattern else \"-*.whl\")\n\n        return filesystem.find_files(wheel_dir, pattern)\n"},"hash":"a49dAzEOHC"}