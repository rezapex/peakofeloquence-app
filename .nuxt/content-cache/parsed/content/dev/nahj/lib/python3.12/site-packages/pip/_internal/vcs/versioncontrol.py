{"parsed":{"_id":"content:dev:nahj:lib:python3.12:site-packages:pip:_internal:vcs:versioncontrol.py","body":"\"\"\"Handles all VCS (version control) support\"\"\"\n\nimport logging\nimport os\nimport shutil\nimport sys\nimport urllib.parse\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    Iterable,\n    Iterator,\n    List,\n    Mapping,\n    Optional,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom pip._internal.cli.spinners import SpinnerInterface\nfrom pip._internal.exceptions import BadCommand, InstallationError\nfrom pip._internal.utils.misc import (\n    HiddenText,\n    ask_path_exists,\n    backup_dir,\n    display_path,\n    hide_url,\n    hide_value,\n    is_installable_dir,\n    rmtree,\n)\nfrom pip._internal.utils.subprocess import (\n    CommandArgs,\n    call_subprocess,\n    format_command_args,\n    make_command,\n)\nfrom pip._internal.utils.urls import get_url_scheme\n\nif TYPE_CHECKING:\n    # Literal was introduced in Python 3.8.\n    #\n    # TODO: Remove `if TYPE_CHECKING` when dropping support for Python 3.7.\n    from typing import Literal\n\n\n__all__ = [\"vcs\"]\n\n\nlogger = logging.getLogger(__name__)\n\nAuthInfo = Tuple[Optional[str], Optional[str]]\n\n\ndef is_url(name: str) -> bool:\n    \"\"\"\n    Return true if the name looks like a URL.\n    \"\"\"\n    scheme = get_url_scheme(name)\n    if scheme is None:\n        return False\n    return scheme in [\"http\", \"https\", \"file\", \"ftp\"] + vcs.all_schemes\n\n\ndef make_vcs_requirement_url(\n    repo_url: str, rev: str, project_name: str, subdir: Optional[str] = None\n) -> str:\n    \"\"\"\n    Return the URL for a VCS requirement.\n\n    Args:\n      repo_url: the remote VCS url, with any needed VCS prefix (e.g. \"git+\").\n      project_name: the (unescaped) project name.\n    \"\"\"\n    egg_project_name = project_name.replace(\"-\", \"_\")\n    req = f\"{repo_url}@{rev}#egg={egg_project_name}\"\n    if subdir:\n        req += f\"&subdirectory={subdir}\"\n\n    return req\n\n\ndef find_path_to_project_root_from_repo_root(\n    location: str, repo_root: str\n) -> Optional[str]:\n    \"\"\"\n    Find the the Python project's root by searching up the filesystem from\n    `location`. Return the path to project root relative to `repo_root`.\n    Return None if the project root is `repo_root`, or cannot be found.\n    \"\"\"\n    # find project root.\n    orig_location = location\n    while not is_installable_dir(location):\n        last_location = location\n        location = os.path.dirname(location)\n        if location == last_location:\n            # We've traversed up to the root of the filesystem without\n            # finding a Python project.\n            logger.warning(\n                \"Could not find a Python project for directory %s (tried all \"\n                \"parent directories)\",\n                orig_location,\n            )\n            return None\n\n    if os.path.samefile(repo_root, location):\n        return None\n\n    return os.path.relpath(location, repo_root)\n\n\nclass RemoteNotFoundError(Exception):\n    pass\n\n\nclass RemoteNotValidError(Exception):\n    def __init__(self, url: str):\n        super().__init__(url)\n        self.url = url\n\n\nclass RevOptions:\n\n    \"\"\"\n    Encapsulates a VCS-specific revision to install, along with any VCS\n    install options.\n\n    Instances of this class should be treated as if immutable.\n    \"\"\"\n\n    def __init__(\n        self,\n        vc_class: Type[\"VersionControl\"],\n        rev: Optional[str] = None,\n        extra_args: Optional[CommandArgs] = None,\n    ) -> None:\n        \"\"\"\n        Args:\n          vc_class: a VersionControl subclass.\n          rev: the name of the revision to install.\n          extra_args: a list of extra options.\n        \"\"\"\n        if extra_args is None:\n            extra_args = []\n\n        self.extra_args = extra_args\n        self.rev = rev\n        self.vc_class = vc_class\n        self.branch_name: Optional[str] = None\n\n    def __repr__(self) -> str:\n        return f\"<RevOptions {self.vc_class.name}: rev={self.rev!r}>\"\n\n    @property\n    def arg_rev(self) -> Optional[str]:\n        if self.rev is None:\n            return self.vc_class.default_arg_rev\n\n        return self.rev\n\n    def to_args(self) -> CommandArgs:\n        \"\"\"\n        Return the VCS-specific command arguments.\n        \"\"\"\n        args: CommandArgs = []\n        rev = self.arg_rev\n        if rev is not None:\n            args += self.vc_class.get_base_rev_args(rev)\n        args += self.extra_args\n\n        return args\n\n    def to_display(self) -> str:\n        if not self.rev:\n            return \"\"\n\n        return f\" (to revision {self.rev})\"\n\n    def make_new(self, rev: str) -> \"RevOptions\":\n        \"\"\"\n        Make a copy of the current instance, but with a new rev.\n\n        Args:\n          rev: the name of the revision for the new object.\n        \"\"\"\n        return self.vc_class.make_rev_options(rev, extra_args=self.extra_args)\n\n\nclass VcsSupport:\n    _registry: Dict[str, \"VersionControl\"] = {}\n    schemes = [\"ssh\", \"git\", \"hg\", \"bzr\", \"sftp\", \"svn\"]\n\n    def __init__(self) -> None:\n        # Register more schemes with urlparse for various version control\n        # systems\n        urllib.parse.uses_netloc.extend(self.schemes)\n        super().__init__()\n\n    def __iter__(self) -> Iterator[str]:\n        return self._registry.__iter__()\n\n    @property\n    def backends(self) -> List[\"VersionControl\"]:\n        return list(self._registry.values())\n\n    @property\n    def dirnames(self) -> List[str]:\n        return [backend.dirname for backend in self.backends]\n\n    @property\n    def all_schemes(self) -> List[str]:\n        schemes: List[str] = []\n        for backend in self.backends:\n            schemes.extend(backend.schemes)\n        return schemes\n\n    def register(self, cls: Type[\"VersionControl\"]) -> None:\n        if not hasattr(cls, \"name\"):\n            logger.warning(\"Cannot register VCS %s\", cls.__name__)\n            return\n        if cls.name not in self._registry:\n            self._registry[cls.name] = cls()\n            logger.debug(\"Registered VCS backend: %s\", cls.name)\n\n    def unregister(self, name: str) -> None:\n        if name in self._registry:\n            del self._registry[name]\n\n    def get_backend_for_dir(self, location: str) -> Optional[\"VersionControl\"]:\n        \"\"\"\n        Return a VersionControl object if a repository of that type is found\n        at the given directory.\n        \"\"\"\n        vcs_backends = {}\n        for vcs_backend in self._registry.values():\n            repo_path = vcs_backend.get_repository_root(location)\n            if not repo_path:\n                continue\n            logger.debug(\"Determine that %s uses VCS: %s\", location, vcs_backend.name)\n            vcs_backends[repo_path] = vcs_backend\n\n        if not vcs_backends:\n            return None\n\n        # Choose the VCS in the inner-most directory. Since all repository\n        # roots found here would be either `location` or one of its\n        # parents, the longest path should have the most path components,\n        # i.e. the backend representing the inner-most repository.\n        inner_most_repo_path = max(vcs_backends, key=len)\n        return vcs_backends[inner_most_repo_path]\n\n    def get_backend_for_scheme(self, scheme: str) -> Optional[\"VersionControl\"]:\n        \"\"\"\n        Return a VersionControl object or None.\n        \"\"\"\n        for vcs_backend in self._registry.values():\n            if scheme in vcs_backend.schemes:\n                return vcs_backend\n        return None\n\n    def get_backend(self, name: str) -> Optional[\"VersionControl\"]:\n        \"\"\"\n        Return a VersionControl object or None.\n        \"\"\"\n        name = name.lower()\n        return self._registry.get(name)\n\n\nvcs = VcsSupport()\n\n\nclass VersionControl:\n    name = \"\"\n    dirname = \"\"\n    repo_name = \"\"\n    # List of supported schemes for this Version Control\n    schemes: Tuple[str, ...] = ()\n    # Iterable of environment variable names to pass to call_subprocess().\n    unset_environ: Tuple[str, ...] = ()\n    default_arg_rev: Optional[str] = None\n\n    @classmethod\n    def should_add_vcs_url_prefix(cls, remote_url: str) -> bool:\n        \"\"\"\n        Return whether the vcs prefix (e.g. \"git+\") should be added to a\n        repository's remote url when used in a requirement.\n        \"\"\"\n        return not remote_url.lower().startswith(f\"{cls.name}:\")\n\n    @classmethod\n    def get_subdirectory(cls, location: str) -> Optional[str]:\n        \"\"\"\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        \"\"\"\n        return None\n\n    @classmethod\n    def get_requirement_revision(cls, repo_dir: str) -> str:\n        \"\"\"\n        Return the revision string that should be used in a requirement.\n        \"\"\"\n        return cls.get_revision(repo_dir)\n\n    @classmethod\n    def get_src_requirement(cls, repo_dir: str, project_name: str) -> str:\n        \"\"\"\n        Return the requirement string to use to redownload the files\n        currently at the given repository directory.\n\n        Args:\n          project_name: the (unescaped) project name.\n\n        The return value has a form similar to the following:\n\n            {repository_url}@{revision}#egg={project_name}\n        \"\"\"\n        repo_url = cls.get_remote_url(repo_dir)\n\n        if cls.should_add_vcs_url_prefix(repo_url):\n            repo_url = f\"{cls.name}+{repo_url}\"\n\n        revision = cls.get_requirement_revision(repo_dir)\n        subdir = cls.get_subdirectory(repo_dir)\n        req = make_vcs_requirement_url(repo_url, revision, project_name, subdir=subdir)\n\n        return req\n\n    @staticmethod\n    def get_base_rev_args(rev: str) -> List[str]:\n        \"\"\"\n        Return the base revision arguments for a vcs command.\n\n        Args:\n          rev: the name of a revision to install.  Cannot be None.\n        \"\"\"\n        raise NotImplementedError\n\n    def is_immutable_rev_checkout(self, url: str, dest: str) -> bool:\n        \"\"\"\n        Return true if the commit hash checked out at dest matches\n        the revision in url.\n\n        Always return False, if the VCS does not support immutable commit\n        hashes.\n\n        This method does not check if there are local uncommitted changes\n        in dest after checkout, as pip currently has no use case for that.\n        \"\"\"\n        return False\n\n    @classmethod\n    def make_rev_options(\n        cls, rev: Optional[str] = None, extra_args: Optional[CommandArgs] = None\n    ) -> RevOptions:\n        \"\"\"\n        Return a RevOptions object.\n\n        Args:\n          rev: the name of a revision to install.\n          extra_args: a list of extra options.\n        \"\"\"\n        return RevOptions(cls, rev, extra_args=extra_args)\n\n    @classmethod\n    def _is_local_repository(cls, repo: str) -> bool:\n        \"\"\"\n        posix absolute paths start with os.path.sep,\n        win32 ones start with drive (like c:\\\\folder)\n        \"\"\"\n        drive, tail = os.path.splitdrive(repo)\n        return repo.startswith(os.path.sep) or bool(drive)\n\n    @classmethod\n    def get_netloc_and_auth(\n        cls, netloc: str, scheme: str\n    ) -> Tuple[str, Tuple[Optional[str], Optional[str]]]:\n        \"\"\"\n        Parse the repository URL's netloc, and return the new netloc to use\n        along with auth information.\n\n        Args:\n          netloc: the original repository URL netloc.\n          scheme: the repository URL's scheme without the vcs prefix.\n\n        This is mainly for the Subversion class to override, so that auth\n        information can be provided via the --username and --password options\n        instead of through the URL.  For other subclasses like Git without\n        such an option, auth information must stay in the URL.\n\n        Returns: (netloc, (username, password)).\n        \"\"\"\n        return netloc, (None, None)\n\n    @classmethod\n    def get_url_rev_and_auth(cls, url: str) -> Tuple[str, Optional[str], AuthInfo]:\n        \"\"\"\n        Parse the repository URL to use, and return the URL, revision,\n        and auth info to use.\n\n        Returns: (url, rev, (username, password)).\n        \"\"\"\n        scheme, netloc, path, query, frag = urllib.parse.urlsplit(url)\n        if \"+\" not in scheme:\n            raise ValueError(\n                f\"Sorry, {url!r} is a malformed VCS url. \"\n                \"The format is <vcs>+<protocol>://<url>, \"\n                \"e.g. svn+http://myrepo/svn/MyApp#egg=MyApp\"\n            )\n        # Remove the vcs prefix.\n        scheme = scheme.split(\"+\", 1)[1]\n        netloc, user_pass = cls.get_netloc_and_auth(netloc, scheme)\n        rev = None\n        if \"@\" in path:\n            path, rev = path.rsplit(\"@\", 1)\n            if not rev:\n                raise InstallationError(\n                    f\"The URL {url!r} has an empty revision (after @) \"\n                    \"which is not supported. Include a revision after @ \"\n                    \"or remove @ from the URL.\"\n                )\n        url = urllib.parse.urlunsplit((scheme, netloc, path, query, \"\"))\n        return url, rev, user_pass\n\n    @staticmethod\n    def make_rev_args(\n        username: Optional[str], password: Optional[HiddenText]\n    ) -> CommandArgs:\n        \"\"\"\n        Return the RevOptions \"extra arguments\" to use in obtain().\n        \"\"\"\n        return []\n\n    def get_url_rev_options(self, url: HiddenText) -> Tuple[HiddenText, RevOptions]:\n        \"\"\"\n        Return the URL and RevOptions object to use in obtain(),\n        as a tuple (url, rev_options).\n        \"\"\"\n        secret_url, rev, user_pass = self.get_url_rev_and_auth(url.secret)\n        username, secret_password = user_pass\n        password: Optional[HiddenText] = None\n        if secret_password is not None:\n            password = hide_value(secret_password)\n        extra_args = self.make_rev_args(username, password)\n        rev_options = self.make_rev_options(rev, extra_args=extra_args)\n\n        return hide_url(secret_url), rev_options\n\n    @staticmethod\n    def normalize_url(url: str) -> str:\n        \"\"\"\n        Normalize a URL for comparison by unquoting it and removing any\n        trailing slash.\n        \"\"\"\n        return urllib.parse.unquote(url).rstrip(\"/\")\n\n    @classmethod\n    def compare_urls(cls, url1: str, url2: str) -> bool:\n        \"\"\"\n        Compare two repo URLs for identity, ignoring incidental differences.\n        \"\"\"\n        return cls.normalize_url(url1) == cls.normalize_url(url2)\n\n    def fetch_new(\n        self, dest: str, url: HiddenText, rev_options: RevOptions, verbosity: int\n    ) -> None:\n        \"\"\"\n        Fetch a revision from a repository, in the case that this is the\n        first fetch from the repository.\n\n        Args:\n          dest: the directory to fetch the repository to.\n          rev_options: a RevOptions object.\n          verbosity: verbosity level.\n        \"\"\"\n        raise NotImplementedError\n\n    def switch(self, dest: str, url: HiddenText, rev_options: RevOptions) -> None:\n        \"\"\"\n        Switch the repo at ``dest`` to point to ``URL``.\n\n        Args:\n          rev_options: a RevOptions object.\n        \"\"\"\n        raise NotImplementedError\n\n    def update(self, dest: str, url: HiddenText, rev_options: RevOptions) -> None:\n        \"\"\"\n        Update an already-existing repo to the given ``rev_options``.\n\n        Args:\n          rev_options: a RevOptions object.\n        \"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def is_commit_id_equal(cls, dest: str, name: Optional[str]) -> bool:\n        \"\"\"\n        Return whether the id of the current commit equals the given name.\n\n        Args:\n          dest: the repository directory.\n          name: a string name.\n        \"\"\"\n        raise NotImplementedError\n\n    def obtain(self, dest: str, url: HiddenText, verbosity: int) -> None:\n        \"\"\"\n        Install or update in editable mode the package represented by this\n        VersionControl object.\n\n        :param dest: the repository directory in which to install or update.\n        :param url: the repository URL starting with a vcs prefix.\n        :param verbosity: verbosity level.\n        \"\"\"\n        url, rev_options = self.get_url_rev_options(url)\n\n        if not os.path.exists(dest):\n            self.fetch_new(dest, url, rev_options, verbosity=verbosity)\n            return\n\n        rev_display = rev_options.to_display()\n        if self.is_repository_directory(dest):\n            existing_url = self.get_remote_url(dest)\n            if self.compare_urls(existing_url, url.secret):\n                logger.debug(\n                    \"%s in %s exists, and has correct URL (%s)\",\n                    self.repo_name.title(),\n                    display_path(dest),\n                    url,\n                )\n                if not self.is_commit_id_equal(dest, rev_options.rev):\n                    logger.info(\n                        \"Updating %s %s%s\",\n                        display_path(dest),\n                        self.repo_name,\n                        rev_display,\n                    )\n                    self.update(dest, url, rev_options)\n                else:\n                    logger.info(\"Skipping because already up-to-date.\")\n                return\n\n            logger.warning(\n                \"%s %s in %s exists with URL %s\",\n                self.name,\n                self.repo_name,\n                display_path(dest),\n                existing_url,\n            )\n            prompt = (\"(s)witch, (i)gnore, (w)ipe, (b)ackup \", (\"s\", \"i\", \"w\", \"b\"))\n        else:\n            logger.warning(\n                \"Directory %s already exists, and is not a %s %s.\",\n                dest,\n                self.name,\n                self.repo_name,\n            )\n            # https://github.com/python/mypy/issues/1174\n            prompt = (\"(i)gnore, (w)ipe, (b)ackup \", (\"i\", \"w\", \"b\"))  # type: ignore\n\n        logger.warning(\n            \"The plan is to install the %s repository %s\",\n            self.name,\n            url,\n        )\n        response = ask_path_exists(f\"What to do?  {prompt[0]}\", prompt[1])\n\n        if response == \"a\":\n            sys.exit(-1)\n\n        if response == \"w\":\n            logger.warning(\"Deleting %s\", display_path(dest))\n            rmtree(dest)\n            self.fetch_new(dest, url, rev_options, verbosity=verbosity)\n            return\n\n        if response == \"b\":\n            dest_dir = backup_dir(dest)\n            logger.warning(\"Backing up %s to %s\", display_path(dest), dest_dir)\n            shutil.move(dest, dest_dir)\n            self.fetch_new(dest, url, rev_options, verbosity=verbosity)\n            return\n\n        # Do nothing if the response is \"i\".\n        if response == \"s\":\n            logger.info(\n                \"Switching %s %s to %s%s\",\n                self.repo_name,\n                display_path(dest),\n                url,\n                rev_display,\n            )\n            self.switch(dest, url, rev_options)\n\n    def unpack(self, location: str, url: HiddenText, verbosity: int) -> None:\n        \"\"\"\n        Clean up current location and download the url repository\n        (and vcs infos) into location\n\n        :param url: the repository URL starting with a vcs prefix.\n        :param verbosity: verbosity level.\n        \"\"\"\n        if os.path.exists(location):\n            rmtree(location)\n        self.obtain(location, url=url, verbosity=verbosity)\n\n    @classmethod\n    def get_remote_url(cls, location: str) -> str:\n        \"\"\"\n        Return the url used at location\n\n        Raises RemoteNotFoundError if the repository does not have a remote\n        url configured.\n        \"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def get_revision(cls, location: str) -> str:\n        \"\"\"\n        Return the current commit id of the files at the given location.\n        \"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def run_command(\n        cls,\n        cmd: Union[List[str], CommandArgs],\n        show_stdout: bool = True,\n        cwd: Optional[str] = None,\n        on_returncode: 'Literal[\"raise\", \"warn\", \"ignore\"]' = \"raise\",\n        extra_ok_returncodes: Optional[Iterable[int]] = None,\n        command_desc: Optional[str] = None,\n        extra_environ: Optional[Mapping[str, Any]] = None,\n        spinner: Optional[SpinnerInterface] = None,\n        log_failed_cmd: bool = True,\n        stdout_only: bool = False,\n    ) -> str:\n        \"\"\"\n        Run a VCS subcommand\n        This is simply a wrapper around call_subprocess that adds the VCS\n        command name, and checks that the VCS is available\n        \"\"\"\n        cmd = make_command(cls.name, *cmd)\n        if command_desc is None:\n            command_desc = format_command_args(cmd)\n        try:\n            return call_subprocess(\n                cmd,\n                show_stdout,\n                cwd,\n                on_returncode=on_returncode,\n                extra_ok_returncodes=extra_ok_returncodes,\n                command_desc=command_desc,\n                extra_environ=extra_environ,\n                unset_environ=cls.unset_environ,\n                spinner=spinner,\n                log_failed_cmd=log_failed_cmd,\n                stdout_only=stdout_only,\n            )\n        except FileNotFoundError:\n            # errno.ENOENT = no such file or directory\n            # In other words, the VCS executable isn't available\n            raise BadCommand(\n                f\"Cannot find command {cls.name!r} - do you have \"\n                f\"{cls.name!r} installed and in your PATH?\"\n            )\n        except PermissionError:\n            # errno.EACCES = Permission denied\n            # This error occurs, for instance, when the command is installed\n            # only for another user. So, the current user don't have\n            # permission to call the other user command.\n            raise BadCommand(\n                f\"No permission to execute {cls.name!r} - install it \"\n                f\"locally, globally (ask admin), or check your PATH. \"\n                f\"See possible solutions at \"\n                f\"https://pip.pypa.io/en/latest/reference/pip_freeze/\"\n                f\"#fixing-permission-denied.\"\n            )\n\n    @classmethod\n    def is_repository_directory(cls, path: str) -> bool:\n        \"\"\"\n        Return whether a directory path is a repository directory.\n        \"\"\"\n        logger.debug(\"Checking in %s for %s (%s)...\", path, cls.dirname, cls.name)\n        return os.path.exists(os.path.join(path, cls.dirname))\n\n    @classmethod\n    def get_repository_root(cls, location: str) -> Optional[str]:\n        \"\"\"\n        Return the \"root\" (top-level) directory controlled by the vcs,\n        or `None` if the directory is not in any.\n\n        It is meant to be overridden to implement smarter detection\n        mechanisms for specific vcs.\n\n        This can do more than is_repository_directory() alone. For\n        example, the Git override checks that Git is actually available.\n        \"\"\"\n        if cls.is_repository_directory(location):\n            return location\n        return None\n"},"hash":"Z5ewKFx5Tu"}