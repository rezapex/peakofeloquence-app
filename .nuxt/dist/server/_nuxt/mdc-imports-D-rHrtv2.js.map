{"version":3,"file":"mdc-imports-D-rHrtv2.js","sources":["../../../../node_modules/@nuxtjs/mdc/dist/runtime/highlighter/rehype.mjs","../../../../node_modules/@nuxtjs/mdc/dist/runtime/highlighter/rehype-nuxt.mjs","../../../mdc-imports.mjs"],"sourcesContent":["import { visit } from \"unist-util-visit\";\nimport { toString } from \"hast-util-to-string\";\nexport default rehypeHighlight;\nexport function rehypeHighlight(opts) {\n  const options = opts;\n  return async (tree) => {\n    const tasks = [];\n    const styles = [];\n    visit(\n      tree,\n      (node) => [\"pre\", \"code\"].includes(node.tagName) && !!(node.properties?.language || node.properties?.highlights),\n      (node) => {\n        const _node = node;\n        const highlights = typeof _node.properties.highlights === \"string\" ? _node.properties.highlights.split(/[,\\s]+/).map(Number) : Array.isArray(_node.properties.highlights) ? _node.properties.highlights.map(Number) : [];\n        const task = options.highlighter(\n          toString(node),\n          _node.properties.language,\n          options.theme,\n          {\n            highlights: highlights.filter(Boolean),\n            meta: _node.properties.meta\n          }\n        ).then(({ tree: tree2, className, style, inlineStyle }) => {\n          _node.properties.className = ((_node.properties.className || \"\") + \" \" + className).trim();\n          _node.properties.style = ((_node.properties.style || \"\") + \" \" + inlineStyle).trim();\n          if (_node.children[0]?.tagName === \"code\") {\n            _node.children[0].children = tree2;\n          } else {\n            _node.children = tree2[0].children || tree2;\n          }\n          if (style)\n            styles.push(style);\n        });\n        tasks.push(task);\n      }\n    );\n    if (tasks.length) {\n      await Promise.all(tasks);\n      tree.children.push({\n        type: \"element\",\n        tagName: \"style\",\n        children: [{ type: \"text\", value: cleanCSS(styles.join(\"\")) }],\n        properties: {}\n      });\n    }\n  };\n}\nconst cleanCSS = (css) => {\n  const styles = css.split(\"}\").filter((s) => Boolean(s.trim())).map((s) => s.trim() + \"}\");\n  return Array.from(new Set(styles)).join(\"\");\n};\n","import { rehypeHighlight as rehypeHighlightUniversal } from \"./rehype.mjs\";\nconst defaults = {\n  theme: {},\n  async highlighter(code, lang, theme, options) {\n    try {\n      if (process.browser && window.sessionStorage.getItem(\"mdc-shiki-highlighter\") === \"browser\") {\n        return import(\"#mdc-highlighter\").then((h) => h.default(code, lang, theme, options)).catch(() => ({}));\n      }\n      return await $fetch(\"/api/_mdc/highlight\", {\n        params: {\n          code,\n          lang,\n          theme: JSON.stringify(theme),\n          options: JSON.stringify(options)\n        }\n      });\n    } catch (e) {\n      if (process.browser && e?.response?.status === 404) {\n        window.sessionStorage.setItem(\"mdc-shiki-highlighter\", \"browser\");\n        return this.highlighter?.(code, lang, theme, options);\n      }\n    }\n    return Promise.resolve({ tree: [{ type: \"text\", value: code }], className: \"\", style: \"\" });\n  }\n};\nexport default rehypeHighlight;\nexport function rehypeHighlight(opts = {}) {\n  const options = { ...defaults, ...opts };\n  if (typeof options.highlighter !== \"function\") {\n    options.highlighter = defaults.highlighter;\n  }\n  return rehypeHighlightUniversal(options);\n}\n","import _Highlight from '/Users/rezajafar/peakofeloquence-site/node_modules/@nuxtjs/mdc/dist/runtime/highlighter/rehype-nuxt.mjs'\n\nexport const remarkPlugins = {\n}\n\nexport const rehypePlugins = {\n  'highlight': { instance: _Highlight, options: {} },\n}\n\nexport const highlight = {\"theme\":{\"light\":\"material-theme-lighter\",\"default\":\"material-theme\",\"dark\":\"material-theme-palenight\"}}"],"names":["rehypeHighlight","rehypeHighlightUniversal","_Highlight"],"mappings":"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","x_google_ignoreList":[0,1]}